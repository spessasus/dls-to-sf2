{
  "version": 3,
  "sources": ["node_modules/spessasynth_lib/utils/indexed_array.js", "node_modules/spessasynth_lib/utils/byte_functions/string.js", "node_modules/spessasynth_lib/utils/loggin.js", "node_modules/spessasynth_lib/utils/other.js", "node_modules/spessasynth_lib/utils/byte_functions/little_endian.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/riff_chunk.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/generator.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/write_sf2/igen.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/write_sf2/sdta.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/write_sf2/shdr.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/write_sf2/imod.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/write_sf2/ibag.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/write_sf2/inst.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/write_sf2/pgen.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/write_sf2/pmod.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/write_sf2/pbag.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/write_sf2/phdr.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/write_sf2/write.js", "node_modules/spessasynth_lib/midi_parser/midi_message.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/modulator.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/basic_soundfont.js", "node_modules/spessasynth_lib/soundfont/dls/read_instrument_list.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/basic_preset.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/basic_zone.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/basic_zones.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/basic_instrument.js", "node_modules/spessasynth_lib/soundfont/dls/dls_preset.js", "node_modules/spessasynth_lib/soundfont/dls/read_instrument.js", "node_modules/spessasynth_lib/soundfont/dls/dls_destinations.js", "node_modules/spessasynth_lib/soundfont/dls/dls_sources.js", "node_modules/spessasynth_lib/soundfont/dls/articulator_converter.js", "node_modules/spessasynth_lib/soundfont/dls/read_articulation.js", "node_modules/spessasynth_lib/soundfont/dls/read_lart.js", "node_modules/spessasynth_lib/soundfont/dls/dls_zone.js", "node_modules/spessasynth_lib/soundfont/dls/read_region.js", "node_modules/spessasynth_lib/soundfont/basic_soundfont/basic_sample.js", "node_modules/spessasynth_lib/soundfont/dls/dls_sample.js", "node_modules/spessasynth_lib/soundfont/dls/read_samples.js", "node_modules/spessasynth_lib/soundfont/dls/dls_soundfont.js", "node_modules/spessasynth_lib/externals/stbvorbis_sync/stbvorbis_sync.min.js", "node_modules/spessasynth_lib/soundfont/read_sf2/samples.js", "node_modules/spessasynth_lib/soundfont/read_sf2/generators.js", "node_modules/spessasynth_lib/soundfont/read_sf2/instruments.js", "node_modules/spessasynth_lib/soundfont/read_sf2/zones.js", "node_modules/spessasynth_lib/soundfont/read_sf2/presets.js", "node_modules/spessasynth_lib/soundfont/read_sf2/modulators.js", "node_modules/spessasynth_lib/soundfont/read_sf2/soundfont.js", "node_modules/spessasynth_lib/soundfont/load_soundfont.js", "node_modules/spessasynth_lib/synthetizer/worklet_system/worklet_utilities/controller_tables.js", "node_modules/spessasynth_lib/midi_parser/midi_loader.js", "node_modules/spessasynth_lib/midi_parser/midi_data.js", "index.js"],
  "sourcesContent": ["/**\n * indexed_array.js\n * purpose: exteds Uint8Array with a currentIndex property\n */\n\nexport class IndexedByteArray extends Uint8Array\n{\n    /**\n     * The current index of the array\n     * @type {number}\n     */\n    currentIndex;\n    \n    /**\n     * Creates a new instance of an Uint8Array with a currentIndex property\n     * @param args {any} same as for Uint8Array\n     */\n    constructor(args)\n    {\n        super(args);\n        this.currentIndex = 0;\n    }\n}\n\n\n/**\n * @param arrs {(IndexedByteArray|Uint8Array)[]}\n * @returns {IndexedByteArray|Uint8Array}\n */\nexport function combineArrays(arrs)\n{\n    const length = arrs.reduce((sum, current) => sum + current.length, 0);\n    const newArr = new IndexedByteArray(length);\n    let offset = 0;\n    for (const arr of arrs)\n    {\n        newArr.set(arr, offset);\n        offset += arr.length;\n    }\n    return newArr;\n}", "import { IndexedByteArray } from \"../indexed_array.js\";\n\n/**\n * @param dataArray {IndexedByteArray}\n * @param bytes {number}\n * @param encoding {string} the textElement encoding\n * @param trimEnd {boolean} if we should trim once we reach an invalid byte\n * @returns {string}\n */\nexport function readBytesAsString(dataArray, bytes, encoding = undefined, trimEnd = true)\n{\n    if (!encoding)\n    {\n        let finished = false;\n        let string = \"\";\n        for (let i = 0; i < bytes; i++)\n        {\n            let byte = dataArray[dataArray.currentIndex++];\n            if (finished)\n            {\n                continue;\n            }\n            if (byte < 32 || byte > 127)\n            {\n                if (trimEnd)\n                {\n                    finished = true;\n                    continue;\n                }\n                else\n                {\n                    if (byte === 0)\n                    {\n                        finished = true;\n                        continue;\n                    }\n                }\n            }\n            string += String.fromCharCode(byte);\n        }\n        return string;\n    }\n    else\n    {\n        let byteBuffer = dataArray.slice(dataArray.currentIndex, dataArray.currentIndex + bytes);\n        dataArray.currentIndex += bytes;\n        let decoder = new TextDecoder(encoding.replace(/[^\\x20-\\x7E]/g, \"\"));\n        return decoder.decode(byteBuffer.buffer);\n    }\n}\n\n/**\n * @param string {string}\n * @param padLength {number}\n * @returns {IndexedByteArray}\n */\nexport function getStringBytes(string, padLength = 0)\n{\n    let len = string.length;\n    if (padLength > 0)\n    {\n        len = padLength;\n    }\n    const arr = new IndexedByteArray(len);\n    writeStringAsBytes(arr, string, padLength);\n    return arr;\n}\n\n/**\n * @param string {string}\n * @param outArray {IndexedByteArray}\n * @param padLength {number}\n * @returns {IndexedByteArray} modified IN PLACE\n */\nexport function writeStringAsBytes(outArray, string, padLength = 0)\n{\n    if (padLength > 0)\n    {\n        if (string.length > padLength)\n        {\n            string = string.slice(0, padLength);\n        }\n    }\n    for (let i = 0; i < string.length; i++)\n    {\n        outArray[outArray.currentIndex++] = string.charCodeAt(i);\n    }\n    \n    // pad with zeros if needed\n    if (padLength > string.length)\n    {\n        for (let i = 0; i < padLength - string.length; i++)\n        {\n            outArray[outArray.currentIndex++] = 0;\n        }\n    }\n    return outArray;\n}", "let ENABLE_INFO = false;\nlet ENABLE_WARN = true;\nlet ENABLE_GROUP = false;\nlet ENABLE_TABLE = true;\n\n/**\n * Enables or disables looging\n * @param enableInfo {boolean} - enables info\n * @param enableWarn {boolean} - enables warning\n * @param enableGroup {boolean} - enables groups\n * @param enableTable {boolean} - enables tables\n */\nexport function SpessaSynthLogging(enableInfo, enableWarn, enableGroup, enableTable)\n{\n    ENABLE_INFO = enableInfo;\n    ENABLE_WARN = enableWarn;\n    ENABLE_GROUP = enableGroup;\n    ENABLE_TABLE = enableTable;\n}\n\n/**\n * @param message {...any}\n */\nexport function SpessaSynthInfo(...message)\n{\n    if (ENABLE_INFO)\n    {\n        console.info(...message);\n    }\n}\n\n/**\n * @param message {...any}\n */\nexport function SpessaSynthWarn(...message)\n{\n    if (ENABLE_WARN)\n    {\n        console.warn(...message);\n    }\n}\n\nexport function SpessaSynthTable(...args)\n{\n    if (ENABLE_TABLE)\n    {\n        console.table(...args);\n    }\n}\n\n/**\n * @param message {...any} the message\n */\nexport function SpessaSynthGroup(...message)\n{\n    if (ENABLE_GROUP)\n    {\n        console.group(...message);\n    }\n}\n\n/**\n * @param message {...any} the message\n */\nexport function SpessaSynthGroupCollapsed(...message)\n{\n    if (ENABLE_GROUP)\n    {\n        console.groupCollapsed(...message);\n    }\n}\n\nexport function SpessaSynthGroupEnd()\n{\n    if (ENABLE_GROUP)\n    {\n        console.groupEnd();\n    }\n}", "/**\n * other.js\n * purpose: contains some useful functions that don't belong in any specific category\n */\n\n/**\n * Formats the given seconds to nice readable time\n * @param totalSeconds {number} time in seconds\n * @return {{seconds: number, minutes: number, time: string}}\n */\nexport function formatTime(totalSeconds)\n{\n    totalSeconds = Math.floor(totalSeconds);\n    let minutes = Math.floor(totalSeconds / 60);\n    let seconds = Math.round(totalSeconds - (minutes * 60));\n    return {\n        \"minutes\": minutes,\n        \"seconds\": seconds,\n        \"time\": `${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`\n    };\n}\n\n/**\n * @param fileName {string}\n * @returns {string}\n */\nexport function formatTitle(fileName)\n{\n    return fileName\n        .trim()\n        .replaceAll(\".mid\", \"\")\n        .replaceAll(\".rmi\", \"\")\n        .replaceAll(\"_\", \" \");\n}\n\n/**\n * Does what it says\n * @param arr {number[]}\n * @returns {string}\n */\nexport function arrayToHexString(arr)\n{\n    let hexString = \"\";\n    \n    for (let i = 0; i < arr.length; i++)\n    {\n        const hex = arr[i].toString(16).padStart(2, \"0\").toUpperCase();\n        hexString += hex;\n        hexString += \" \";\n    }\n    \n    return hexString;\n}\n\nexport const consoleColors = {\n    warn: \"color: orange;\",\n    unrecognized: \"color: red;\",\n    info: \"color: aqua;\",\n    recognized: \"color: lime\",\n    value: \"color: yellow; background-color: black;\"\n};", "/**\n * Reads as little endian\n * @param dataArray {IndexedByteArray}\n * @param bytesAmount {number}\n * @returns {number}\n */\nexport function readLittleEndian(dataArray, bytesAmount)\n{\n    let out = 0;\n    for (let i = 0; i < bytesAmount; i++)\n    {\n        out |= (dataArray[dataArray.currentIndex++] << i * 8);\n    }\n    // make sure it stays unsigned\n    return out >>> 0;\n}\n\n/**\n * Writes a number as little endian seems to also work for negative numbers so yay?\n * @param dataArray {IndexedByteArray}\n * @param number {number}\n * @param byteTarget {number}\n */\nexport function writeLittleEndian(dataArray, number, byteTarget)\n{\n    for (let i = 0; i < byteTarget; i++)\n    {\n        dataArray[dataArray.currentIndex++] = (number >> (i * 8)) & 0xFF;\n    }\n}\n\n/**\n * @param dataArray {IndexedByteArray}\n * @param word {number}\n */\nexport function writeWord(dataArray, word)\n{\n    dataArray[dataArray.currentIndex++] = word & 0xFF;\n    dataArray[dataArray.currentIndex++] = word >> 8;\n}\n\n/**\n * @param dataArray {IndexedByteArray}\n * @param dword {number}\n */\nexport function writeDword(dataArray, dword)\n{\n    writeLittleEndian(dataArray, dword, 4);\n}\n\n/**\n * @param byte1 {number}\n * @param byte2 {number}\n * @returns {number}\n */\nexport function signedInt16(byte1, byte2)\n{\n    let val = (byte2 << 8) | byte1;\n    if (val > 32767)\n    {\n        return val - 65536;\n    }\n    return val;\n}\n\n/**\n * @param byte {number}\n * @returns {number}\n */\nexport function signedInt8(byte)\n{\n    if (byte > 127)\n    {\n        return byte - 256;\n    }\n    return byte;\n}", "import { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { readLittleEndian, writeDword } from \"../../utils/byte_functions/little_endian.js\";\nimport { readBytesAsString, writeStringAsBytes } from \"../../utils/byte_functions/string.js\";\n\n/**\n * riff_chunk.js\n * reads a riff read and stores it as a class\n */\n\nexport class RiffChunk\n{\n    /**\n     * Creates a new riff read\n     * @constructor\n     * @param header {string}\n     * @param size {number}\n     * @param data {IndexedByteArray}\n     */\n    constructor(header, size, data)\n    {\n        this.header = header;\n        this.size = size;\n        this.chunkData = data;\n    }\n    \n}\n\n/**\n * @param dataArray {IndexedByteArray}\n * @param readData {boolean}\n * @param forceShift {boolean}\n * @returns {RiffChunk}\n */\nexport function readRIFFChunk(dataArray, readData = true, forceShift = false)\n{\n    let header = readBytesAsString(dataArray, 4);\n    \n    let size = readLittleEndian(dataArray, 4);\n    let chunkData = undefined;\n    if (readData)\n    {\n        chunkData = new IndexedByteArray(dataArray.buffer.slice(dataArray.currentIndex, dataArray.currentIndex + size));\n    }\n    if (readData || forceShift)\n    {\n        dataArray.currentIndex += size;\n    }\n    \n    if (size % 2 !== 0)\n    {\n        if (dataArray[dataArray.currentIndex] === 0)\n        {\n            dataArray.currentIndex++;\n        }\n    }\n    \n    return new RiffChunk(header, size, chunkData);\n}\n\n/**\n * @param chunk {RiffChunk}\n * @param prepend {IndexedByteArray}\n * @returns {IndexedByteArray}\n */\nexport function writeRIFFChunk(chunk, prepend = undefined)\n{\n    let size = 8 + chunk.size;\n    if (chunk.size % 2 !== 0)\n    {\n        size++;\n    }\n    if (prepend)\n    {\n        size += prepend.length;\n    }\n    const array = new IndexedByteArray(size);\n    // prepend data (for example type before the read)\n    if (prepend)\n    {\n        array.set(prepend, array.currentIndex);\n        array.currentIndex += prepend.length;\n    }\n    // write header\n    writeStringAsBytes(array, chunk.header);\n    // write size (excluding header and the size itself) and the prepend if specified\n    writeDword(array, size - 8 - (prepend?.length || 0));\n    // write data\n    array.set(chunk.chunkData, array.currentIndex);\n    return array;\n}\n\n/**\n * @param header {string}\n * @param data {Uint8Array}\n * @param addZeroByte {Boolean}\n * @returns {IndexedByteArray}\n */\nexport function writeRIFFOddSize(header, data, addZeroByte = false)\n{\n    if (addZeroByte)\n    {\n        const tempData = new Uint8Array(data.length + 1);\n        tempData.set(data, 0);\n        data = tempData;\n    }\n    let finalSize = 8 + data.length;\n    if (finalSize % 2 !== 0)\n    {\n        finalSize++;\n    }\n    const outArray = new IndexedByteArray(finalSize);\n    writeStringAsBytes(outArray, header);\n    writeDword(outArray, data.length);\n    outArray.set(data, 8);\n    return outArray;\n}\n\n/**\n * @param collection {RiffChunk[]}\n * @param type {string}\n * @returns {RiffChunk|undefined}\n */\nexport function findRIFFListType(collection, type)\n{\n    return collection.find(c =>\n    {\n        if (c.header !== \"LIST\")\n        {\n            return false;\n        }\n        c.chunkData.currentIndex = 0;\n        return readBytesAsString(c.chunkData, 4) === type;\n    });\n}", "/**\n * @enum {number}\n */\nexport const generatorTypes = {\n    INVALID: -1,                        // invalid generator\n    startAddrsOffset: 0,                // sample control - moves sample start point\n    endAddrOffset: 1,                   // sample control - moves sample end point\n    startloopAddrsOffset: 2,            // loop control - moves loop start point\n    endloopAddrsOffset: 3,              // loop control - moves loop end point\n    startAddrsCoarseOffset: 4,          // sample control - moves sample start point in 32768 increments\n    modLfoToPitch: 5,                   // pitch modulation - modulation lfo pitch modulation in cents\n    vibLfoToPitch: 6,                   // pitch modulation - vibrato lfo pitch modulation in cents\n    modEnvToPitch: 7,                   // pitch modulation - modulation envelope pitch modulation in cents\n    initialFilterFc: 8,                 // filter - lowpass filter cutoff in cents\n    initialFilterQ: 9,                  // filter - lowpass filter resonance\n    modLfoToFilterFc: 10,               // filter modulation - modulation lfo lowpass filter cutoff in cents\n    modEnvToFilterFc: 11,               // filter modulation - modulation envelope lowpass filter cutoff in cents\n    endAddrsCoarseOffset: 12,           // ample control - moves sample end point in 32768 increments\n    modLfoToVolume: 13,                 // modulation lfo - volume (tremolo), where 100 = 10dB\n    unused1: 14,\n    chorusEffectsSend: 15,              // effect send - how much is sent to chorus 0 - 1000\n    reverbEffectsSend: 16,              // effect send - how much is sent to reverb 0 - 1000\n    pan: 17,                            // panning - where -500 = left, 0 = center, 500 = right\n    unused2: 18,\n    unused3: 19,\n    unused4: 20,\n    delayModLFO: 21,                    // mod lfo - delay for mod lfo to start from zero (weird scale)\n    freqModLFO: 22,                     // mod lfo - frequency of mod lfo, 0 = 8.176Hz, unit: f => 1200log2(f/8.176)\n    delayVibLFO: 23,                    // vib lfo - delay for vibrato lfo to start from zero (weird scale)\n    freqVibLFO: 24,                     // vib lfo - frequency of vibrato lfo, 0 = 8.176Hz, unit: f => 1200log2(f/8.176)\n    delayModEnv: 25,                    // mod env - 0 = 1s declay till mod env starts\n    attackModEnv: 26,                   // mod env - attack of mod env\n    holdModEnv: 27,                     // mod env - hold of mod env\n    decayModEnv: 28,                    // mod env - decay of mod env\n    sustainModEnv: 29,                  // mod env - sustain of mod env\n    releaseModEnv: 30,                  // mod env - release of mod env\n    keyNumToModEnvHold: 31,             // mod env - also modulating mod envelope hold with key number\n    keyNumToModEnvDecay: 32,            // mod env - also modulating mod envelope decay with key number\n    delayVolEnv: 33,                    // vol env - delay of envelope from zero (weird scale)\n    attackVolEnv: 34,                   // vol env - attack of envelope\n    holdVolEnv: 35,                     // vol env - hold of envelope\n    decayVolEnv: 36,                    // vol env - decay of envelope\n    sustainVolEnv: 37,                  // vol env - sustain of envelope\n    releaseVolEnv: 38,                  // vol env - release of envelope\n    keyNumToVolEnvHold: 39,             // vol env - key number to volume envelope hold\n    keyNumToVolEnvDecay: 40,            // vol env - key number to volume envelope decay\n    instrument: 41,                     // zone - instrument index to use for preset zone\n    reserved1: 42,\n    keyRange: 43,                       // zone - key range for which preset / instrument zone is active\n    velRange: 44,                       // zone - velocity range for which preset / instrument zone is active\n    startloopAddrsCoarseOffset: 45,     // sample control - moves sample loop start point in 32768 increments\n    keyNum: 46,                         // zone - instrument only: always use this midi number (ignore what's pressed)\n    velocity: 47,                       // zone - instrument only: always use this velocity (ignore what's pressed)\n    initialAttenuation: 48,             // zone - allows turning down the volume, 10 = -1dB\n    reserved2: 49,\n    endloopAddrsCoarseOffset: 50,       // sample control - moves sample loop end point in 32768 increments\n    coarseTune: 51,                     // tune - pitch offset in semitones\n    fineTune: 52,                       // tune - pitch offset in cents\n    sampleID: 53,                       // sample - instrument zone only: which sample to use\n    sampleModes: 54,                    // sample - 0 = no loop, 1 = loop, 2 = reserved, 3 = loop and play till end in release phase\n    reserved3: 55,\n    scaleTuning: 56,                    // sample - the degree to which MIDI key number influences pitch, 100 = default\n    exclusiveClass: 57,                 // sample - = cut = choke group\n    overridingRootKey: 58,              // sample - can override the sample's original pitch\n    unused5: 59,\n    endOper: 60                         // end marker\n};\n/**\n * @type {{min: number, max: number, def: number}[]}\n */\nexport const generatorLimits = [];\n// offsets\ngeneratorLimits[generatorTypes.startAddrsOffset] = { min: 0, max: 32768, def: 0 };\ngeneratorLimits[generatorTypes.endAddrOffset] = { min: -32768, max: 32768, def: 0 };\ngeneratorLimits[generatorTypes.startloopAddrsOffset] = { min: -32768, max: 32768, def: 0 };\ngeneratorLimits[generatorTypes.endloopAddrsOffset] = { min: -32768, max: 32768, def: 0 };\ngeneratorLimits[generatorTypes.startAddrsCoarseOffset] = { min: 0, max: 32768, def: 0 };\n\n// pitch influence\ngeneratorLimits[generatorTypes.modLfoToPitch] = { min: -12000, max: 12000, def: 0 };\ngeneratorLimits[generatorTypes.vibLfoToPitch] = { min: -12000, max: 12000, def: 0 };\ngeneratorLimits[generatorTypes.modEnvToPitch] = { min: -12000, max: 12000, def: 0 };\n\n// lowpass\ngeneratorLimits[generatorTypes.initialFilterFc] = { min: 1500, max: 13500, def: 13500 };\ngeneratorLimits[generatorTypes.initialFilterQ] = { min: 0, max: 960, def: 0 };\ngeneratorLimits[generatorTypes.modLfoToFilterFc] = { min: -12000, max: 12000, def: 0 };\ngeneratorLimits[generatorTypes.modEnvToFilterFc] = { min: -12000, max: 12000, def: 0 };\n\ngeneratorLimits[generatorTypes.endAddrsCoarseOffset] = { min: -32768, max: 32768, def: 0 };\n\ngeneratorLimits[generatorTypes.modLfoToVolume] = { min: -960, max: 960, def: 0 };\n\n// effects, pan\ngeneratorLimits[generatorTypes.chorusEffectsSend] = { min: 0, max: 1000, def: 0 };\ngeneratorLimits[generatorTypes.reverbEffectsSend] = { min: 0, max: 1000, def: 0 };\ngeneratorLimits[generatorTypes.pan] = { min: -500, max: 500, def: 0 };\n\n// lfo\ngeneratorLimits[generatorTypes.delayModLFO] = { min: -12000, max: 5000, def: -12000 };\ngeneratorLimits[generatorTypes.freqModLFO] = { min: -16000, max: 4500, def: 0 };\ngeneratorLimits[generatorTypes.delayVibLFO] = { min: -12000, max: 5000, def: -12000 };\ngeneratorLimits[generatorTypes.freqVibLFO] = { min: -16000, max: 4500, def: 0 };\n\n// mod env\ngeneratorLimits[generatorTypes.delayModEnv] = { min: -32768, max: 5000, def: -32768 }; // -32768 indicates instant phase, this is done to prevent click at the start of filter modenv\ngeneratorLimits[generatorTypes.attackModEnv] = { min: -32768, max: 8000, def: -32768 };\ngeneratorLimits[generatorTypes.holdModEnv] = { min: -12000, max: 5000, def: -12000 };\ngeneratorLimits[generatorTypes.decayModEnv] = { min: -12000, max: 8000, def: -12000 };\ngeneratorLimits[generatorTypes.sustainModEnv] = { min: 0, max: 1000, def: 0 };\ngeneratorLimits[generatorTypes.releaseModEnv] = { min: -12000, max: 8000, def: -12000 };\n// keynum to mod env\ngeneratorLimits[generatorTypes.keyNumToModEnvHold] = { min: -1200, max: 1200, def: 0 };\ngeneratorLimits[generatorTypes.keyNumToModEnvDecay] = { min: -1200, max: 1200, def: 0 };\n\n// vol env\ngeneratorLimits[generatorTypes.delayVolEnv] = { min: -12000, max: 5000, def: -12000 };\ngeneratorLimits[generatorTypes.attackVolEnv] = { min: -12000, max: 8000, def: -12000 };\ngeneratorLimits[generatorTypes.holdVolEnv] = { min: -12000, max: 5000, def: -12000 };\ngeneratorLimits[generatorTypes.decayVolEnv] = { min: -12000, max: 8000, def: -12000 };\ngeneratorLimits[generatorTypes.sustainVolEnv] = { min: 0, max: 1440, def: 0 };\ngeneratorLimits[generatorTypes.releaseVolEnv] = { min: -7200, max: 8000, def: -12000 }; // prevent clicks\n// keynum to vol env\ngeneratorLimits[generatorTypes.keyNumToVolEnvHold] = { min: -1200, max: 1200, def: 0 };\ngeneratorLimits[generatorTypes.keyNumToVolEnvDecay] = { min: -1200, max: 1200, def: 0 };\n\ngeneratorLimits[generatorTypes.startloopAddrsCoarseOffset] = { min: -32768, max: 32768, def: 0 };\ngeneratorLimits[generatorTypes.keyNum] = { min: -1, max: 127, def: -1 };\ngeneratorLimits[generatorTypes.velocity] = { min: -1, max: 127, def: -1 };\n\ngeneratorLimits[generatorTypes.initialAttenuation] = { min: -250, max: 1440, def: 0 }; // soundblaster allows 10dB of gain (divide by 0.4)\n\ngeneratorLimits[generatorTypes.endloopAddrsCoarseOffset] = { min: -32768, max: 32768, def: 0 };\n\ngeneratorLimits[generatorTypes.coarseTune] = { min: -120, max: 120, def: 0 };\ngeneratorLimits[generatorTypes.fineTune] = { min: -12700, max: 12700, def: 0 }; // this generator is used as initial pitch, hence this range\ngeneratorLimits[generatorTypes.scaleTuning] = { min: 0, max: 1200, def: 100 };\ngeneratorLimits[generatorTypes.exclusiveClass] = { min: 0, max: 99999, def: 0 };\ngeneratorLimits[generatorTypes.overridingRootKey] = { min: 0 - 1, max: 127, def: -1 };\n\nexport class Generator\n{\n    /**\n     * The generator's enum number\n     * @type {generatorTypes|number}\n     */\n    generatorType = generatorTypes.INVALID;\n    /**\n     * The generator's 16-bit value\n     * @type {number}\n     */\n    generatorValue = 0;\n    \n    /**\n     * Constructs a new generator\n     * @param type {generatorTypes|number}\n     * @param value {number}\n     */\n    constructor(type = generatorTypes.INVALID, value = 0)\n    {\n        this.generatorType = type;\n        if (value === undefined)\n        {\n            throw new Error(\"No value provided.\");\n        }\n        const lim = generatorLimits[type];\n        this.generatorValue = Math.round(value);\n        if (lim !== undefined)\n        {\n            this.generatorValue = Math.max(lim.min, Math.min(lim.max, this.generatorValue));\n        }\n    }\n}\n\n/**\n * generator.js\n * purpose: contains enums for generators and their limis parses reads soundfont generators, sums them and applies limits\n */\n/**\n * @param generatorType {number}\n * @param presetGens {Generator[]}\n * @param instrumentGens {Generator[]}\n */\nexport function addAndClampGenerator(generatorType, presetGens, instrumentGens)\n{\n    const limits = generatorLimits[generatorType] || { min: 0, max: 32768, def: 0 };\n    let presetGen = presetGens.find(g => g.generatorType === generatorType);\n    let presetValue = 0;\n    if (presetGen)\n    {\n        presetValue = presetGen.generatorValue;\n    }\n    \n    let instruGen = instrumentGens.find(g => g.generatorType === generatorType);\n    let instruValue = limits.def;\n    if (instruGen)\n    {\n        instruValue = instruGen.generatorValue;\n    }\n    \n    let value = instruValue + presetValue;\n    \n    // special case, intial attenuation.\n    // Shall get clamped in the volume envelope,\n    // so the modulators can be affected by negative generators (the \"Brass\" patch was problematic...)\n    if (generatorType === generatorTypes.initialAttenuation)\n    {\n        return value;\n    }\n    \n    return Math.max(limits.min, Math.min(limits.max, value));\n}", "import { writeDword, writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { RiffChunk, writeRIFFChunk } from \"../riff_chunk.js\";\n\nimport { generatorTypes } from \"../generator.js\";\n\n/**\n * @this {BasicSoundFont}\n * @returns {IndexedByteArray}\n */\nexport function getIGEN()\n{\n    // go through all instruments -> zones and write generators sequentially (add 4 for terminal)\n    let igensize = 4;\n    for (const inst of this.instruments)\n    {\n        igensize += inst.instrumentZones.reduce((sum, z) =>\n        {\n            // clear sample and range generators before derermining the size\n            z.generators = z.generators.filter(g =>\n                g.generatorType !== generatorTypes.sampleID &&\n                g.generatorType !== generatorTypes.keyRange &&\n                g.generatorType !== generatorTypes.velRange\n            );\n            // add sample and ranges if needed\n            // unshift vel then key ( to make key first)     and instrument is last\n            if (z.velRange.max !== 127 || z.velRange.min !== 0)\n            {\n                z.generators.unshift({\n                    generatorType: generatorTypes.velRange,\n                    generatorValue: z.velRange.max << 8 | z.velRange.min\n                });\n            }\n            if (z.keyRange.max !== 127 || z.keyRange.min !== 0)\n            {\n                z.generators.unshift({\n                    generatorType: generatorTypes.keyRange,\n                    generatorValue: z.keyRange.max << 8 | z.keyRange.min\n                });\n            }\n            if (!z.isGlobal)\n            {\n                // write sample\n                z.generators.push({\n                    generatorType: generatorTypes.sampleID,\n                    generatorValue: this.samples.indexOf(z.sample)\n                });\n            }\n            return z.generators.length * 4 + sum;\n        }, 0);\n    }\n    const igendata = new IndexedByteArray(igensize);\n    let igenIndex = 0;\n    for (const instrument of this.instruments)\n    {\n        for (const instrumentZone of instrument.instrumentZones)\n        {\n            // set the start index here\n            instrumentZone.generatorZoneStartIndex = igenIndex;\n            for (const gen of instrumentZone.generators)\n            {\n                // name is deceptive, it works on negatives\n                writeWord(igendata, gen.generatorType);\n                writeWord(igendata, gen.generatorValue);\n                igenIndex++;\n            }\n        }\n    }\n    // terminal generator, is zero\n    writeDword(igendata, 0);\n    \n    return writeRIFFChunk(new RiffChunk(\n        \"igen\",\n        igendata.length,\n        igendata\n    ));\n}", "import { RiffChunk, writeRIFFChunk } from \"../riff_chunk.js\";\nimport { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { SpessaSynthInfo } from \"../../../utils/loggin.js\";\nimport { consoleColors } from \"../../../utils/other.js\";\n\n/**\n * @this {BasicSoundFont}\n * @param smplStartOffsets {number[]}\n * @param smplEndOffsets {number[]}\n * @param compress {boolean}\n * @param quality {number}\n * @param vorbisFunc {EncodeVorbisFunction}\n * @returns {IndexedByteArray}\n */\nexport function getSDTA(smplStartOffsets, smplEndOffsets, compress, quality, vorbisFunc)\n{\n    // write smpl: write int16 data of each sample linearly\n    // get size (calling getAudioData twice doesn't matter since it gets cached)\n    const sampleDatas = this.samples.map((s, i) =>\n    {\n        if (compress)\n        {\n            s.compressSample(quality, vorbisFunc);\n        }\n        const r = s.getRawData();\n        SpessaSynthInfo(\n            `%cEncoded sample %c${i}. ${s.sampleName}%c of %c${this.samples.length}`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized\n        );\n        return r;\n    });\n    const smplSize = this.samples.reduce((total, s, i) =>\n    {\n        return total + sampleDatas[i].length + 46;\n    }, 0);\n    const smplData = new IndexedByteArray(smplSize);\n    // resample to int16 and write out\n    this.samples.forEach((sample, i) =>\n    {\n        const data = sampleDatas[i];\n        let startOffset;\n        let endOffset;\n        let jump = data.length;\n        if (sample.isCompressed)\n        {\n            // sf3 offset is in bytes\n            startOffset = smplData.currentIndex;\n            endOffset = startOffset + data.length;\n        }\n        else\n        {\n            // sf2 in sample data points\n            startOffset = smplData.currentIndex / 2;\n            endOffset = startOffset + data.length / 2;\n            jump += 46;\n        }\n        smplStartOffsets.push(startOffset);\n        smplData.set(data, smplData.currentIndex);\n        smplData.currentIndex += jump;\n        smplEndOffsets.push(endOffset);\n    });\n    \n    const smplChunk = writeRIFFChunk(new RiffChunk(\n        \"smpl\",\n        smplData.length,\n        smplData\n    ), new IndexedByteArray([115, 100, 116, 97])); // `sdta`\n    \n    return writeRIFFChunk(new RiffChunk(\n        \"LIST\",\n        smplChunk.length,\n        smplChunk\n    ));\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeStringAsBytes } from \"../../../utils/byte_functions/string.js\";\nimport { writeDword, writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { RiffChunk, writeRIFFChunk } from \"../riff_chunk.js\";\n\n/**\n * @this {BasicSoundFont}\n * @param smplStartOffsets {number[]}\n * @param smplEndOffsets {number[]}\n * @returns {IndexedByteArray}\n */\nexport function getSHDR(smplStartOffsets, smplEndOffsets)\n{\n    const sampleLength = 46;\n    const shdrData = new IndexedByteArray(sampleLength * (this.samples.length + 1)); // +1 because EOP\n    this.samples.forEach((sample, index) =>\n    {\n        // sample name\n        writeStringAsBytes(shdrData, sample.sampleName, 20);\n        // start offset\n        const dwStart = smplStartOffsets[index];\n        writeDword(shdrData, dwStart);\n        // end offset\n        const dwEnd = smplEndOffsets[index];\n        writeDword(shdrData, dwEnd);\n        // loop is stored as relative in sample points, change it to absolute sample points here\n        let loopStart = sample.sampleLoopStartIndex + dwStart;\n        let loopEnd = sample.sampleLoopEndIndex + dwStart;\n        if (sample.isCompressed)\n        {\n            // https://github.com/FluidSynth/fluidsynth/wiki/SoundFont3Format\n            loopStart -= dwStart;\n            loopEnd -= dwStart;\n        }\n        writeDword(shdrData, loopStart);\n        writeDword(shdrData, loopEnd);\n        // sample rate\n        writeDword(shdrData, sample.sampleRate);\n        // pitch and correction\n        shdrData[shdrData.currentIndex++] = sample.samplePitch;\n        shdrData[shdrData.currentIndex++] = sample.samplePitchCorrection;\n        // sample link\n        writeWord(shdrData, sample.sampleLink);\n        // sample type: write raw because we simply copy compressed samples\n        writeWord(shdrData, sample.sampleType);\n    });\n    \n    // write EOS and zero everything else\n    writeStringAsBytes(shdrData, \"EOS\", sampleLength);\n    return writeRIFFChunk(new RiffChunk(\n        \"shdr\",\n        shdrData.length,\n        shdrData\n    ));\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeLittleEndian, writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { RiffChunk, writeRIFFChunk } from \"../riff_chunk.js\";\n\n/**\n * @this {BasicSoundFont}\n * @returns {IndexedByteArray}\n */\nexport function getIMOD()\n{\n    // very similar to igen\n    // go through all instruments ->  zones and write modulators sequentially\n    let imodsize = 10;\n    for (const inst of this.instruments)\n    {\n        imodsize += inst.instrumentZones.reduce((sum, z) => z.modulators.length * 10 + sum, 0);\n    }\n    const imoddata = new IndexedByteArray(imodsize);\n    let imodIndex = 0;\n    for (const inst of this.instruments)\n    {\n        for (const ibag of inst.instrumentZones)\n        {\n            // set the start index here\n            ibag.modulatorZoneStartIndex = imodIndex;\n            for (const mod of ibag.modulators)\n            {\n                writeWord(imoddata, mod.sourceEnum);\n                writeWord(imoddata, mod.modulatorDestination);\n                writeWord(imoddata, mod.transformAmount);\n                writeWord(imoddata, mod.secondarySourceEnum);\n                writeWord(imoddata, mod.transformType);\n                imodIndex++;\n            }\n        }\n    }\n    \n    // terminal modulator, is zero\n    writeLittleEndian(imoddata, 0, 10);\n    \n    return writeRIFFChunk(new RiffChunk(\n        \"imod\",\n        imoddata.length,\n        imoddata\n    ));\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { RiffChunk, writeRIFFChunk } from \"../riff_chunk.js\";\n\n/**\n * @this {BasicSoundFont}\n * @returns {IndexedByteArray}\n */\nexport function getIBAG()\n{\n    // write all ibags with their start indexes as they were changed in getIGEN() and getIMOD()\n    const ibagsize = this.instruments.reduce((sum, i) => i.instrumentZones.length * 4 + sum, 4);\n    const ibagdata = new IndexedByteArray(ibagsize);\n    let zoneID = 0;\n    let generatorIndex = 0;\n    let modulatorIndex = 0;\n    for (const inst of this.instruments)\n    {\n        inst.instrumentZoneIndex = zoneID;\n        for (const ibag of inst.instrumentZones)\n        {\n            ibag.zoneID = zoneID;\n            writeWord(ibagdata, generatorIndex);\n            writeWord(ibagdata, modulatorIndex);\n            generatorIndex += ibag.generators.length;\n            modulatorIndex += ibag.modulators.length;\n            zoneID++;\n        }\n    }\n    // write the terminal IBAG\n    writeWord(ibagdata, generatorIndex);\n    writeWord(ibagdata, modulatorIndex);\n    \n    return writeRIFFChunk(new RiffChunk(\n        \"ibag\",\n        ibagdata.length,\n        ibagdata\n    ));\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeStringAsBytes } from \"../../../utils/byte_functions/string.js\";\nimport { writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { RiffChunk, writeRIFFChunk } from \"../riff_chunk.js\";\n\n/**\n * @this {BasicSoundFont}\n * @returns {IndexedByteArray}\n */\nexport function getINST()\n{\n    const instsize = this.instruments.length * 22 + 22;\n    const instdata = new IndexedByteArray(instsize);\n    // the instrument start index is adjusted in ibag, simply write it here\n    let instrumentStart = 0;\n    let instrumentID = 0;\n    for (const inst of this.instruments)\n    {\n        writeStringAsBytes(instdata, inst.instrumentName, 20);\n        writeWord(instdata, instrumentStart);\n        instrumentStart += inst.instrumentZones.length;\n        inst.instrumentID = instrumentID;\n        instrumentID++;\n    }\n    // write EOI\n    writeStringAsBytes(instdata, \"EOI\", 20);\n    writeWord(instdata, instrumentStart);\n    \n    return writeRIFFChunk(new RiffChunk(\n        \"inst\",\n        instdata.length,\n        instdata\n    ));\n}", "import { writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { RiffChunk, writeRIFFChunk } from \"../riff_chunk.js\";\n\nimport { generatorTypes } from \"../generator.js\";\n\n/**\n * @this {BasicSoundFont}\n * @returns {IndexedByteArray}\n */\nexport function getPGEN()\n{\n    // almost identical to igen, except correct instrument instead of sample gen\n    // go through all preset zones and write generators sequentially (add 4 for terminal)\n    let pgensize = 4;\n    for (const preset of this.presets)\n    {\n        pgensize += preset.presetZones.reduce((size, z) =>\n        {\n            // clear instrument and range generators before derermining the size\n            z.generators = z.generators.filter(g =>\n                g.generatorType !== generatorTypes.instrument &&\n                g.generatorType !== generatorTypes.keyRange &&\n                g.generatorType !== generatorTypes.velRange\n            );\n            // unshift vel then key and instrument is last\n            if (z.velRange.max !== 127 || z.velRange.min !== 0)\n            {\n                z.generators.unshift({\n                    generatorType: generatorTypes.velRange,\n                    generatorValue: z.velRange.max << 8 | z.velRange.min\n                });\n            }\n            if (z.keyRange.max !== 127 || z.keyRange.min !== 0)\n            {\n                z.generators.unshift({\n                    generatorType: generatorTypes.keyRange,\n                    generatorValue: z.keyRange.max << 8 | z.keyRange.min\n                });\n            }\n            if (!z.isGlobal)\n            {\n                // write instrument\n                z.generators.push({\n                    generatorType: generatorTypes.instrument,\n                    generatorValue: this.instruments.indexOf(z.instrument)\n                });\n            }\n            return z.generators.length * 4 + size;\n        }, 0);\n    }\n    const pgendata = new IndexedByteArray(pgensize);\n    let pgenIndex = 0;\n    for (const preset of this.presets)\n    {\n        for (const presetZone of preset.presetZones)\n        {\n            // set the start index here\n            presetZone.generatorZoneStartIndex = pgenIndex;\n            // write generators\n            for (const gen of presetZone.generators)\n            {\n                // name is deceptive, it works on negatives\n                writeWord(pgendata, gen.generatorType);\n                writeWord(pgendata, gen.generatorValue);\n            }\n            pgenIndex += presetZone.generators.length;\n        }\n    }\n    // terminal generator, is zero\n    writeWord(pgendata, 0);\n    writeWord(pgendata, 0);\n    \n    return writeRIFFChunk(new RiffChunk(\n        \"pgen\",\n        pgendata.length,\n        pgendata\n    ));\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeLittleEndian, writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { RiffChunk, writeRIFFChunk } from \"../riff_chunk.js\";\n\n/**\n * @this {BasicSoundFont}\n * @returns {IndexedByteArray}\n */\nexport function getPMOD()\n{\n    // very similar to imod\n    // go through all presets -> zones and write modulators sequentially\n    let pmodsize = 10;\n    for (const preset of this.presets)\n    {\n        pmodsize += preset.presetZones.reduce((sum, z) => z.modulators.length * 10 + sum, 0);\n    }\n    const pmoddata = new IndexedByteArray(pmodsize);\n    let pmodIndex = 0;\n    for (const preset of this.presets)\n    {\n        for (const pbag of preset.presetZones)\n        {\n            // set the start index here\n            pbag.modulatorZoneStartIndex = pmodIndex;\n            for (const mod of pbag.modulators)\n            {\n                writeWord(pmoddata, mod.sourceEnum);\n                writeWord(pmoddata, mod.modulatorDestination);\n                writeWord(pmoddata, mod.transformAmount);\n                writeWord(pmoddata, mod.secondarySourceEnum);\n                writeWord(pmoddata, mod.transformType);\n                pmodIndex++;\n            }\n        }\n    }\n    \n    // terminal modulator, is zero\n    writeLittleEndian(pmoddata, 0, 10);\n    \n    return writeRIFFChunk(new RiffChunk(\n        \"pmod\",\n        pmoddata.length,\n        pmoddata\n    ));\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { RiffChunk, writeRIFFChunk } from \"../riff_chunk.js\";\n\n/**\n * @this {BasicSoundFont}\n * @returns {IndexedByteArray}\n */\nexport function getPBAG()\n{\n    // write all pbags with their start indexes as they were changed in getPGEN() and getPMOD()\n    const pbagsize = this.presets.reduce((sum, i) => i.presetZones.length * 4 + sum, 4);\n    const pbagdata = new IndexedByteArray(pbagsize);\n    let zoneID = 0;\n    let generatorIndex = 0;\n    let modulatorIndex = 0;\n    for (const preset of this.presets)\n    {\n        preset.presetZoneStartIndex = zoneID;\n        for (const pbag of preset.presetZones)\n        {\n            pbag.zoneID = zoneID;\n            writeWord(pbagdata, generatorIndex);\n            writeWord(pbagdata, modulatorIndex);\n            generatorIndex += pbag.generators.length;\n            modulatorIndex += pbag.modulators.length;\n            zoneID++;\n        }\n    }\n    // write the terminal PBAG\n    writeWord(pbagdata, generatorIndex);\n    writeWord(pbagdata, modulatorIndex);\n    \n    return writeRIFFChunk(new RiffChunk(\n        \"pbag\",\n        pbagdata.length,\n        pbagdata\n    ));\n}", "import { IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { writeStringAsBytes } from \"../../../utils/byte_functions/string.js\";\nimport { writeDword, writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { RiffChunk, writeRIFFChunk } from \"../riff_chunk.js\";\n\n/**\n * @this {BasicSoundFont}\n * @returns {IndexedByteArray}\n */\nexport function getPHDR()\n{\n    const phdrsize = this.presets.length * 38 + 38;\n    const phdrdata = new IndexedByteArray(phdrsize);\n    // the preset start is adjusted in pbag, this is only for the terminal preset index\n    let presetStart = 0;\n    for (const preset of this.presets)\n    {\n        writeStringAsBytes(phdrdata, preset.presetName, 20);\n        writeWord(phdrdata, preset.program);\n        writeWord(phdrdata, preset.bank);\n        writeWord(phdrdata, presetStart);\n        // 3 unused dwords, spec says to keep em so we do\n        writeDword(phdrdata, preset.library);\n        writeDword(phdrdata, preset.genre);\n        writeDword(phdrdata, preset.morphology);\n        presetStart += preset.presetZones.length;\n    }\n    // write EOP\n    writeStringAsBytes(phdrdata, \"EOP\", 20);\n    writeWord(phdrdata, 0); // program\n    writeWord(phdrdata, 0); // bank\n    writeWord(phdrdata, presetStart);\n    writeDword(phdrdata, 0); // library\n    writeDword(phdrdata, 0); // genre\n    writeDword(phdrdata, 0); // morphology\n    \n    return writeRIFFChunk(new RiffChunk(\n        \"phdr\",\n        phdrdata.length,\n        phdrdata\n    ));\n}", "import { combineArrays, IndexedByteArray } from \"../../../utils/indexed_array.js\";\nimport { RiffChunk, writeRIFFChunk } from \"../riff_chunk.js\";\nimport { writeStringAsBytes } from \"../../../utils/byte_functions/string.js\";\nimport { consoleColors } from \"../../../utils/other.js\";\nimport { getIGEN } from \"./igen.js\";\nimport { getSDTA } from \"./sdta.js\";\nimport { getSHDR } from \"./shdr.js\";\nimport { getIMOD } from \"./imod.js\";\nimport { getIBAG } from \"./ibag.js\";\nimport { getINST } from \"./inst.js\";\nimport { getPGEN } from \"./pgen.js\";\nimport { getPMOD } from \"./pmod.js\";\nimport { getPBAG } from \"./pbag.js\";\nimport { getPHDR } from \"./phdr.js\";\nimport { writeWord } from \"../../../utils/byte_functions/little_endian.js\";\nimport { SpessaSynthGroupCollapsed, SpessaSynthGroupEnd, SpessaSynthInfo } from \"../../../utils/loggin.js\";\n/**\n * @typedef {Object} SoundFont2WriteOptions\n * @property {boolean} compress - if the soundfont should be compressed with the ogg vorbis codec\n * @property {number} compressionQuality - the vorbis compression quality, from -0.1 to 1\n * @property {EncodeVorbisFunction|undefined} compressionFunction - the encode vorbis function. Can be undefined if not compressing.\n */\n\n/**\n * @type {SoundFont2WriteOptions}\n */\nconst DEFAULT_WRITE_OPTIONS = {\n    compress: false,\n    compressionQuality: 0.5,\n    compressionFunction: undefined\n};\n\n/**\n * Write the soundfont as an .sf2 file. This method is DESTRUCTIVE\n * @this {BasicSoundFont}\n * @param {SoundFont2WriteOptions} options\n * @returns {Uint8Array}\n */\nexport function write(options = DEFAULT_WRITE_OPTIONS)\n{\n    if (options.compress)\n    {\n        if (typeof options.compressionFunction !== \"function\")\n        {\n            throw new TypeError(\"No compression function supplied but compression enabled.\");\n        }\n    }\n    SpessaSynthGroupCollapsed(\n        \"%cSaving soundfont...\",\n        consoleColors.info\n    );\n    SpessaSynthInfo(\n        `%cCompression: %c${options?.compress || \"false\"}%c quality: %c${options?.compressionQuality || \"none\"}`,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info,\n        consoleColors.recognized\n    );\n    SpessaSynthInfo(\n        \"%cWriting INFO...\",\n        consoleColors.info\n    );\n    /**\n     * Write INFO\n     * @type {IndexedByteArray[]}\n     */\n    const infoArrays = [];\n    this.soundFontInfo[\"ISFT\"] = \"SpessaSynth\"; // ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\n    if (options?.compress)\n    {\n        this.soundFontInfo[\"ifil\"] = \"3.0\"; // set version to 3\n    }\n    \n    for (const [type, data] of Object.entries(this.soundFontInfo))\n    {\n        if (type === \"ifil\" || type === \"iver\")\n        {\n            const major = parseInt(data.split(\".\")[0]);\n            const minor = parseInt(data.split(\".\")[1]);\n            const ckdata = new IndexedByteArray(4);\n            writeWord(ckdata, major);\n            writeWord(ckdata, minor);\n            infoArrays.push(writeRIFFChunk(new RiffChunk(\n                type,\n                4,\n                ckdata\n            )));\n        }\n        else if (type === \"DMOD\")\n        {\n            infoArrays.push(writeRIFFChunk(new RiffChunk(\n                type,\n                data.length,\n                data\n            )));\n        }\n        else\n        {\n            const arr = new IndexedByteArray(data.length);\n            writeStringAsBytes(arr, data);\n            infoArrays.push(writeRIFFChunk(new RiffChunk(\n                type,\n                data.length,\n                arr\n            )));\n        }\n    }\n    const combined = combineArrays([\n        new IndexedByteArray([73, 78, 70, 79]), // INFO\n        ...infoArrays\n    ]);\n    const infoChunk = writeRIFFChunk(new RiffChunk(\"LIST\", combined.length, combined));\n    \n    SpessaSynthInfo(\n        \"%cWriting SDTA...\",\n        consoleColors.info\n    );\n    // write sdata\n    const smplStartOffsets = [];\n    const smplEndOffsets = [];\n    const sdtaChunk = getSDTA.call(\n        this,\n        smplStartOffsets,\n        smplEndOffsets,\n        options?.compress,\n        options?.compressionQuality || 0.5,\n        options.compressionFunction\n    );\n    \n    SpessaSynthInfo(\n        \"%cWriting PDTA...\",\n        consoleColors.info\n    );\n    // write pdata\n    // go in reverse so the indexes are correct\n    // instruments\n    SpessaSynthInfo(\n        \"%cWriting SHDR...\",\n        consoleColors.info\n    );\n    const shdrChunk = getSHDR.call(this, smplStartOffsets, smplEndOffsets);\n    SpessaSynthInfo(\n        \"%cWriting IGEN...\",\n        consoleColors.info\n    );\n    const igenChunk = getIGEN.call(this);\n    SpessaSynthInfo(\n        \"%cWriting IMOD...\",\n        consoleColors.info\n    );\n    const imodChunk = getIMOD.call(this);\n    SpessaSynthInfo(\n        \"%cWriting IBAG...\",\n        consoleColors.info\n    );\n    const ibagChunk = getIBAG.call(this);\n    SpessaSynthInfo(\n        \"%cWriting INST...\",\n        consoleColors.info\n    );\n    const instChunk = getINST.call(this);\n    // presets\n    const pgenChunk = getPGEN.call(this);\n    SpessaSynthInfo(\n        \"%cWriting PMOD...\",\n        consoleColors.info\n    );\n    const pmodChunk = getPMOD.call(this);\n    SpessaSynthInfo(\n        \"%cWriting PBAG...\",\n        consoleColors.info\n    );\n    const pbagChunk = getPBAG.call(this);\n    SpessaSynthInfo(\n        \"%cWriting PHDR...\",\n        consoleColors.info\n    );\n    const phdrChunk = getPHDR.call(this);\n    // combine in the sfspec order\n    const pdtadata = combineArrays([\n        new IndexedByteArray([112, 100, 116, 97]), // \"ptda\"\n        phdrChunk,\n        pbagChunk,\n        pmodChunk,\n        pgenChunk,\n        instChunk,\n        ibagChunk,\n        imodChunk,\n        igenChunk,\n        shdrChunk\n    ]);\n    const pdtaChunk = writeRIFFChunk(new RiffChunk(\n        \"LIST\",\n        pdtadata.length,\n        pdtadata\n    ));\n    SpessaSynthInfo(\n        \"%cWriting the output file...\",\n        consoleColors.info\n    );\n    // finally, combine everything\n    const riffdata = combineArrays([\n        new IndexedByteArray([115, 102, 98, 107]), // \"sfbk\"\n        infoChunk,\n        sdtaChunk,\n        pdtaChunk\n    ]);\n    \n    const main = writeRIFFChunk(new RiffChunk(\n        \"RIFF\",\n        riffdata.length,\n        riffdata\n    ));\n    SpessaSynthInfo(\n        `%cSaved succesfully! Final file size: %c${main.length}`,\n        consoleColors.info,\n        consoleColors.recognized\n    );\n    SpessaSynthGroupEnd();\n    return main;\n}", "import { IndexedByteArray } from \"../utils/indexed_array.js\";\n\n/**\n * midi_message.js\n * purpose: contains enums for midi events and controllers and functions to parse them\n */\n\nexport class MidiMessage\n{\n    /**\n     * @param ticks {number}\n     * @param byte {number} the message status byte\n     * @param data {IndexedByteArray}\n     */\n    constructor(ticks, byte, data)\n    {\n        // absolute ticks from the start\n        this.ticks = ticks;\n        // message status byte (for meta it's the second byte)\n        this.messageStatusByte = byte;\n        /**\n         * @type {IndexedByteArray}\n         */\n        this.messageData = data;\n    }\n}\n\n/**\n * Gets the status byte's channel\n * @param statusByte\n * @returns {number} channel is -1 for system messages -2 for meta and -3 for sysex\n */\nexport function getChannel(statusByte)\n{\n    const eventType = statusByte & 0xF0;\n    const channel = statusByte & 0x0F;\n    \n    let resultChannel = channel;\n    \n    switch (eventType)\n    {\n        // midi (and meta and sysex headers)\n        case 0x80:\n        case 0x90:\n        case 0xA0:\n        case 0xB0:\n        case 0xC0:\n        case 0xD0:\n        case 0xE0:\n            break;\n        \n        case 0xF0:\n            switch (channel)\n            {\n                case 0x0:\n                    resultChannel = -3;\n                    break;\n                \n                case 0x1:\n                case 0x2:\n                case 0x3:\n                case 0x4:\n                case 0x5:\n                case 0x6:\n                case 0x7:\n                case 0x8:\n                case 0x9:\n                case 0xA:\n                case 0xB:\n                case 0xC:\n                case 0xD:\n                case 0xE:\n                    resultChannel = -1;\n                    break;\n                \n                case 0xF:\n                    resultChannel = -2;\n                    break;\n            }\n            break;\n        \n        default:\n            resultChannel = -1;\n    }\n    \n    return resultChannel;\n}\n\n// all the midi statuses dictionary\nexport const messageTypes = {\n    noteOff: 0x80,\n    noteOn: 0x90,\n    polyPressure: 0xA0,\n    controllerChange: 0xB0,\n    programChange: 0xC0,\n    channelPressure: 0xD0,\n    pitchBend: 0xE0,\n    systemExclusive: 0xF0,\n    timecode: 0xF1,\n    songPosition: 0xF2,\n    songSelect: 0xF3,\n    tuneRequest: 0xF6,\n    clock: 0xF8,\n    start: 0xFA,\n    continue: 0xFB,\n    stop: 0xFC,\n    activeSensing: 0xFE,\n    reset: 0xFF,\n    sequenceNumber: 0x00,\n    text: 0x01,\n    copyright: 0x02,\n    trackName: 0x03,\n    instrumentName: 0x04,\n    lyric: 0x05,\n    marker: 0x06,\n    cuePoint: 0x07,\n    programName: 0x08,\n    midiChannelPrefix: 0x20,\n    midiPort: 0x21,\n    endOfTrack: 0x2F,\n    setTempo: 0x51,\n    smpteOffset: 0x54,\n    timeSignature: 0x58,\n    keySignature: 0x59,\n    sequenceSpecific: 0x7F\n};\n\n\n/**\n * Gets the event's status and channel from the status byte\n * @param statusByte {number} the status byte\n * @returns {{channel: number, status: number}} channel will be -1 for sysex and meta\n */\nexport function getEvent(statusByte)\n{\n    const status = statusByte & 0xF0;\n    const channel = statusByte & 0x0F;\n    \n    let eventChannel = -1;\n    let eventStatus = statusByte;\n    \n    if (status >= 0x80 && status <= 0xE0)\n    {\n        eventChannel = channel;\n        eventStatus = status;\n    }\n    \n    return {\n        status: eventStatus,\n        channel: eventChannel\n    };\n}\n\n\n/**\n * @enum {number}\n */\nexport const midiControllers = {\n    bankSelect: 0,\n    modulationWheel: 1,\n    breathController: 2,\n    footController: 4,\n    portamentoTime: 5,\n    dataEntryMsb: 6,\n    mainVolume: 7,\n    balance: 8,\n    pan: 10,\n    expressionController: 11,\n    effectControl1: 12,\n    effectControl2: 13,\n    generalPurposeController1: 16,\n    generalPurposeController2: 17,\n    generalPurposeController3: 18,\n    generalPurposeController4: 19,\n    lsbForControl0BankSelect: 32,\n    lsbForControl1ModulationWheel: 33,\n    lsbForControl2BreathController: 34,\n    lsbForControl4FootController: 36,\n    lsbForControl5PortamentoTime: 37,\n    lsbForControl6DataEntry: 38,\n    lsbForControl7MainVolume: 39,\n    lsbForControl8Balance: 40,\n    lsbForControl10Pan: 42,\n    lsbForControl11ExpressionController: 43,\n    lsbForControl12EffectControl1: 44,\n    lsbForControl13EffectControl2: 45,\n    sustainPedal: 64,\n    portamentoOnOff: 65,\n    sostenutoPedal: 66,\n    softPedal: 67,\n    legatoFootswitch: 68,\n    hold2Pedal: 69,\n    soundVariation: 70,\n    timbreHarmonicContent: 71,\n    releaseTime: 72,\n    attackTime: 73,\n    brightness: 74,\n    soundController6: 75,\n    soundController7: 76,\n    soundController8: 77,\n    soundController9: 78,\n    soundController10: 79,\n    generalPurposeController5: 80,\n    generalPurposeController6: 81,\n    generalPurposeController7: 82,\n    generalPurposeController8: 83,\n    portamentoControl: 84,\n    reverbDepth: 91,\n    tremoloDepth: 92,\n    chorusDepth: 93,\n    detuneDepth: 94,\n    phaserDepth: 95,\n    dataIncrement: 96,\n    dataDecrement: 97,\n    NRPNLsb: 98,\n    NRPNMsb: 99,\n    RPNLsb: 100,\n    RPNMsb: 101,\n    allSoundOff: 120,\n    resetAllControllers: 121,\n    localControlOnOff: 122,\n    allNotesOff: 123,\n    omniModeOff: 124,\n    omniModeOn: 125,\n    monoModeOn: 126,\n    polyModeOn: 127\n};\n\n\n/**\n * @type {{\"11\": number, \"12\": number, \"13\": number, \"14\": number, \"8\": number, \"9\": number, \"10\": number}}\n */\nexport const dataBytesAmount = {\n    0x8: 2, // note off\n    0x9: 2, // note on\n    0xA: 2, // note at\n    0xB: 2, // cc change\n    0xC: 1, // pg change\n    0xD: 1, // channel aftertouch\n    0xE: 2  // pitch wheel\n};", "import { generatorTypes } from \"./generator.js\";\nimport { midiControllers } from \"../../midi_parser/midi_message.js\";\n\n/**\n * modulators.js\n * purpose: parses soundfont modulators and the source enums, also includes the default modulators list\n **/\n\nexport const modulatorSources = {\n    noController: 0,\n    noteOnVelocity: 2,\n    noteOnKeyNum: 3,\n    polyPressure: 10,\n    channelPressure: 13,\n    pitchWheel: 14,\n    pitchWheelRange: 16,\n    link: 127\n    \n};\nexport const modulatorCurveTypes = {\n    linear: 0,\n    concave: 1,\n    convex: 2,\n    switch: 3\n};\n\nexport class Modulator\n{\n    /**\n     * The current computed value of this modulator\n     * @type {number}\n     */\n    currentValue = 0;\n    \n    /**\n     * Creates a modulator\n     * @param params {{srcEnum: number, secSrcEnum: number, dest: generatorTypes, amt: number, transform: number}}\n     */\n    constructor(params)\n    {\n        this.sourceEnum = params.srcEnum;\n        /**\n         * @type {generatorTypes}\n         */\n        this.modulatorDestination = params.dest;\n        this.secondarySourceEnum = params.secSrcEnum;\n        this.transformAmount = params.amt;\n        this.transformType = params.transform;\n        \n        \n        if (this.modulatorDestination > 58)\n        {\n            this.modulatorDestination = generatorTypes.INVALID; // flag as invalid (for linked ones)\n        }\n        \n        // decode the source\n        this.sourcePolarity = this.sourceEnum >> 9 & 1;\n        this.sourceDirection = this.sourceEnum >> 8 & 1;\n        this.sourceUsesCC = this.sourceEnum >> 7 & 1;\n        this.sourceIndex = this.sourceEnum & 127;\n        this.sourceCurveType = this.sourceEnum >> 10 & 3;\n        \n        // decode the secondary source\n        this.secSrcPolarity = this.secondarySourceEnum >> 9 & 1;\n        this.secSrcDirection = this.secondarySourceEnum >> 8 & 1;\n        this.secSrcUsesCC = this.secondarySourceEnum >> 7 & 1;\n        this.secSrcIndex = this.secondarySourceEnum & 127;\n        this.secSrcCurveType = this.secondarySourceEnum >> 10 & 3;\n        \n        /**\n         * Indicates if the given modulator is chorus or reverb effects modulator.\n         * This is done to simulate BASSMIDI effects behavior:\n         * - defaults to 1000 transform amount rather than 200\n         * - values can be changed, but anything above 200 is 1000\n         * (except for values above 1000, they are copied directly)\n         * - all values below are multiplied by 5 (200 * 5 = 1000)\n         * - still can be disabled if the soundfont has its own modulator curve\n         * - this fixes the very low amount of reverb by default and doesn't break soundfonts\n         * @type {boolean}\n         */\n        this.isEffectModulator =\n            (\n                this.sourceEnum === 0x00DB\n                || this.sourceEnum === 0x00DD\n            )\n            && this.secondarySourceEnum === 0x0\n            && (\n                this.modulatorDestination === generatorTypes.reverbEffectsSend\n                || this.modulatorDestination === generatorTypes.chorusEffectsSend\n            );\n    }\n    \n    /**\n     * @param modulator {Modulator}\n     * @returns {Modulator}\n     */\n    static copy(modulator)\n    {\n        return new Modulator({\n            srcEnum: modulator.sourceEnum,\n            secSrcEnum: modulator.secondarySourceEnum,\n            transform: modulator.transformType,\n            amt: modulator.transformAmount,\n            dest: modulator.modulatorDestination\n        });\n    }\n    \n    /**\n     * @param mod1 {Modulator}\n     * @param mod2 {Modulator}\n     * @returns {boolean}\n     */\n    static isIdentical(mod1, mod2)\n    {\n        return (mod1.sourceEnum === mod2.sourceEnum)\n            && (mod1.modulatorDestination === mod2.modulatorDestination)\n            && (mod1.secondarySourceEnum === mod2.secondarySourceEnum)\n            && (mod1.transformType === mod2.transformType);\n    }\n    \n    /**\n     * Sums transform and creates a NEW modulator\n     * @param modulator {Modulator}\n     * @returns {Modulator}\n     */\n    sumTransform(modulator)\n    {\n        return new Modulator({\n            srcEnum: this.sourceEnum,\n            secSrcEnum: this.secondarySourceEnum,\n            dest: this.modulatorDestination,\n            transform: this.transformType,\n            amt: this.transformAmount + modulator.transformAmount\n        });\n    }\n    \n    /**\n     * @returns {string}\n     */\n    debugString()\n    {\n        function getKeyByValue(object, value)\n        {\n            return Object.keys(object).find(key => object[key] === value);\n        }\n        \n        let sourceString = getKeyByValue(modulatorCurveTypes, this.sourceCurveType);\n        sourceString += this.sourcePolarity === 0 ? \" unipolar \" : \" bipolar \";\n        sourceString += this.sourceDirection === 0 ? \"forwards \" : \"backwards \";\n        if (this.sourceUsesCC)\n        {\n            sourceString += getKeyByValue(midiControllers, this.sourceIndex);\n        }\n        else\n        {\n            sourceString += getKeyByValue(modulatorSources, this.sourceIndex);\n        }\n        \n        let secSrcString = getKeyByValue(modulatorCurveTypes, this.secSrcCurveType);\n        secSrcString += this.secSrcPolarity === 0 ? \" unipolar \" : \" bipolar \";\n        secSrcString += this.secSrcCurveType === 0 ? \"forwards \" : \"backwards \";\n        if (this.secSrcUsesCC)\n        {\n            secSrcString += getKeyByValue(midiControllers, this.secSrcIndex);\n        }\n        else\n        {\n            secSrcString += getKeyByValue(modulatorSources, this.secSrcIndex);\n        }\n        return `Modulator:\n        Source: ${sourceString}\n        Secondary source: ${secSrcString}\n        Destination: ${getKeyByValue(generatorTypes, this.modulatorDestination)}\n        Trasform amount: ${this.transformAmount}\n        Transform type: ${this.transformType}\n        \\n\\n`;\n    }\n}\n\nexport const DEFAULT_ATTENUATION_MOD_AMOUNT = 960;\nexport const DEFAULT_ATTENUATION_MOD_CURVE_TYPE = modulatorCurveTypes.concave;\n\nexport function getModSourceEnum(curveType, polarity, direction, isCC, index)\n{\n    return (curveType << 10) | (polarity << 9) | (direction << 8) | (isCC << 7) | index;\n}\n\nexport const defaultModulators = [\n    // vel to attenuation\n    new Modulator({\n        srcEnum: getModSourceEnum(\n            DEFAULT_ATTENUATION_MOD_CURVE_TYPE,\n            0,\n            1,\n            0,\n            modulatorSources.noteOnVelocity\n        ),\n        dest: generatorTypes.initialAttenuation,\n        amt: DEFAULT_ATTENUATION_MOD_AMOUNT,\n        secSrcEnum: 0x0,\n        transform: 0\n    }),\n    \n    // mod wheel to vibrato\n    new Modulator({ srcEnum: 0x0081, dest: generatorTypes.vibLfoToPitch, amt: 50, secSrcEnum: 0x0, transform: 0 }),\n    \n    // vol to attenuation\n    new Modulator({\n        srcEnum: getModSourceEnum(\n            DEFAULT_ATTENUATION_MOD_CURVE_TYPE,\n            0,\n            1,\n            1,\n            midiControllers.mainVolume\n        ),\n        dest: generatorTypes.initialAttenuation,\n        amt: DEFAULT_ATTENUATION_MOD_AMOUNT,\n        secSrcEnum: 0x0,\n        transform: 0\n    }),\n    \n    // channel pressure to vibrato\n    new Modulator({ srcEnum: 0x000D, dest: generatorTypes.vibLfoToPitch, amt: 50, secSrcEnum: 0x0, transform: 0 }),\n    \n    // pitch wheel to tuning\n    new Modulator({ srcEnum: 0x020E, dest: generatorTypes.fineTune, amt: 12700, secSrcEnum: 0x0010, transform: 0 }),\n    \n    // pan to uhh, pan\n    // amount is 500 instead of 1000, see #59\n    new Modulator({ srcEnum: 0x028A, dest: generatorTypes.pan, amt: 500, secSrcEnum: 0x0, transform: 0 }),\n    \n    // expression to attenuation\n    new Modulator({\n        srcEnum: getModSourceEnum(\n            DEFAULT_ATTENUATION_MOD_CURVE_TYPE,\n            0,\n            1,\n            1,\n            midiControllers.expressionController\n        ),\n        dest: generatorTypes.initialAttenuation,\n        amt: DEFAULT_ATTENUATION_MOD_AMOUNT,\n        secSrcEnum: 0x0,\n        transform: 0\n    }),\n    \n    // reverb effects to send\n    new Modulator({ srcEnum: 0x00DB, dest: generatorTypes.reverbEffectsSend, amt: 200, secSrcEnum: 0x0, transform: 0 }),\n    \n    // chorus effects to send\n    new Modulator({ srcEnum: 0x00DD, dest: generatorTypes.chorusEffectsSend, amt: 200, secSrcEnum: 0x0, transform: 0 }),\n    \n    // custom modulators heck yeah\n    // poly pressure to vibrato\n    new Modulator({\n        srcEnum: getModSourceEnum(modulatorCurveTypes.linear, 0, 0, 0, modulatorSources.polyPressure),\n        dest: generatorTypes.vibLfoToPitch,\n        amt: 50,\n        secSrcEnum: 0x0,\n        transform: 0\n    }),\n    \n    // cc 92 (tremolo) to modLFO volume\n    new Modulator({\n        srcEnum: getModSourceEnum(\n            modulatorCurveTypes.linear,\n            0,\n            0,\n            1,\n            midiControllers.tremoloDepth\n        ), /*linear forward unipolar cc 92 */\n        dest: generatorTypes.modLfoToVolume,\n        amt: 24,\n        secSrcEnum: 0x0, // no controller\n        transform: 0\n    }),\n    \n    // cc 72 (release time) to volEnv release\n    new Modulator({\n        srcEnum: getModSourceEnum(\n            modulatorCurveTypes.linear,\n            1,\n            0,\n            1,\n            midiControllers.releaseTime\n        ), // linear forward bipolar cc 72\n        dest: generatorTypes.releaseVolEnv,\n        amt: 1200,\n        secSrcEnum: 0x0, // no controller\n        transform: 0\n    }),\n    \n    // cc 74 (brightness) to filterFc\n    new Modulator({\n        srcEnum: getModSourceEnum(\n            modulatorCurveTypes.linear,\n            1,\n            0,\n            1,\n            midiControllers.brightness\n        ), // linear forwards bipolar cc 74\n        dest: generatorTypes.initialFilterFc,\n        amt: 6000,\n        secSrcEnum: 0x0, // no controller\n        transform: 0\n    }),\n    \n    // cc 71 (filter q) to filterq\n    new Modulator({\n        srcEnum: getModSourceEnum(\n            modulatorCurveTypes.linear,\n            1,\n            0,\n            1,\n            midiControllers.timbreHarmonicContent\n        ), // linear forwards bipolar cc 74\n        dest: generatorTypes.initialFilterQ,\n        amt: 250,\n        secSrcEnum: 0x0, // no controller\n        transform: 0\n    })\n];", "import { SpessaSynthWarn } from \"../../utils/loggin.js\";\nimport { consoleColors } from \"../../utils/other.js\";\nimport { write } from \"./write_sf2/write.js\";\nimport { defaultModulators, Modulator } from \"./modulator.js\";\n\nclass BasicSoundFont\n{\n    /**\n     * Creates a new basic soundfont template\n     * @param data {undefined|{presets: BasicPreset[], info: Object<string, string>}}\n     */\n    constructor(data = undefined)\n    {\n        /**\n         * Soundfont's info stored as name: value. ifil and iver are stored as string representation of float (e.g. 2.1)\n         * @type {Object<string, string|IndexedByteArray>}\n         */\n        this.soundFontInfo = {};\n        \n        /**\n         * The soundfont's presets\n         * @type {BasicPreset[]}\n         */\n        this.presets = [];\n        \n        /**\n         * The soundfont's samples\n         * @type {BasicSample[]}\n         */\n        this.samples = [];\n        \n        /**\n         * The soundfont's instruments\n         * @type {BasicInstrument[]}\n         */\n        this.instruments = [];\n        \n        /**\n         * Soundfont's default modulatorss\n         * @type {Modulator[]}\n         */\n        this.defaultModulators = defaultModulators.map(m => Modulator.copy(m));\n        \n        if (data?.presets)\n        {\n            this.presets.push(...data.presets);\n            this.soundFontInfo = data.info;\n        }\n    }\n    \n    /**\n     * Merges soundfonts with the given order. Keep in mind that the info read is copied from the first one\n     * @param soundfonts {...BasicSoundFont} the soundfonts to merge, the first overwrites the last\n     * @returns {BasicSoundFont}\n     */\n    static mergeSoundfonts(...soundfonts)\n    {\n        const mainSf = soundfonts.shift();\n        const presets = mainSf.presets;\n        while (soundfonts.length)\n        {\n            const newPresets = soundfonts.shift().presets;\n            newPresets.forEach(newPreset =>\n            {\n                if (\n                    presets.find(existingPreset => existingPreset.bank === newPreset.bank && existingPreset.program === newPreset.program) === undefined\n                )\n                {\n                    presets.push(newPreset);\n                }\n            });\n        }\n        \n        return new BasicSoundFont({ presets: presets, info: mainSf.soundFontInfo });\n    }\n    \n    removeUnusedElements()\n    {\n        this.instruments.forEach(i =>\n        {\n            if (i.useCount < 1)\n            {\n                i.instrumentZones.forEach(z =>\n                {\n                    if (!z.isGlobal)\n                    {\n                        z.sample.useCount--;\n                    }\n                });\n            }\n        });\n        this.instruments = this.instruments.filter(i => i.useCount > 0);\n        this.samples = this.samples.filter(s => s.useCount > 0);\n    }\n    \n    /**\n     * @param instrument {BasicInstrument}\n     */\n    deleteInstrument(instrument)\n    {\n        if (instrument.useCount > 0)\n        {\n            throw new Error(`Cannot delete an instrument that has ${instrument.useCount} usages.`);\n        }\n        this.instruments.splice(this.instruments.indexOf(instrument), 1);\n        instrument.deleteInstrument();\n        this.removeUnusedElements();\n    }\n    \n    /**\n     * @param preset {BasicPreset}\n     */\n    deletePreset(preset)\n    {\n        preset.deletePreset();\n        this.presets.splice(this.presets.indexOf(preset), 1);\n        this.removeUnusedElements();\n    }\n    \n    /**\n     * @param sample {BasicSample}\n     */\n    deleteSample(sample)\n    {\n        if (sample.useCount > 0)\n        {\n            throw new Error(`Cannot delete sample that has ${sample.useCount} usages.`);\n        }\n        this.samples.splice(this.samples.indexOf(sample), 1);\n        this.removeUnusedElements();\n    }\n    \n    /**\n     * To avoid overlapping on multiple desfonts\n     * @param offset {number}\n     */\n    setSampleIDOffset(offset)\n    {\n        this.presets.forEach(p => p.sampleIDOffset = offset);\n    }\n    \n    /**\n     * Get the appropriate preset, undefined if not foun d\n     * @param bankNr {number}\n     * @param programNr {number}\n     * @param fallbackToProgram {boolean} if true, if no exact match is found, will use any bank with the given preset\n     * @return {BasicPreset}\n     */\n    getPresetNoFallback(bankNr, programNr, fallbackToProgram = false)\n    {\n        const p = this.presets.find(p => p.bank === bankNr && p.program === programNr);\n        if (p)\n        {\n            return p;\n        }\n        if (fallbackToProgram === false)\n        {\n            return undefined;\n        }\n        if (bankNr === 128)\n        {\n            // any drum preset\n            return this.presets.find(p => p.bank === 128);\n        }\n        return this.presets.find(p => p.program === programNr);\n    }\n    \n    /**\n     * Get the appropriate preset\n     * @param bankNr {number}\n     * @param programNr {number}\n     * @returns {BasicPreset}\n     */\n    getPreset(bankNr, programNr)\n    {\n        // check for exact match\n        let preset = this.presets.find(p => p.bank === bankNr && p.program === programNr);\n        if (!preset)\n        {\n            // no match...\n            if (bankNr === 128)\n            {\n                // drum preset: find any preset with bank 128\n                preset = this.presets.find(p => p.bank === 128 && p.program === programNr);\n                if (!preset)\n                {\n                    preset = this.presets.find(p => p.bank === 128);\n                }\n            }\n            else\n            {\n                // non drum preset: find any preset with the given program that is not a drum preset\n                preset = this.presets.find(p => p.program === programNr && p.bank !== 128);\n            }\n            if (preset)\n            {\n                SpessaSynthWarn(\n                    `%cPreset ${bankNr}.${programNr} not found. Replaced with %c${preset.presetName} (${preset.bank}.${preset.program})`,\n                    consoleColors.warn,\n                    consoleColors.recognized\n                );\n            }\n        }\n        // no preset, use the first one available\n        if (!preset)\n        {\n            SpessaSynthWarn(`Preset ${programNr} not found. Defaulting to`, this.presets[0].presetName);\n            preset = this.presets[0];\n        }\n        return preset;\n    }\n    \n    /**\n     * gets preset by name\n     * @param presetName {string}\n     * @returns {BasicPreset}\n     */\n    getPresetByName(presetName)\n    {\n        let preset = this.presets.find(p => p.presetName === presetName);\n        if (!preset)\n        {\n            SpessaSynthWarn(\"Preset not found. Defaulting to:\", this.presets[0].presetName);\n            preset = this.presets[0];\n        }\n        return preset;\n    }\n    \n    /**\n     * @param error {string}\n     */\n    parsingError(error)\n    {\n        throw new Error(`SF parsing error: ${error} The file may be corrupted.`);\n    }\n}\n\nBasicSoundFont.prototype.write = write;\n\nexport { BasicSoundFont };", "import { readRIFFChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { SpessaSynthGroupCollapsed, SpessaSynthGroupEnd } from \"../../utils/loggin.js\";\nimport { consoleColors } from \"../../utils/other.js\";\n\n/**\n * @this {DLSSoundFont}\n * @param instrumentListChunk {RiffChunk}\n */\nexport function readDLSInstrumentList(instrumentListChunk)\n{\n    SpessaSynthGroupCollapsed(\"%cLoading instruments...\", consoleColors.info);\n    for (let i = 0; i < this.instrumentAmount; i++)\n    {\n        this.readDLSInstrument(readRIFFChunk(instrumentListChunk.chunkData));\n    }\n    SpessaSynthGroupEnd();\n}", "/**\n * @typedef {{\n *  instrumentGenerators: Generator[],\n *  presetGenerators: Generator[],\n *  modulators: Modulator[],\n *  sample: BasicSample,\n *  sampleID: number,\n * }} SampleAndGenerators\n */\nimport { generatorTypes } from \"./generator.js\";\nimport { Modulator } from \"./modulator.js\";\n\nexport class BasicPreset\n{\n    /**\n     * @param modulators {Modulator[]}\n     */\n    constructor(modulators)\n    {\n        /**\n         * The preset's name\n         * @type {string}\n         */\n        this.presetName = \"\";\n        /**\n         * The preset's MIDI program number\n         * @type {number}\n         */\n        this.program = 0;\n        /**\n         * The preset's MIDI bank number\n         * @type {number}\n         */\n        this.bank = 0;\n        \n        /**\n         * The preset's zones\n         * @type {BasicPresetZone[]}\n         */\n        this.presetZones = [];\n        \n        /**\n         * SampleID offset for this preset\n         * @type {number}\n         */\n        this.sampleIDOffset = 0;\n        \n        /**\n         * Stores already found getSamplesAndGenerators for reuse\n         * @type {SampleAndGenerators[][][]}\n         */\n        this.foundSamplesAndGenerators = [];\n        for (let i = 0; i < 128; i++)\n        {\n            this.foundSamplesAndGenerators[i] = [];\n        }\n        \n        /**\n         * unused metadata\n         * @type {number}\n         */\n        this.library = 0;\n        /**\n         * unused metadata\n         * @type {number}\n         */\n        this.genre = 0;\n        /**\n         * unused metadata\n         * @type {number}\n         */\n        this.morphology = 0;\n        \n        /**\n         * Default modulators\n         * @type {Modulator[]}\n         */\n        this.defaultModulators = modulators;\n    }\n    \n    deletePreset()\n    {\n        this.presetZones.forEach(z => z.deleteZone());\n        this.presetZones.length = 0;\n    }\n    \n    /**\n     * @param index {number}\n     */\n    deleteZone(index)\n    {\n        this.presetZones[index].deleteZone();\n        this.presetZones.splice(index, 1);\n    }\n    \n    /**\n     * Preloads all samples (async)\n     */\n    preload(keyMin, keyMax)\n    {\n        for (let key = keyMin; key < keyMax + 1; key++)\n        {\n            for (let velocity = 0; velocity < 128; velocity++)\n            {\n                this.getSamplesAndGenerators(key, velocity).forEach(samandgen =>\n                {\n                    if (!samandgen.sample.isSampleLoaded)\n                    {\n                        samandgen.sample.getAudioData();\n                    }\n                });\n            }\n        }\n    }\n    \n    /**\n     * Preloads a specific key/velocity combo\n     * @param key {number}\n     * @param velocity {number}\n     */\n    preloadSpecific(key, velocity)\n    {\n        this.getSamplesAndGenerators(key, velocity).forEach(samandgen =>\n        {\n            if (!samandgen.sample.isSampleLoaded)\n            {\n                samandgen.sample.getAudioData();\n            }\n        });\n    }\n    \n    /**\n     * Returns generatorTranslator and generators for given note\n     * @param midiNote {number}\n     * @param velocity {number}\n     * @returns {SampleAndGenerators[]}\n     */\n    getSamplesAndGenerators(midiNote, velocity)\n    {\n        const memorized = this.foundSamplesAndGenerators[midiNote][velocity];\n        if (memorized)\n        {\n            return memorized;\n        }\n        \n        if (this.presetZones.length < 1)\n        {\n            return [];\n        }\n        \n        function isInRange(min, max, number)\n        {\n            return number >= min && number <= max;\n        }\n        \n        /**\n         * @param main {Generator[]}\n         * @param adder {Generator[]}\n         */\n        function addUnique(main, adder)\n        {\n            main.push(...adder.filter(g => !main.find(mg => mg.generatorType === g.generatorType)));\n        }\n        \n        /**\n         * @param main {Modulator[]}\n         * @param adder {Modulator[]}\n         */\n        function addUniqueMods(main, adder)\n        {\n            main.push(...adder.filter(m => !main.find(mm => Modulator.isIdentical(m, mm))));\n        }\n        \n        /**\n         * @type {SampleAndGenerators[]}\n         */\n        let parsedGeneratorsAndSamples = [];\n        \n        /**\n         * global zone is always first, so it or nothing\n         * @type {Generator[]}\n         */\n        let globalPresetGenerators = this.presetZones[0].isGlobal ? [...this.presetZones[0].generators] : [];\n        \n        let globalPresetModulators = this.presetZones[0].isGlobal ? [...this.presetZones[0].modulators] : [];\n        \n        // find the preset zones in range\n        let presetZonesInRange = this.presetZones.filter(currentZone =>\n            (\n                isInRange(\n                    currentZone.keyRange.min,\n                    currentZone.keyRange.max,\n                    midiNote\n                )\n                &&\n                isInRange(\n                    currentZone.velRange.min,\n                    currentZone.velRange.max,\n                    velocity\n                )\n            ) && !currentZone.isGlobal);\n        \n        presetZonesInRange.forEach(zone =>\n        {\n            if (zone.instrument.instrumentZones.length < 1)\n            {\n                return;\n            }\n            let presetGenerators = zone.generators;\n            let presetModulators = zone.modulators;\n            /**\n             * global zone is always first, so it or nothing\n             * @type {Generator[]}\n             */\n            let globalInstrumentGenerators = zone.instrument.instrumentZones[0].isGlobal ? [...zone.instrument.instrumentZones[0].generators] : [];\n            let globalInstrumentModulators = zone.instrument.instrumentZones[0].isGlobal ? [...zone.instrument.instrumentZones[0].modulators] : [];\n            \n            let instrumentZonesInRange = zone.instrument.instrumentZones\n                .filter(currentZone =>\n                    (\n                        isInRange(\n                            currentZone.keyRange.min,\n                            currentZone.keyRange.max,\n                            midiNote\n                        )\n                        &&\n                        isInRange(\n                            currentZone.velRange.min,\n                            currentZone.velRange.max,\n                            velocity\n                        )\n                    ) && !currentZone.isGlobal\n                );\n            \n            instrumentZonesInRange.forEach(instrumentZone =>\n            {\n                let instrumentGenerators = [...instrumentZone.generators];\n                let instrumentModulators = [...instrumentZone.modulators];\n                \n                addUnique(\n                    presetGenerators,\n                    globalPresetGenerators\n                );\n                // add the unique global preset generators (local replace global(\n                \n                \n                // add the unique global instrument generators (local replace global)\n                addUnique(\n                    instrumentGenerators,\n                    globalInstrumentGenerators\n                );\n                \n                addUniqueMods(\n                    presetModulators,\n                    globalPresetModulators\n                );\n                addUniqueMods(\n                    instrumentModulators,\n                    globalInstrumentModulators\n                );\n                \n                // default mods\n                addUniqueMods(\n                    instrumentModulators,\n                    this.defaultModulators\n                );\n                \n                /**\n                 * sum preset modulators to instruments (amount) sf spec page 54\n                 * @type {Modulator[]}\n                 */\n                const finalModulatorList = [...instrumentModulators];\n                for (let i = 0; i < presetModulators.length; i++)\n                {\n                    let mod = presetModulators[i];\n                    const identicalInstrumentModulator = finalModulatorList.findIndex(\n                        m => Modulator.isIdentical(mod, m));\n                    if (identicalInstrumentModulator !== -1)\n                    {\n                        // sum the amounts (this makes a new modulator because otherwise it would overwrite the one in the soundfont!!!\n                        finalModulatorList[identicalInstrumentModulator] = finalModulatorList[identicalInstrumentModulator].sumTransform(\n                            mod);\n                    }\n                    else\n                    {\n                        finalModulatorList.push(mod);\n                    }\n                }\n                \n                \n                // combine both generators and add to the final result\n                parsedGeneratorsAndSamples.push({\n                    instrumentGenerators: instrumentGenerators,\n                    presetGenerators: presetGenerators,\n                    modulators: finalModulatorList,\n                    sample: instrumentZone.sample,\n                    sampleID: instrumentZone.generators.find(\n                        g => g.generatorType === generatorTypes.sampleID).generatorValue\n                });\n            });\n        });\n        \n        // save and return\n        this.foundSamplesAndGenerators[midiNote][velocity] = parsedGeneratorsAndSamples;\n        return parsedGeneratorsAndSamples;\n    }\n}", "/**\n * @typedef {Object} SoundFontRange\n * @property {number} min - the minimum midi note\n * @property {number} max - the maximum midi note\n */\n\nexport class BasicZone\n{\n    /**\n     * The zone's velocity range\n     * @type {SoundFontRange}\n     */\n    velRange = { min: 0, max: 127 };\n    \n    /**\n     * The zone's key range\n     * @type {SoundFontRange}\n     */\n    keyRange = { min: 0, max: 127 };\n    \n    /**\n     * Indicates if the zone is global\n     * @type {boolean}\n     */\n    isGlobal = false;\n    \n    /**\n     * The zone's generators\n     * @type {Generator[]}\n     */\n    generators = [];\n    \n    /**\n     * The zone's modulators\n     * @type {Modulator[]}\n     */\n    modulators = [];\n}\n\n", "import { BasicZone } from \"./basic_zone.js\";\n\nexport class BasicInstrumentZone extends BasicZone\n{\n    /**\n     * Zone's sample. Undefined if global\n     * @type {BasicSample|undefined}\n     */\n    sample = undefined;\n    /**\n     * The zone's use count\n     * @type {number}\n     */\n    useCount = 0;\n    \n    deleteZone()\n    {\n        this.useCount--;\n        if (this.isGlobal)\n        {\n            return;\n        }\n        this.sample.useCount--;\n    }\n}\n\nexport class BasicPresetZone extends BasicZone\n{\n    /**\n     * Zone's instrument. Undefined if global\n     * @type {BasicInstrument|undefined}\n     */\n    instrument = undefined;\n    \n    deleteZone()\n    {\n        if (this.isGlobal)\n        {\n            return;\n        }\n        this.instrument.removeUseCount();\n    }\n}", "export class BasicInstrument\n{\n    constructor()\n    {\n        /**\n         * The instrument's name\n         * @type {string}\n         */\n        this.instrumentName = \"\";\n        /**\n         * The instrument's zones\n         * @type {BasicInstrumentZone[]}\n         */\n        this.instrumentZones = [];\n        this._useCount = 0;\n    }\n    \n    /**\n     * @returns {number}\n     */\n    get useCount()\n    {\n        return this._useCount;\n    }\n    \n    addUseCount()\n    {\n        this._useCount++;\n        this.instrumentZones.forEach(z => z.useCount++);\n    }\n    \n    removeUseCount()\n    {\n        this._useCount--;\n        for (let i = 0; i < this.instrumentZones.length; i++)\n        {\n            if (this.safeDeleteZone(i))\n            {\n                i--;\n            }\n        }\n    }\n    \n    deleteInstrument()\n    {\n        this.instrumentZones.forEach(z => z.deleteZone());\n        this.instrumentZones.length = 0;\n    }\n    \n    /**\n     * @param index {number}\n     * @returns {boolean} is the zone has been deleted\n     */\n    safeDeleteZone(index)\n    {\n        this.instrumentZones[index].useCount--;\n        if (this.instrumentZones[index].useCount < 1)\n        {\n            this.deleteZone(index);\n            return true;\n        }\n        return false;\n    }\n    \n    /**\n     * @param index {number}\n     */\n    deleteZone(index)\n    {\n        this.instrumentZones[index].deleteZone();\n        this.instrumentZones.splice(index, 1);\n    }\n}", "import { BasicPreset } from \"../basic_soundfont/basic_preset.js\";\nimport { BasicPresetZone } from \"../basic_soundfont/basic_zones.js\";\nimport { BasicInstrument } from \"../basic_soundfont/basic_instrument.js\";\nimport { defaultModulators } from \"../basic_soundfont/modulator.js\";\n\nexport class DLSPreset extends BasicPreset\n{\n    /**\n     * Creates a new DLS preset\n     * @param ulBank {number}\n     * @param ulInstrument {number}\n     */\n    constructor(ulBank, ulInstrument)\n    {\n        // use stock default modulators, dls won't ever have DMOD chunk\n        super(defaultModulators);\n        this.program = ulInstrument & 127;\n        this.bank = (ulBank >> 8) & 127;\n        const isDrums = ulBank >> 31;\n        if (isDrums)\n        {\n            // soundfont bank is 128 so we change it here\n            this.bank = 128;\n        }\n        \n        this.DLSInstrument = new BasicInstrument();\n        this.DLSInstrument.addUseCount();\n        \n        const zone = new BasicPresetZone();\n        zone.instrument = this.DLSInstrument;\n        \n        this.presetZones = [zone];\n    }\n}", "import { readBytesAsString } from \"../../utils/byte_functions/string.js\";\nimport { readLittleEndian } from \"../../utils/byte_functions/little_endian.js\";\nimport { DLSPreset } from \"./dls_preset.js\";\nimport { findRIFFListType, readRIFFChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { SpessaSynthGroup, SpessaSynthGroupEnd } from \"../../utils/loggin.js\";\nimport { BasicInstrumentZone } from \"../basic_soundfont/basic_zones.js\";\nimport { consoleColors } from \"../../utils/other.js\";\n\n/**\n * @this {DLSSoundFont}\n * @param chunk {RiffChunk}\n */\nexport function readDLSInstrument(chunk)\n{\n    this.verifyHeader(chunk, \"LIST\");\n    this.verifyText(readBytesAsString(chunk.chunkData, 4), \"ins \");\n    /**\n     * @type {RiffChunk[]}\n     */\n    const chunks = [];\n    while (chunk.chunkData.length > chunk.chunkData.currentIndex)\n    {\n        chunks.push(readRIFFChunk(chunk.chunkData));\n    }\n    \n    \n    const instrumentHeader = chunks.find(c => c.header === \"insh\");\n    if (!instrumentHeader)\n    {\n        SpessaSynthGroupEnd();\n        throw new Error(\"No instrument header!\");\n    }\n    \n    // read instrument header\n    const regions = readLittleEndian(instrumentHeader.chunkData, 4);\n    const ulBank = readLittleEndian(instrumentHeader.chunkData, 4);\n    const ulInstrument = readLittleEndian(instrumentHeader.chunkData, 4);\n    const preset = new DLSPreset(ulBank, ulInstrument);\n    \n    // read preset name in INFO\n    let presetName = \"unnamedPreset\";\n    const infoChunk = findRIFFListType(chunks, \"INFO\");\n    if (infoChunk)\n    {\n        let info = readRIFFChunk(infoChunk.chunkData);\n        while (info.header !== \"INAM\")\n        {\n            info = readRIFFChunk(infoChunk.chunkData);\n        }\n        presetName = readBytesAsString(info.chunkData, info.chunkData.length).trim();\n    }\n    preset.presetName = presetName;\n    preset.DLSInstrument.instrumentName = presetName;\n    SpessaSynthGroup(\n        `%cParsing %c\"${presetName}\"%c...`,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info\n    );\n    \n    // list of regions\n    const regionListChunk = findRIFFListType(chunks, \"lrgn\");\n    if (!regionListChunk)\n    {\n        SpessaSynthGroupEnd();\n        throw new Error(\"No region list!\");\n    }\n    \n    // global articulation: essentially global zone\n    const globalZone = new BasicInstrumentZone();\n    globalZone.isGlobal = true;\n    \n    // read articulators\n    const globalLart = findRIFFListType(chunks, \"lart\");\n    const globalLar2 = findRIFFListType(chunks, \"lar2\");\n    this.readLart(globalLart, globalLar2, globalZone);\n    preset.DLSInstrument.instrumentZones.push(globalZone);\n    \n    // read regions\n    for (let i = 0; i < regions; i++)\n    {\n        const chunk = readRIFFChunk(regionListChunk.chunkData);\n        this.verifyHeader(chunk, \"LIST\");\n        const type = readBytesAsString(chunk.chunkData, 4);\n        if (type !== \"rgn \" && type !== \"rgn2\")\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(`Invalid DLS region! Expected \"rgn \" or \"rgn2\" got \"${type}\"`);\n        }\n        \n        \n        const zone = this.readRegion(chunk);\n        if (zone)\n        {\n            preset.DLSInstrument.instrumentZones.push(zone);\n        }\n    }\n    \n    this.presets.push(preset);\n    this.instruments.push(preset.DLSInstrument);\n    SpessaSynthGroupEnd();\n}", "/**\n *\n * @enum {number}\n */\nexport const DLSDestinations = {\n    none: 0x0,\n    gain: 0x1,\n    reserved: 0x2,\n    pitch: 0x3,\n    pan: 0x4,\n    keyNum: 0x5,\n    // nuh uh, the channel controllers are not supported!!!!\n    chorusSend: 0x80,\n    reverbSend: 0x81,\n    \n    modLfoFreq: 0x104,\n    modLfoDelay: 0x105,\n    \n    vibLfoFreq: 0x114,\n    vibLfoDelay: 0x115,\n    \n    volEnvAttack: 0x206,\n    volEnvDecay: 0x207,\n    volEnvRelease: 0x209,\n    volEnvSustain: 0x20a,\n    volEnvDelay: 0x20b,\n    volEnvHold: 0x20c,\n    \n    modEnvAttack: 0x30a,\n    modEnvDecay: 0x30b,\n    modEnvRelease: 0x30d,\n    modEnvSustain: 0x30e,\n    modEnvDelay: 0x30f,\n    modEnvHold: 0x310,\n    \n    filterCutoff: 0x500,\n    filterQ: 0x501\n};", "/**\n * @enum {number}\n */\nexport const DLSSources = {\n    none: 0x0,\n    modLfo: 0x1,\n    velocity: 0x2,\n    keyNum: 0x3,\n    volEnv: 0x4,\n    modEnv: 0x5,\n    pitchWheel: 0x6,\n    polyPressure: 0x7,\n    channelPressure: 0x8,\n    vibratoLfo: 0x9,\n    \n    modulationWheel: 0x81,\n    volume: 0x87,\n    pan: 0x8a,\n    expression: 0x8b,\n    chorus: 0xdb,\n    reverb: 0xdd,\n    \n    pitchWheelRange: 0x100,\n    fineTune: 0x101,\n    coarseTune: 0x102\n};", "import { DLSSources } from \"./dls_sources.js\";\nimport { getModSourceEnum, Modulator, modulatorCurveTypes, modulatorSources } from \"../basic_soundfont/modulator.js\";\nimport { midiControllers } from \"../../midi_parser/midi_message.js\";\nimport { DLSDestinations } from \"./dls_destinations.js\";\n\nimport { generatorTypes } from \"../basic_soundfont/generator.js\";\n\n/**\n * @param source {number}\n * @returns {{enum: number, isCC: boolean}|undefined}\n */\nfunction getSF2SourceFromDLS(source)\n{\n    let sourceEnum = undefined;\n    let isCC = false;\n    switch (source)\n    {\n        default:\n        case DLSSources.modLfo:\n        case DLSSources.vibratoLfo:\n        case DLSSources.coarseTune:\n        case DLSSources.fineTune:\n        case DLSSources.modEnv:\n            return undefined; // cannot be this in sf2\n        \n        case DLSSources.keyNum:\n            sourceEnum = modulatorSources.noteOnKeyNum;\n            break;\n        case DLSSources.none:\n            sourceEnum = modulatorSources.noController;\n            break;\n        case DLSSources.modulationWheel:\n            sourceEnum = midiControllers.modulationWheel;\n            isCC = true;\n            break;\n        case DLSSources.pan:\n            sourceEnum = midiControllers.pan;\n            isCC = true;\n            break;\n        case DLSSources.reverb:\n            sourceEnum = midiControllers.reverbDepth;\n            isCC = true;\n            break;\n        case DLSSources.chorus:\n            sourceEnum = midiControllers.chorusDepth;\n            isCC = true;\n            break;\n        case DLSSources.expression:\n            sourceEnum = midiControllers.expressionController;\n            isCC = true;\n            break;\n        case DLSSources.volume:\n            sourceEnum = midiControllers.mainVolume;\n            isCC = true;\n            break;\n        case DLSSources.velocity:\n            sourceEnum = modulatorSources.noteOnVelocity;\n            break;\n        case DLSSources.polyPressure:\n            sourceEnum = modulatorSources.polyPressure;\n            break;\n        case DLSSources.channelPressure:\n            sourceEnum = modulatorSources.channelPressure;\n            break;\n        case DLSSources.pitchWheel:\n            sourceEnum = modulatorSources.pitchWheel;\n            break;\n        case DLSSources.pitchWheelRange:\n            sourceEnum = modulatorSources.pitchWheelRange;\n            break;\n    }\n    if (sourceEnum === undefined)\n    {\n        throw new Error(`Unknown DLS Source: ${source}`);\n    }\n    return { enum: sourceEnum, isCC: isCC };\n}\n\n/**\n * @param destination {number}\n * @param amount {number}\n * @returns {generatorTypes|{gen: generatorTypes, newAmount: number}} // transform amount to sf2 units\n */\nfunction getSF2GeneratorFromDLS(destination, amount)\n{\n    switch (destination)\n    {\n        default:\n        case DLSDestinations.none:\n            return undefined;\n        case DLSDestinations.pan:\n            return generatorTypes.pan;\n        case DLSDestinations.gain:\n            return { gen: generatorTypes.initialAttenuation, newAmount: amount * -1 };\n        case DLSDestinations.pitch:\n            return generatorTypes.fineTune;\n        case DLSDestinations.keyNum:\n            return generatorTypes.overridingRootKey;\n        \n        // vol env\n        case DLSDestinations.volEnvDelay:\n            return generatorTypes.delayVolEnv;\n        case DLSDestinations.volEnvAttack:\n            return generatorTypes.attackVolEnv;\n        case DLSDestinations.volEnvHold:\n            return generatorTypes.holdVolEnv;\n        case DLSDestinations.volEnvDecay:\n            return generatorTypes.decayVolEnv;\n        case DLSDestinations.volEnvSustain:\n            return { gen: generatorTypes.sustainVolEnv, newAmount: 1000 - amount };\n        case DLSDestinations.volEnvRelease:\n            return generatorTypes.releaseVolEnv;\n        \n        // mod env\n        case DLSDestinations.modEnvDelay:\n            return generatorTypes.delayModEnv;\n        case DLSDestinations.modEnvAttack:\n            return generatorTypes.attackModEnv;\n        case DLSDestinations.modEnvHold:\n            return generatorTypes.holdModEnv;\n        case DLSDestinations.modEnvDecay:\n            return generatorTypes.decayModEnv;\n        case DLSDestinations.modEnvSustain:\n            return { gen: generatorTypes.sustainModEnv, newAmount: (1000 - amount) / 10 };\n        case DLSDestinations.modEnvRelease:\n            return generatorTypes.releaseModEnv;\n        \n        case DLSDestinations.filterCutoff:\n            return generatorTypes.initialFilterFc;\n        case DLSDestinations.filterQ:\n            return generatorTypes.initialFilterQ;\n        case DLSDestinations.chorusSend:\n            return generatorTypes.chorusEffectsSend;\n        case DLSDestinations.reverbSend:\n            return generatorTypes.reverbEffectsSend;\n    }\n}\n\n/**\n * checks for combos such as mod lfo as source and pitch as destination which results in modLfoToPitch\n * @param source {number}\n * @param destination {number}\n * @returns {generatorTypes} real destination\n */\nfunction checkForSpecialDLSCombo(source, destination)\n{\n    if (source === DLSSources.vibratoLfo && destination === DLSDestinations.pitch)\n    {\n        return generatorTypes.vibLfoToPitch;\n    }\n    else if (source === DLSSources.modLfo && destination === DLSDestinations.pitch)\n    {\n        return generatorTypes.modLfoToPitch;\n    }\n    else if (source === DLSSources.modLfo && destination === DLSDestinations.filterCutoff)\n    {\n        return generatorTypes.modLfoToFilterFc;\n    }\n    else if (source === DLSSources.modLfo && destination === DLSDestinations.gain)\n    {\n        return generatorTypes.modLfoToVolume;\n    }\n    else if (source === DLSSources.modEnv && destination === DLSDestinations.filterCutoff)\n    {\n        return generatorTypes.modEnvToFilterFc;\n    }\n    else if (source === DLSSources.modEnv && destination === DLSDestinations.pitch)\n    {\n        return generatorTypes.modEnvToPitch;\n    }\n    else\n    {\n        return undefined;\n    }\n}\n\n/**\n * @param source {number}\n * @param control {number}\n * @param destination {number}\n * @param transform {number}\n * @param value {number}\n * @returns {Modulator|undefined}\n */\nexport function getSF2ModulatorFromArticulator(\n    source,\n    control,\n    destination,\n    transform,\n    value\n)\n{\n    // check for special combinations\n    const specialDestination = checkForSpecialDLSCombo(source, destination);\n    /**\n     * @type {generatorTypes}\n     */\n    let destinationGenerator;\n    /**\n     * @type {{enum: number, isCC: boolean}}\n     */\n    let sf2Source;\n    let swapSources = false;\n    let isSourceNoController = false;\n    if (specialDestination === undefined)\n    {\n        // determine destination\n        const sf2GenDestination = getSF2GeneratorFromDLS(destination, value);\n        if (sf2GenDestination === undefined)\n        {\n            // cannot be a valid modulator\n            return undefined;\n        }\n        /**\n         * @type {generatorTypes}\n         */\n        destinationGenerator = sf2GenDestination;\n        if (sf2GenDestination.newAmount !== undefined)\n        {\n            value = sf2GenDestination.newAmount;\n            destinationGenerator = sf2GenDestination.gen;\n        }\n        sf2Source = getSF2SourceFromDLS(source);\n        if (sf2Source === undefined)\n        {\n            // cannot be a valid modulator\n            return undefined;\n        }\n    }\n    else\n    {\n        destinationGenerator = specialDestination;\n        swapSources = true;\n        sf2Source = { enum: modulatorSources.noController, isCC: false };\n        isSourceNoController = true;\n    }\n    let sf2SecondSource = getSF2SourceFromDLS(control);\n    if (sf2SecondSource === undefined)\n    {\n        // cannot be a valid modulator\n        return undefined;\n    }\n    \n    // get transforms and final enums\n    let sourceEnumFinal;\n    if (isSourceNoController)\n    {\n        // we force it into this state because before it was some strange value,\n        // like vibrato lfo bipolar for example\n        // since we turn it into NoController -> vibLfoToPitch the result is the same and bipolar concontroller is technically 0\n        sourceEnumFinal = 0x0;\n    }\n    else\n    {\n        // output transform is ignored as it's not a thing in sfont format\n        // unless the curve type of source is linear, then output is copied\n        const outputTransform = transform & 0b1111;\n        // source curve type maps to desfont curve type in section 2.10, table 9\n        let sourceTransform = (transform >> 10) & 0b1111;\n        if (sourceTransform === modulatorCurveTypes.linear && outputTransform !== modulatorCurveTypes.linear)\n        {\n            sourceTransform = outputTransform;\n        }\n        const sourceIsBipolar = (transform >> 14) & 1;\n        let sourceIsNegative = (transform >> 15) & 1;\n        // special case: for attenuation, invert source\n        if (destinationGenerator === generatorTypes.initialAttenuation)\n        {\n            sourceIsNegative = !sourceIsNegative;\n        }\n        sourceEnumFinal = getModSourceEnum(\n            sourceTransform,\n            sourceIsBipolar,\n            sourceIsNegative,\n            sf2Source.isCC,\n            sf2Source.enum\n        );\n    }\n    \n    const secSourceTransform = (transform >> 4) & 0b1111;\n    const secSourceIsBipolar = (transform >> 8) & 1;\n    const secSourceIsNegative = transform >> 9 & 1;\n    let secSourceEnumFinal = getModSourceEnum(\n        secSourceTransform,\n        secSourceIsBipolar,\n        secSourceIsNegative,\n        sf2SecondSource.isCC,\n        sf2SecondSource.enum\n    );\n    \n    if (swapSources)\n    {\n        const temp = secSourceEnumFinal;\n        secSourceEnumFinal = sourceEnumFinal;\n        sourceEnumFinal = temp;\n    }\n    \n    // return the modulator!\n    return new Modulator({\n        srcEnum: sourceEnumFinal,\n        secSrcEnum: secSourceEnumFinal,\n        dest: destinationGenerator,\n        transform: 0x0,\n        amt: value\n    });\n    \n}", "import { readLittleEndian } from \"../../utils/byte_functions/little_endian.js\";\nimport { DLSDestinations } from \"./dls_destinations.js\";\nimport { DLSSources } from \"./dls_sources.js\";\nimport { getSF2ModulatorFromArticulator } from \"./articulator_converter.js\";\nimport { SpessaSynthInfo, SpessaSynthWarn } from \"../../utils/loggin.js\";\nimport { consoleColors } from \"../../utils/other.js\";\nimport { Generator, generatorTypes } from \"../basic_soundfont/generator.js\";\nimport { Modulator } from \"../basic_soundfont/modulator.js\";\n\n/**\n * @param source {number}\n * @param control {number}\n * @param destination {number}\n * @param value {number}\n * @param transform {number}\n */\nfunction modulatorConverterDebug(\n    source,\n    control,\n    destination,\n    value,\n    transform\n)\n{\n    const type = Object.keys(DLSDestinations).find(k => DLSDestinations[k] === destination);\n    const srcType = Object.keys(DLSSources).find(k => DLSSources[k] === source);\n    const ctrlType = Object.keys(DLSSources).find(k => DLSSources[k] === control);\n    const typeString = type ? type : destination.toString(16);\n    const srcString = srcType ? srcType : source.toString(16);\n    const ctrlString = ctrlType ? ctrlType : control.toString(16);\n    SpessaSynthInfo(\n        `%cAttempting to convert the following DLS Articulator to SF2 Modulator:\n        Source: %c${srcString}%c\n        Control: %c${ctrlString}%c\n        Destination: %c${typeString}%c\n        Amount: %c${value}%c\n        Transform: %c${transform}%c...`,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info,\n        consoleColors.recognized,\n        consoleColors.info\n    );\n}\n\n/**\n * Reads the articulator chunk\n * @param chunk {RiffChunk}\n * @param disableVibrato {boolean} it seems that dls 1 does not have vibrato lfo, so we shall disable it\n * @returns {{modulators: Modulator[], generators: Generator[]}}\n */\nexport function readArticulation(chunk, disableVibrato)\n{\n    const artData = chunk.chunkData;\n    /**\n     * @type {Generator[]}\n     */\n    const generators = [];\n    /**\n     * @type {Modulator[]}\n     */\n    const modulators = [];\n    \n    // cbSize (ignore)\n    readLittleEndian(artData, 4);\n    const connectionsAmount = readLittleEndian(artData, 4);\n    for (let i = 0; i < connectionsAmount; i++)\n    {\n        // read the block\n        const source = readLittleEndian(artData, 2);\n        const control = readLittleEndian(artData, 2);\n        const destination = readLittleEndian(artData, 2);\n        const transform = readLittleEndian(artData, 2);\n        const scale = readLittleEndian(artData, 4) | 0;\n        const value = scale >> 16; // convert it to 16 bit as soundfont uses that\n        \n        // modulatorConverterDebug(source, control, destination, value, transform);\n        // interpret this somehow...\n        // if source and control are both zero, it's a generator\n        if (source === 0 && control === 0 && transform === 0)\n        {\n            /**\n             * @type {Generator}\n             */\n            let generator;\n            switch (destination)\n            {\n                case DLSDestinations.pan:\n                    generator = new Generator(generatorTypes.pan, value); // turn percent into tenths of percent\n                    break;\n                case DLSDestinations.gain:\n                    generator = new Generator(generatorTypes.initialAttenuation, -value * 10 / 0.4); // turn to centibels and apply emu correction\n                    break;\n                case DLSDestinations.filterCutoff:\n                    generator = new Generator(generatorTypes.initialFilterFc, value);\n                    break;\n                case DLSDestinations.filterQ:\n                    generator = new Generator(generatorTypes.initialFilterQ, value);\n                    break;\n                \n                // mod lfo raw values it seems\n                case DLSDestinations.modLfoFreq:\n                    generator = new Generator(generatorTypes.freqModLFO, value);\n                    break;\n                case DLSDestinations.modLfoDelay:\n                    generator = new Generator(generatorTypes.delayModLFO, value);\n                    break;\n                case DLSDestinations.vibLfoFreq:\n                    generator = new Generator(generatorTypes.freqVibLFO, value);\n                    break;\n                case DLSDestinations.vibLfoDelay:\n                    generator = new Generator(generatorTypes.delayVibLFO, value);\n                    break;\n                \n                // vol env: all times are timecents like sf2\n                case DLSDestinations.volEnvDelay:\n                    generator = new Generator(generatorTypes.delayVolEnv, value);\n                    break;\n                case DLSDestinations.volEnvAttack:\n                    generator = new Generator(generatorTypes.attackVolEnv, value);\n                    break;\n                case DLSDestinations.volEnvHold:\n                    generator = new Generator(generatorTypes.holdVolEnv, value);\n                    break;\n                case DLSDestinations.volEnvDecay:\n                    generator = new Generator(generatorTypes.decayVolEnv, value);\n                    break;\n                case DLSDestinations.volEnvRelease:\n                    generator = new Generator(generatorTypes.releaseVolEnv, value);\n                    break;\n                case DLSDestinations.volEnvSustain:\n                    // gain seems to be (1000 - value) / 10 = sustain dB\n                    const sustainDb = (1000 - value) / 10;\n                    generator = new Generator(generatorTypes.sustainVolEnv, sustainDb * 10);\n                    break;\n                \n                // mod env\n                case DLSDestinations.modEnvDelay:\n                    generator = new Generator(generatorTypes.delayModEnv, value);\n                    break;\n                case DLSDestinations.modEnvAttack:\n                    generator = new Generator(generatorTypes.attackModEnv, value);\n                    break;\n                case DLSDestinations.modEnvHold:\n                    generator = new Generator(generatorTypes.holdModEnv, value);\n                    break;\n                case DLSDestinations.modEnvDecay:\n                    generator = new Generator(generatorTypes.decayModEnv, value);\n                    break;\n                case DLSDestinations.modEnvRelease:\n                    generator = new Generator(generatorTypes.releaseModEnv, value);\n                    break;\n                case DLSDestinations.modEnvSustain:\n                    // dls uses 1%, desfont uses 0.1%\n                    const percentageSustain = 1000 - value;\n                    generator = new Generator(generatorTypes.sustainModEnv, percentageSustain);\n                    break;\n                \n                case DLSDestinations.reverbSend:\n                    generator = new Generator(generatorTypes.reverbEffectsSend, value);\n                    break;\n                case DLSDestinations.chorusSend:\n                    generator = new Generator(generatorTypes.chorusEffectsSend, value);\n                    break;\n                case DLSDestinations.pitch:\n                    // split it up\n                    const semi = Math.floor(value / 100);\n                    const cents = Math.floor(value - semi * 100);\n                    generator = new Generator(generatorTypes.fineTune, cents);\n                    generators.push(new Generator(generatorTypes.coarseTune, semi));\n                    break;\n            }\n            if (generator)\n            {\n                generators.push(generator);\n            }\n        }\n        else\n            // if not, modulator??\n        {\n            let isGenerator = true;\n            // a few special cases which are generators:\n            if (control === DLSSources.none)\n            {\n                // mod lfo to pitch\n                if (source === DLSSources.modLfo && destination === DLSDestinations.pitch)\n                {\n                    generators.push(new Generator(generatorTypes.modLfoToPitch, value));\n                }\n                else\n                    // mod lfo to volume\n                if (source === DLSSources.modLfo && destination === DLSDestinations.gain)\n                {\n                    generators.push(new Generator(generatorTypes.modLfoToVolume, value));\n                }\n                else\n                    // mod lfo to filter\n                if (source === DLSSources.modLfo && destination === DLSDestinations.filterCutoff)\n                {\n                    generators.push(new Generator(generatorTypes.modLfoToFilterFc, value));\n                }\n                else\n                    // vib lfo to pitch\n                if (source === DLSSources.vibratoLfo && destination === DLSDestinations.pitch)\n                {\n                    generators.push(new Generator(generatorTypes.vibLfoToPitch, value));\n                }\n                else\n                    // mod env to pitch\n                if (source === DLSSources.modEnv && destination === DLSDestinations.pitch)\n                {\n                    generators.push(new Generator(generatorTypes.modEnvToPitch, value));\n                }\n                else\n                    // mod env to filter\n                if (source === DLSSources.modEnv && destination === DLSDestinations.filterCutoff)\n                {\n                    generators.push(new Generator(generatorTypes.modEnvToFilterFc, value));\n                }\n                else\n                    // key to vol env hold\n                if (source === DLSSources.keyNum && destination === DLSDestinations.volEnvHold)\n                {\n                    // according to viena and another strange (with modulators) rendition of gm.dls in sf2,\n                    // it shall be divided by -128\n                    // and a strange correction needs to be applied to the real value:\n                    // real + (60 / 128) * scale\n                    generators.push(new Generator(generatorTypes.keyNumToVolEnvHold, value / -128));\n                    const correction = Math.round((60 / 128) * value);\n                    generators.forEach(g =>\n                    {\n                        if (g.generatorType === generatorTypes.holdVolEnv)\n                        {\n                            g.generatorValue += correction;\n                        }\n                    });\n                }\n                else\n                    // key to vol env decay\n                if (source === DLSSources.keyNum && destination === DLSDestinations.volEnvDecay)\n                {\n                    // according to viena and another strange (with modulators) rendition of gm.dls in sf2,\n                    // it shall be divided by -128\n                    // and a strange correction needs to be applied to the real value:\n                    // real + (60 / 128) * scale\n                    generators.push(new Generator(generatorTypes.keyNumToVolEnvDecay, value / -128));\n                    const correction = Math.round((60 / 128) * value);\n                    generators.forEach(g =>\n                    {\n                        if (g.generatorType === generatorTypes.decayVolEnv)\n                        {\n                            g.generatorValue += correction;\n                        }\n                    });\n                }\n                else\n                    // key to mod env hold\n                if (source === DLSSources.keyNum && destination === DLSDestinations.modEnvHold)\n                {\n                    // according to viena and another strange (with modulators) rendition of gm.dls in sf2,\n                    // it shall be divided by -128\n                    // and a strange correction needs to be applied to the real value:\n                    // real + (60 / 128) * scale\n                    generators.push(new Generator(generatorTypes.keyNumToModEnvHold, value / -128));\n                    const correction = Math.round((60 / 128) * value);\n                    generators.forEach(g =>\n                    {\n                        if (g.generatorType === generatorTypes.holdModEnv)\n                        {\n                            g.generatorValue += correction;\n                        }\n                    });\n                }\n                else\n                    // key to mod env decay\n                if (source === DLSSources.keyNum && destination === DLSDestinations.modEnvDecay)\n                {\n                    // according to viena and another strange (with modulators) rendition of gm.dls in sf2,\n                    // it shall be divided by -128\n                    // and a strange correction needs to be applied to the real value:\n                    // real + (60 / 128) * scale\n                    generators.push(new Generator(generatorTypes.keyNumToModEnvDecay, value / -128));\n                    const correction = Math.round((60 / 128) * value);\n                    generators.forEach(g =>\n                    {\n                        if (g.generatorType === generatorTypes.decayModEnv)\n                        {\n                            g.generatorValue += correction;\n                        }\n                    });\n                }\n                else\n                {\n                    isGenerator = false;\n                }\n                \n            }\n            else\n            {\n                isGenerator = false;\n            }\n            if (isGenerator === false)\n            {\n                // UNCOMMENT TO ENABLE DEBUG\n                // modulatorConverterDebug(source, control, destination, value, transform)\n                // convert it to modulator\n                const mod = getSF2ModulatorFromArticulator(\n                    source,\n                    control,\n                    destination,\n                    transform,\n                    value\n                );\n                if (mod)\n                {\n                    // some articulators cannot be turned into modulators, that's why this check is a thing\n                    modulators.push(mod);\n                    SpessaSynthInfo(\"%cSucceeded converting to SF2 Modulator!\", consoleColors.recognized);\n                }\n                else\n                {\n                    SpessaSynthWarn(\"Failed converting to SF2 Modulator!\");\n                }\n            }\n        }\n    }\n    \n    // override reverb and chorus with 1000 instead of 200 (if not overriden)\n    // reverb\n    if (modulators.find(m => m.modulatorDestination === generatorTypes.reverbEffectsSend) === undefined)\n    {\n        modulators.push(new Modulator({\n            srcEnum: 0x00DB,\n            dest: generatorTypes.reverbEffectsSend,\n            amt: 1000,\n            secSrcEnum: 0x0,\n            transform: 0\n        }));\n    }\n    // chorus\n    if (modulators.find(m => m.modulatorDestination === generatorTypes.chorusEffectsSend) === undefined)\n    {\n        modulators.push(new Modulator({\n            srcEnum: 0x00DD,\n            dest: generatorTypes.chorusEffectsSend,\n            amt: 1000,\n            secSrcEnum: 0x0,\n            transform: 0\n        }));\n    }\n    \n    // it seems that dls 1 does not have vibrato lfo, so we shall disable it\n    if (disableVibrato)\n    {\n        modulators.push(\n            // mod to vib\n            new Modulator({\n                srcEnum: 0x0081,\n                dest: generatorTypes.vibLfoToPitch,\n                amt: 0,\n                secSrcEnum: 0x0,\n                transform: 0\n            }),\n            // press to vib\n            new Modulator({\n                srcEnum: 0x000D,\n                dest: generatorTypes.vibLfoToPitch,\n                amt: 0,\n                secSrcEnum: 0x0,\n                transform: 0\n            })\n        );\n    }\n    \n    return { modulators: modulators, generators: generators };\n}", "import { readRIFFChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { readArticulation } from \"./read_articulation.js\";\n\n/**\n * @param lartChunk {RiffChunk|undefined}\n * @param lar2Chunk {RiffChunk|undefined}\n * @param zone {BasicInstrumentZone}\n * @this {DLSSoundFont}\n */\nexport function readLart(lartChunk, lar2Chunk, zone)\n{\n    if (lartChunk)\n    {\n        while (lartChunk.chunkData.currentIndex < lartChunk.chunkData.length)\n        {\n            const art1 = readRIFFChunk(lartChunk.chunkData);\n            this.verifyHeader(art1, \"art1\");\n            const modsAndGens = readArticulation(art1, true);\n            zone.generators.push(...modsAndGens.generators);\n            zone.modulators.push(...modsAndGens.modulators);\n        }\n    }\n    \n    if (lar2Chunk)\n    {\n        while (lar2Chunk.chunkData.currentIndex < lar2Chunk.chunkData.length)\n        {\n            const art2 = readRIFFChunk(lar2Chunk.chunkData);\n            this.verifyHeader(art2, \"art2\");\n            const modsAndGens = readArticulation(art2, false);\n            zone.generators.push(...modsAndGens.generators);\n            zone.modulators.push(...modsAndGens.modulators);\n        }\n    }\n}", "import { BasicInstrumentZone } from \"../basic_soundfont/basic_zones.js\";\nimport { Generator, generatorTypes } from \"../basic_soundfont/generator.js\";\n\nexport class DLSZone extends BasicInstrumentZone\n{\n    /**\n     * @param keyRange {SoundFontRange}\n     * @param velRange {SoundFontRange}\n     */\n    constructor(keyRange, velRange)\n    {\n        super();\n        this.keyRange = keyRange;\n        this.velRange = velRange;\n        this.isGlobal = true;\n    }\n    \n    /**\n     * @param attenuationCb {number} with EMU correction\n     * @param loopingMode {number} the sfont one\n     * @param loop {{start: number, end: number}}\n     * @param sampleKey {number}\n     * @param sample {BasicSample}\n     * @param sampleID {number}\n     * @param samplePitchCorrection {number} cents\n     */\n    setWavesample(\n        attenuationCb,\n        loopingMode,\n        loop,\n        sampleKey,\n        sample,\n        sampleID,\n        samplePitchCorrection\n    )\n    {\n        if (loopingMode !== 0)\n        {\n            this.generators.push(new Generator(generatorTypes.sampleModes, loopingMode));\n        }\n        this.generators.push(new Generator(generatorTypes.initialAttenuation, attenuationCb));\n        this.isGlobal = false;\n        \n        // correct tuning if needed\n        samplePitchCorrection -= sample.samplePitchCorrection;\n        const coarseTune = Math.trunc(samplePitchCorrection / 100);\n        if (coarseTune !== 0)\n        {\n            this.generators.push(new Generator(generatorTypes.coarseTune, coarseTune));\n        }\n        const fineTune = samplePitchCorrection - (coarseTune * 100);\n        if (fineTune !== 0)\n        {\n            this.generators.push(new Generator(generatorTypes.fineTune, fineTune));\n        }\n        \n        // correct loop if needed\n        const diffStart = loop.start - sample.sampleLoopStartIndex;\n        const diffEnd = loop.end - sample.sampleLoopEndIndex;\n        if (diffStart !== 0)\n        {\n            const fine = diffStart % 32768;\n            this.generators.push(new Generator(generatorTypes.startloopAddrsOffset, fine));\n            // coarse generator uses 32768 samples per step\n            const coarse = Math.trunc(diffStart / 32768);\n            if (coarse !== 0)\n            {\n                this.generators.push(new Generator(generatorTypes.startloopAddrsCoarseOffset, coarse));\n            }\n        }\n        if (diffEnd !== 0)\n        {\n            const fine = diffEnd % 32768;\n            this.generators.push(new Generator(generatorTypes.endloopAddrsOffset, fine));\n            // coarse generator uses 32768 samples per step\n            const coarse = Math.trunc(diffEnd / 32768);\n            if (coarse !== 0)\n            {\n                this.generators.push(new Generator(generatorTypes.endloopAddrsCoarseOffset, coarse));\n            }\n        }\n        // correct key if needed\n        if (sampleKey !== sample.samplePitch)\n        {\n            this.generators.push(new Generator(generatorTypes.overridingRootKey, sampleKey));\n        }\n        // add sample ID\n        this.generators.push(new Generator(generatorTypes.sampleID, sampleID));\n        this.sample = sample;\n        sample.useCount++;\n    }\n}", "import { readLittleEndian, signedInt16 } from \"../../utils/byte_functions/little_endian.js\";\nimport { findRIFFListType, readRIFFChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { DLSZone } from \"./dls_zone.js\";\nimport { Generator, generatorTypes } from \"../basic_soundfont/generator.js\";\n\n/**\n * @this {DLSSoundFont}\n * @param chunk {RiffChunk}\n * @returns {DLSZone}\n */\nexport function readRegion(chunk)\n{\n    // regions are essentially instrument zones\n    \n    /**\n     * read chunks in the region\n     * @type {RiffChunk[]}\n     */\n    const regionChunks = [];\n    while (chunk.chunkData.length > chunk.chunkData.currentIndex)\n    {\n        regionChunks.push(readRIFFChunk(chunk.chunkData));\n    }\n    \n    // region header\n    const regionHeader = regionChunks.find(c => c.header === \"rgnh\");\n    // key range\n    const keyMin = readLittleEndian(regionHeader.chunkData, 2);\n    const keyMax = readLittleEndian(regionHeader.chunkData, 2);\n    // vel range\n    const velMin = readLittleEndian(regionHeader.chunkData, 2);\n    const velMax = readLittleEndian(regionHeader.chunkData, 2);\n    \n    const zone = new DLSZone(\n        { min: keyMin, max: keyMax },\n        { min: velMin, max: velMax }\n    );\n    \n    // fusOptions: no idea about that one???\n    readLittleEndian(regionHeader.chunkData, 2);\n    \n    // keyGroup: essentially exclusive class\n    const exclusive = readLittleEndian(regionHeader.chunkData, 2);\n    if (exclusive !== 0)\n    {\n        zone.generators.push(new Generator(generatorTypes.exclusiveClass, exclusive));\n    }\n    \n    // lart\n    const lart = findRIFFListType(regionChunks, \"lart\");\n    const lar2 = findRIFFListType(regionChunks, \"lar2\");\n    this.readLart(lart, lar2, zone);\n    \n    // wsmpl: wave sample chunk\n    zone.isGlobal = false;\n    const waveSampleChunk = regionChunks.find(c => c.header === \"wsmp\");\n    // cbSize\n    readLittleEndian(waveSampleChunk.chunkData, 4);\n    const originalKey = readLittleEndian(waveSampleChunk.chunkData, 2);\n    \n    // sFineTune\n    const pitchCorrection = signedInt16(\n        waveSampleChunk.chunkData[waveSampleChunk.chunkData.currentIndex++],\n        waveSampleChunk.chunkData[waveSampleChunk.chunkData.currentIndex++]\n    );\n    \n    // gain correction:  Each unit of gain represents 1/655360 dB\n    // it is set after linking the sample\n    const gainCorrection = readLittleEndian(waveSampleChunk.chunkData, 4);\n    // convert to signed and turn into attenuation (invert)\n    const dbCorrection = (gainCorrection | 0) / -655360;\n    \n    // skip options\n    readLittleEndian(waveSampleChunk.chunkData, 4);\n    \n    // read loop count (always one or zero)\n    const loopsAmount = readLittleEndian(waveSampleChunk.chunkData, 4);\n    let loopingMode;\n    const loop = { start: 0, end: 0 };\n    if (loopsAmount === 0)\n    {\n        // no loop\n        loopingMode = 0;\n    }\n    else\n    {\n        // ignore cbSize\n        readLittleEndian(waveSampleChunk.chunkData, 4);\n        // loop type: loop normally or loop until release (like soundfont)\n        const loopType = readLittleEndian(waveSampleChunk.chunkData, 4); // why is it long???\n        if (loopType === 0)\n        {\n            loopingMode = 1;\n        }\n        else\n        {\n            loopingMode = 3;\n        }\n        loop.start = readLittleEndian(waveSampleChunk.chunkData, 4);\n        const loopLength = readLittleEndian(waveSampleChunk.chunkData, 4);\n        loop.end = loop.start + loopLength;\n    }\n    \n    // wave link\n    const waveLinkChunk = regionChunks.find(c => c.header === \"wlnk\");\n    if (waveLinkChunk === undefined)\n    {\n        // no wave link = no sample. What? Why is it even here then????\n        return undefined;\n    }\n    \n    // flags\n    readLittleEndian(waveLinkChunk.chunkData, 2);\n    // phasse group\n    readLittleEndian(waveLinkChunk.chunkData, 2);\n    // channel\n    readLittleEndian(waveLinkChunk.chunkData, 4);\n    // sampleID\n    const sampleID = readLittleEndian(waveLinkChunk.chunkData, 4);\n    /**\n     * @type {DLSSample}\n     */\n    const sample = this.samples[sampleID];\n    if (sample === undefined)\n    {\n        throw new Error(\"Invalid sample ID!\");\n    }\n    \n    // this correction overrides the sample gain correction\n    const actualDbCorrection = dbCorrection || sample.sampleDbAttenuation;\n    // convert to centibels\n    const attenuation = (actualDbCorrection * 10) / 0.4; // make sure to apply EMU correction\n    \n    zone.setWavesample(\n        attenuation, loopingMode,\n        loop,\n        originalKey,\n        sample,\n        sampleID,\n        pitchCorrection\n    );\n    return zone;\n}", "/**\n * samples.js\n * purpose: parses soundfont samples, resamples if needed.\n * loads sample data, handles async loading of sf3 compressed samples\n */\nimport { SpessaSynthWarn } from \"../../utils/loggin.js\";\n\nexport class BasicSample\n{\n    /**\n     * The basic representation of a soundfont sample\n     * @param sampleName {string}\n     * @param sampleRate {number}\n     * @param samplePitch {number}\n     * @param samplePitchCorrection {number}\n     * @param sampleLink {number}\n     * @param sampleType {number}\n     * @param loopStart {number} relative to sample start\n     * @param loopEnd {number} relative to sample start\n     */\n    constructor(\n        sampleName,\n        sampleRate,\n        samplePitch,\n        samplePitchCorrection,\n        sampleLink,\n        sampleType,\n        loopStart,\n        loopEnd\n    )\n    {\n        /**\n         * Sample's name\n         * @type {string}\n         */\n        this.sampleName = sampleName;\n        /**\n         * Sample rate in Hz\n         * @type {number}\n         */\n        this.sampleRate = sampleRate;\n        /**\n         * Original pitch of the sample as a MIDI note number\n         * @type {number}\n         */\n        this.samplePitch = samplePitch;\n        /**\n         * Pitch correction, in cents. Can be negative\n         * @type {number}\n         */\n        this.samplePitchCorrection = samplePitchCorrection;\n        /**\n         * Sample link, currently unused.\n         * @type {number}\n         */\n        this.sampleLink = sampleLink;\n        /**\n         * Type of the sample, an enum\n         * @type {number}\n         */\n        this.sampleType = sampleType;\n        /**\n         * Relative to start of the sample in sample points\n         * @type {number}\n         */\n        this.sampleLoopStartIndex = loopStart;\n        /**\n         * Relative to start of the sample in sample points\n         * @type {number}\n         */\n        this.sampleLoopEndIndex = loopEnd;\n        \n        /**\n         * Indicates if the sample is compressed\n         * @type {boolean}\n         */\n        this.isCompressed = (sampleType & 0x10) > 0;\n        \n        /**\n         * The compressed sample data if it was compressed by spessasynth\n         * @type {Uint8Array}\n         */\n        this.compressedData = undefined;\n        \n        /**\n         * The sample's use count\n         * @type {number}\n         */\n        this.useCount = 0;\n    }\n    \n    /**\n     * @returns {Uint8Array|IndexedByteArray}\n     */\n    getRawData()\n    {\n        const e = new Error(\"Not implemented\");\n        e.name = \"NotImplementedError\";\n        throw e;\n    }\n    \n    /**\n     * @param quality {number}\n     * @param encodeVorbis {EncodeVorbisFunction}\n     */\n    compressSample(quality, encodeVorbis)\n    {\n        // no need to compress\n        if (this.isCompressed)\n        {\n            return;\n        }\n        // compress, always mono!\n        try\n        {\n            this.compressedData = encodeVorbis([this.getAudioData()], 1, this.sampleRate, quality);\n            // flag as compressed\n            this.sampleType |= 0x10;\n            this.isCompressed = true;\n        }\n        catch (e)\n        {\n            SpessaSynthWarn(`Failed to compress ${this.sampleName}. Leaving as uncompressed!`);\n            this.isCompressed = false;\n            this.compressedData = undefined;\n            this.sampleType &= -17;\n        }\n        \n    }\n    \n    /**\n     * @returns {Float32Array}\n     */\n    getAudioData()\n    {\n        const e = new Error(\"Not implemented\");\n        e.name = \"NotImplementedError\";\n        throw e;\n    }\n}", "import { BasicSample } from \"../basic_soundfont/basic_sample.js\";\n\nexport class DLSSample extends BasicSample\n{\n    /**\n     * in decibels of attenuation, WITHOUT EMU CORRECTION\n     * @type {number}\n     */\n    sampleDbAttenuation;\n    /**\n     * @type {Float32Array}\n     */\n    sampleData;\n    \n    /**\n     * @param name {string}\n     * @param rate {number}\n     * @param pitch {number}\n     * @param pitchCorrection {number}\n     * @param loopStart {number} sample data points\n     * @param loopEnd {number} sample data points\n     * @param data {Float32Array}\n     * @param sampleDbAttenuation {number} in db\n     */\n    constructor(\n        name,\n        rate,\n        pitch,\n        pitchCorrection,\n        loopStart,\n        loopEnd,\n        data,\n        sampleDbAttenuation\n    )\n    {\n        super(\n            name,\n            rate,\n            pitch,\n            pitchCorrection,\n            0,\n            1,\n            loopStart,\n            loopEnd - 1 // -1 sample because soundfont end is last sample and dls end is next sample\n        );\n        this.sampleData = data;\n        this.sampleDbAttenuation = sampleDbAttenuation;\n    }\n    \n    getAudioData()\n    {\n        return this.sampleData;\n    }\n    \n    getRawData()\n    {\n        if (this.isCompressed)\n        {\n            if (!this.compressedData)\n            {\n                throw new Error(\"Compressed but no data?? This shouldn't happen!!\");\n            }\n            return this.compressedData;\n        }\n        const uint8 = new Uint8Array(this.sampleData.length * 2);\n        for (let i = 0; i < this.sampleData.length; i++)\n        {\n            const sample = Math.floor(this.sampleData[i] * 32767);\n            uint8[i * 2] = sample & 0xFF; // lower byte\n            uint8[i * 2 + 1] = (sample >> 8) & 0xFF; // upper byte\n        }\n        return uint8;\n    }\n}", "import { findRIFFListType, readRIFFChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { readBytesAsString } from \"../../utils/byte_functions/string.js\";\nimport {\n    SpessaSynthGroupCollapsed,\n    SpessaSynthGroupEnd,\n    SpessaSynthInfo,\n    SpessaSynthWarn\n} from \"../../utils/loggin.js\";\nimport { consoleColors } from \"../../utils/other.js\";\nimport { readLittleEndian, signedInt16 } from \"../../utils/byte_functions/little_endian.js\";\nimport { DLSSample } from \"./dls_sample.js\";\n\n/**\n * @this {DLSSoundFont}\n * @param waveListChunk {RiffChunk}\n */\nexport function readDLSSamples(waveListChunk)\n{\n    SpessaSynthGroupCollapsed(\n        \"%cLoading Wave samples...\",\n        consoleColors.recognized\n    );\n    let sampleID = 0;\n    while (waveListChunk.chunkData.currentIndex < waveListChunk.chunkData.length)\n    {\n        const waveChunk = readRIFFChunk(waveListChunk.chunkData);\n        this.verifyHeader(waveChunk, \"LIST\");\n        this.verifyText(readBytesAsString(waveChunk.chunkData, 4), \"wave\");\n        \n        /**\n         * @type {RiffChunk[]}\n         */\n        const waveChunks = [];\n        while (waveChunk.chunkData.currentIndex < waveChunk.chunkData.length)\n        {\n            waveChunks.push(readRIFFChunk(waveChunk.chunkData));\n        }\n        \n        const fmtChunk = waveChunks.find(c => c.header === \"fmt \");\n        if (!fmtChunk)\n        {\n            throw new Error(\"No fmt chunk in the wave file!\");\n        }\n        // https://github.com/tpn/winsdk-10/blob/9b69fd26ac0c7d0b83d378dba01080e93349c2ed/Include/10.0.14393.0/shared/mmreg.h#L2108\n        const waveFormat = readLittleEndian(fmtChunk.chunkData, 2);\n        if (waveFormat !== 1)\n        {\n            throw new Error(`Only PCM format in WAVE is supported. Fmt reports ${waveFormat}`);\n        }\n        const channelsAmount = readLittleEndian(fmtChunk.chunkData, 2);\n        if (channelsAmount !== 1)\n        {\n            throw new Error(`Only mono samples are supported. Fmt reports ${channelsAmount} channels`);\n        }\n        const sampleRate = readLittleEndian(fmtChunk.chunkData, 4);\n        // skip avg bytes\n        readLittleEndian(fmtChunk.chunkData, 4);\n        // blockAlign\n        readLittleEndian(fmtChunk.chunkData, 2);\n        // it's bits per sample because one channel\n        const wBitsPerSample = readLittleEndian(fmtChunk.chunkData, 2);\n        const bytesPerSample = wBitsPerSample / 8;\n        \n        const maxSampleValue = Math.pow(2, bytesPerSample * 8 - 1); // Max value for the sample\n        const maxUnsigned = Math.pow(2, bytesPerSample * 8);\n        \n        let normalizationFactor;\n        let isUnsigned = false;\n        \n        if (wBitsPerSample === 8)\n        {\n            normalizationFactor = 255; // For 8-bit normalize from 0-255\n            isUnsigned = true;\n        }\n        else\n        {\n            normalizationFactor = maxSampleValue; // For 16-bit normalize from -32768 to 32767\n        }\n        // read the data\n        const dataChunk = waveChunks.find(c => c.header === \"data\");\n        if (!dataChunk)\n        {\n            this.parsingError(\"No data chunk in the WAVE chunk!\");\n        }\n        const sampleLength = dataChunk.size / bytesPerSample;\n        const sampleData = new Float32Array(sampleLength);\n        for (let i = 0; i < sampleData.length; i++)\n        {\n            // read\n            let sample = readLittleEndian(dataChunk.chunkData, bytesPerSample);\n            // turn into signed\n            if (isUnsigned)\n            {\n                // normalize unsigned 8-bit sample\n                sampleData[i] = (sample / normalizationFactor) - 0.5;\n            }\n            else\n            {\n                // normalize signed 16-bit sample\n                if (sample >= maxSampleValue)\n                {\n                    sample -= maxUnsigned;\n                }\n                sampleData[i] = sample / normalizationFactor;\n            }\n        }\n        \n        // sane defaults\n        let sampleKey = 60;\n        let samplePitch = 0;\n        let sampleLoopStart = 0;\n        let sampleLoopEnd = sampleData.length - 1;\n        let sampleDbAttenuation = 0;\n        \n        // read wsmp\n        const wsmpChunk = waveChunks.find(c => c.header === \"wsmp\");\n        if (wsmpChunk)\n        {\n            // skip cbsize\n            readLittleEndian(wsmpChunk.chunkData, 4);\n            sampleKey = readLittleEndian(wsmpChunk.chunkData, 2);\n            // section 1.14.2: Each relative pitch unit represents 1/65536 cents.\n            // but that doesn't seem to be true for this one: it's just cents.\n            samplePitch = signedInt16(\n                wsmpChunk.chunkData[wsmpChunk.chunkData.currentIndex++],\n                wsmpChunk.chunkData[wsmpChunk.chunkData.currentIndex++]\n            );\n            // gain is applied it manually here (literally multiplying the samples)\n            const gainCorrection = readLittleEndian(wsmpChunk.chunkData, 4);\n            // convert to signed and turn into decibels\n            sampleDbAttenuation = (gainCorrection | 0) / -655360;\n            // no idea about ful options\n            readLittleEndian(wsmpChunk.chunkData, 4);\n            const loopsAmount = readLittleEndian(wsmpChunk.chunkData, 4);\n            if (loopsAmount === 1)\n            {\n                // skip size and type\n                readLittleEndian(wsmpChunk.chunkData, 8);\n                sampleLoopStart = readLittleEndian(wsmpChunk.chunkData, 4);\n                const loopSize = readLittleEndian(wsmpChunk.chunkData, 4);\n                sampleLoopEnd = sampleLoopStart + loopSize;\n            }\n        }\n        else\n        {\n            SpessaSynthWarn(\"No wsmp chunk in wave... using sane defaults.\");\n        }\n        \n        // read sample name\n        const waveInfo = findRIFFListType(waveChunks, \"INFO\");\n        let sampleName = `Unnamed ${sampleID}`;\n        if (waveInfo)\n        {\n            let infoChunk = readRIFFChunk(waveInfo.chunkData);\n            while (infoChunk.header !== \"INAM\" && waveInfo.chunkData.currentIndex < waveInfo.chunkData.length)\n            {\n                infoChunk = readRIFFChunk(waveInfo.chunkData);\n            }\n            if (infoChunk.header === \"INAM\")\n            {\n                sampleName = readBytesAsString(infoChunk.chunkData, infoChunk.size).trim();\n            }\n        }\n        \n        this.samples.push(new DLSSample(\n            sampleName,\n            sampleRate,\n            sampleKey,\n            samplePitch,\n            sampleLoopStart,\n            sampleLength,\n            sampleData,\n            sampleDbAttenuation\n        ));\n        \n        sampleID++;\n        SpessaSynthInfo(\n            `%cLoaded sample %c${sampleName}`,\n            consoleColors.info,\n            consoleColors.recognized\n        );\n    }\n    SpessaSynthGroupEnd();\n}", "import { BasicSoundFont } from \"../basic_soundfont/basic_soundfont.js\";\nimport { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { SpessaSynthGroup, SpessaSynthGroupEnd, SpessaSynthInfo } from \"../../utils/loggin.js\";\nimport { consoleColors } from \"../../utils/other.js\";\nimport { findRIFFListType, readRIFFChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { readBytesAsString } from \"../../utils/byte_functions/string.js\";\nimport { readLittleEndian } from \"../../utils/byte_functions/little_endian.js\";\nimport { readDLSInstrumentList } from \"./read_instrument_list.js\";\nimport { readDLSInstrument } from \"./read_instrument.js\";\nimport { readLart } from \"./read_lart.js\";\nimport { readRegion } from \"./read_region.js\";\nimport { readDLSSamples } from \"./read_samples.js\";\n\nclass DLSSoundFont extends BasicSoundFont\n{\n    /**\n     * Loads a new DLS (Downloadable sounds) soundfont\n     * @param buffer {ArrayBuffer}\n     */\n    constructor(buffer)\n    {\n        super();\n        this.dataArray = new IndexedByteArray(buffer);\n        SpessaSynthGroup(\"%cParsing DLS...\", consoleColors.info);\n        if (!this.dataArray)\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(\"No data provided!\");\n        }\n        \n        // read the main chunk\n        let firstChunk = readRIFFChunk(this.dataArray, false);\n        this.verifyHeader(firstChunk, \"riff\");\n        this.verifyText(readBytesAsString(this.dataArray, 4).toLowerCase(), \"dls \");\n        \n        /**\n         * Read list\n         * @type {RiffChunk[]}\n         */\n        const chunks = [];\n        while (this.dataArray.currentIndex < this.dataArray.length)\n        {\n            chunks.push(readRIFFChunk(this.dataArray));\n        }\n        \n        // mandatory\n        this.soundFontInfo[\"ifil\"] = \"2.1\"; // always for dls\n        this.soundFontInfo[\"isng\"] = \"EMU8000\";\n        \n        // set some defaults\n        this.soundFontInfo[\"INAM\"] = \"Unnamed DLS\";\n        this.soundFontInfo[\"IENG\"] = \"Unknown\";\n        this.soundFontInfo[\"IPRD\"] = \"SpessaSynth DLS\";\n        this.soundFontInfo[\"ICRD\"] = new Date().toDateString();\n        \n        // read info\n        const infoChunk = findRIFFListType(chunks, \"INFO\");\n        if (infoChunk)\n        {\n            while (infoChunk.chunkData.currentIndex < infoChunk.chunkData.length)\n            {\n                const infoPart = readRIFFChunk(infoChunk.chunkData);\n                this.soundFontInfo[infoPart.header] = readBytesAsString(infoPart.chunkData, infoPart.size);\n            }\n        }\n        this.soundFontInfo[\"ICMT\"] = (this.soundFontInfo[\"ICMT\"] || \"(No description)\") + \"\\nConverted from DLS to SF2 with SpessaSynth\";\n        if (this.soundFontInfo[\"ISBJ\"])\n        {\n            // merge it\n            this.soundFontInfo[\"ICMT\"] += \"\\n\" + this.soundFontInfo[\"ISBJ\"];\n            delete this.soundFontInfo[\"ISBJ\"];\n        }\n        \n        for (const [info, value] of Object.entries(this.soundFontInfo))\n        {\n            SpessaSynthInfo(\n                `%c\"${info}\": %c\"${value}\"`,\n                consoleColors.info,\n                consoleColors.recognized\n            );\n        }\n        \n        // read \"colh\"\n        let colhChunk = chunks.find(c => c.header === \"colh\");\n        if (!colhChunk)\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(\"No colh chunk!\");\n        }\n        this.instrumentAmount = readLittleEndian(colhChunk.chunkData, 4);\n        SpessaSynthInfo(\n            `%cInstruments amount: %c${this.instrumentAmount}`,\n            consoleColors.info,\n            consoleColors.recognized\n        );\n        \n        // read wave list\n        let waveListChunk = findRIFFListType(chunks, \"wvpl\");\n        if (!waveListChunk)\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(\"No wvpl chunk!\");\n        }\n        this.readDLSSamples(waveListChunk);\n        \n        // read instrument list\n        let instrumentListChunk = findRIFFListType(chunks, \"lins\");\n        if (!instrumentListChunk)\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(\"No lins chunk!\");\n        }\n        this.readDLSInstrumentList(instrumentListChunk);\n        \n        // sort presets\n        this.presets.sort((a, b) => (a.program - b.program) + (a.bank - b.bank));\n        \n        SpessaSynthInfo(\n            `%cParsing finished! %c\"${this.soundFontInfo[\"INAM\"] || \"UNNAMED\"}\"%c has %c${this.presets.length} %cpresets,\n        %c${this.instruments.length}%c instruments and %c${this.samples.length}%c samples.`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info\n        );\n        SpessaSynthGroupEnd();\n    }\n    \n    /**\n     * @param chunk {RiffChunk}\n     * @param expected {string}\n     */\n    verifyHeader(chunk, expected)\n    {\n        if (chunk.header.toLowerCase() !== expected.toLowerCase())\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(`Invalid DLS chunk header! Expected \"${expected.toLowerCase()}\" got \"${chunk.header.toLowerCase()}\"`);\n        }\n    }\n    \n    /**\n     * @param text {string}\n     * @param expected {string}\n     */\n    verifyText(text, expected)\n    {\n        if (text.toLowerCase() !== expected.toLowerCase())\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(`FourCC error: Expected \"${expected.toLowerCase()}\" got \"${text.toLowerCase()}\"`);\n        }\n    }\n    \n    /**\n     * @param error {string}\n     */\n    parsingError(error)\n    {\n        throw new Error(`DLS parse error: ${error} The file may be corrupted.`);\n    }\n}\n\nDLSSoundFont.prototype.readDLSInstrumentList = readDLSInstrumentList;\nDLSSoundFont.prototype.readDLSInstrument = readDLSInstrument;\nDLSSoundFont.prototype.readRegion = readRegion;\nDLSSoundFont.prototype.readLart = readLart;\nDLSSoundFont.prototype.readDLSSamples = readDLSSamples;\n\nexport { DLSSoundFont };", "export var stbvorbis=void 0!==stbvorbis?stbvorbis:{};let isReady=!1,readySolver;stbvorbis.isInitialized=new Promise(A=>readySolver=A);var atob=function(A){var I,g,B,E,Q,C,i,h=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",o=\"\",G=0;A=A.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\");do E=h.indexOf(A.charAt(G++)),Q=h.indexOf(A.charAt(G++)),C=h.indexOf(A.charAt(G++)),i=h.indexOf(A.charAt(G++)),I=E<<2|Q>>4,g=(15&Q)<<4|C>>2,B=(3&C)<<6|i,o+=String.fromCharCode(I),64!==C&&(o+=String.fromCharCode(g)),64!==i&&(o+=String.fromCharCode(B));while(G<A.length);return o};!function(){var A,I,g,B,E,Q,C,i,h,o,G,D,a,S,F,R,s,w,y,c,n,U,$=void 0!==$?$:{};$.wasmBinary=Uint8Array.from(atob(\"\"),function(A){return A.charCodeAt(0)});var $=void 0!==$?$:{},e={};for(A in $)$.hasOwnProperty(A)&&(e[A]=$[A]);$.arguments=[],$.thisProgram=\"./this.program\",$.quit=function(A,I){throw I},$.preRun=[],$.postRun=[];var t=!1,k=!1,N=!1,r=!1;t=\"object\"==typeof window,k=\"function\"==typeof importScripts,N=\"object\"==typeof process&&\"function\"==typeof require&&!t&&!k,r=!t&&!N&&!k;var Y=\"\";function J(A){return $.locateFile?$.locateFile(A,Y):Y+A}N?(Y=__dirname+\"/\",$.read=function A(B,E){var Q;return I||(I=undefined),g||(g=undefined),B=g.normalize(B),Q=I.readFileSync(B),E?Q:Q.toString()},$.readBinary=function A(I){var g=$.read(I,!0);return g.buffer||(g=new Uint8Array(g)),_(g.buffer),g},process.argv.length>1&&($.thisProgram=process.argv[1].replace(/\\\\/g,\"/\")),$.arguments=process.argv.slice(2),\"undefined\"!=typeof module&&(/undefined!=$/),process.on(\"uncaughtException\",function(A){if(!(A instanceof II))throw A}),process.on(\"unhandledRejection\",function(A,I){process.exit(1)}),$.quit=function(A){process.exit(A)},$.inspect=function(){return\"[Emscripten Module object]\"}):r?(\"undefined\"!=typeof read&&($.read=function A(I){return read(I)}),$.readBinary=function A(I){var g;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(I)):(_(\"object\"==typeof(g=read(I,\"binary\"))),g)},\"undefined\"!=typeof scriptArgs?$.arguments=scriptArgs:\"undefined\"!=typeof arguments&&($.arguments=arguments),\"function\"==typeof quit&&($.quit=function(A){quit(A)})):(t||k)&&(t?document.currentScript&&(Y=document.currentScript.src):Y=self.location.href,Y=0!==Y.indexOf(\"blob:\")?Y.split(\"/\").slice(0,-1).join(\"/\")+\"/\":\"\",$.read=function A(I){var g=new XMLHttpRequest;return g.open(\"GET\",I,!1),g.send(null),g.responseText},k&&($.readBinary=function A(I){var g=new XMLHttpRequest;return g.open(\"GET\",I,!1),g.responseType=\"arraybuffer\",g.send(null),new Uint8Array(g.response)}),$.readAsync=function A(I,g,B){var E=new XMLHttpRequest;E.open(\"GET\",I,!0),E.responseType=\"arraybuffer\",E.onload=function A(){if(200==E.status||0==E.status&&E.response){g(E.response);return}B()},E.onerror=B,E.send(null)},$.setWindowTitle=function(A){document.title=A});var f=$.print||(\"undefined\"!=typeof console?console.log.bind(console):\"undefined\"!=typeof print?print:null),H=$.printErr||(\"undefined\"!=typeof printErr?printErr:\"undefined\"!=typeof console&&console.warn.bind(console)||f);for(A in e)e.hasOwnProperty(A)&&($[A]=e[A]);function L(A){var I=S;return S=S+A+15&-16,I}function M(A){var I=h[c>>2],g=I+A+15&-16;return(h[c>>2]=g,g>=AN&&!Ae())?(h[c>>2]=I,0):I}function d(A,I){return I||(I=16),A=Math.ceil(A/I)*I}function q(A){switch(A){case\"i1\":case\"i8\":return 1;case\"i16\":return 2;case\"i32\":case\"float\":return 4;case\"i64\":case\"double\":return 8;default:if(\"*\"===A[A.length-1])return 4;if(\"i\"!==A[0])return 0;var I=parseInt(A.substr(1));return _(I%8==0),I/8}}function K(A){K.shown||(K.shown={}),K.shown[A]||(K.shown[A]=1,H(A))}e=void 0;var l={\"f64-rem\":function(A,I){return A%I},debugger:function(){}},u=[];function b(A,I){for(var g=0,B=g;B<g+0;B++)if(!u[B])return u[B]=A,1+B;throw\"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.\"}function X(A){u[A-1]=null}var m={};function Z(A,I){if(A){_(I),m[I]||(m[I]={});var g=m[I];return g[A]||(1===I.length?g[A]=function g(){return V(I,A)}:2===I.length?g[A]=function g(B){return V(I,A,[B])}:g[A]=function g(){return V(I,A,Array.prototype.slice.call(arguments))}),g[A]}}function x(A,I,g){return g?+(A>>>0)+4294967296*+(I>>>0):+(A>>>0)+4294967296*+(0|I)}function V(A,I,g){return g&&g.length?$[\"dynCall_\"+A].apply(null,[I].concat(g)):$[\"dynCall_\"+A].call(null,I)}var p=0,W=0;function _(A,I){A||IE(\"Assertion failed: \"+I)}function T(A){var I=$[\"_\"+A];return _(I,\"Cannot call unknown function \"+A+\", make sure it is exported\"),I}var v={stackSave:function(){IA()},stackRestore:function(){A9()},arrayToC:function(A){var I,g,B=A5(A.length);return I=A,g=B,E.set(I,g),B},stringToC:function(A){var I=0;if(null!=A&&0!==A){var g=(A.length<<2)+1;I=A5(g),Ai(A,I,g)}return I}},O={string:v.stringToC,array:v.arrayToC};function j(A,I,g,B,E){var Q=T(A),C=[],i=0;if(B)for(var h=0;h<B.length;h++){var o=O[g[h]];o?(0===i&&(i=IA()),C[h]=o(B[h])):C[h]=B[h]}var G,D=Q.apply(null,C);return D=(G=D,\"string\"===I?Ag(G):\"boolean\"===I?Boolean(G):G),0!==i&&A9(i),D}function P(A,I,g,B){switch(\"*\"===(g=g||\"i8\").charAt(g.length-1)&&(g=\"i32\"),g){case\"i1\":case\"i8\":E[A>>0]=I;break;case\"i16\":C[A>>1]=I;break;case\"i32\":h[A>>2]=I;break;case\"i64\":tempI64=[I>>>0,+Ax(tempDouble=I)>=1?tempDouble>0?(0|Ap(+A6(tempDouble/4294967296),4294967295))>>>0:~~+AV((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0,],h[A>>2]=tempI64[0],h[A+4>>2]=tempI64[1];break;case\"float\":G[A>>2]=I;break;case\"double\":D[A>>3]=I;break;default:IE(\"invalid type for setValue: \"+g)}}function z(A,I,g){switch(\"*\"===(I=I||\"i8\").charAt(I.length-1)&&(I=\"i32\"),I){case\"i1\":case\"i8\":return E[A>>0];case\"i16\":return C[A>>1];case\"i32\":case\"i64\":return h[A>>2];case\"float\":return G[A>>2];case\"double\":return D[A>>3];default:IE(\"invalid type for getValue: \"+I)}return null}function AA(A,I,g,B){\"number\"==typeof A?(i=!0,o=A):(i=!1,o=A.length);var C=\"string\"==typeof I?I:null;if(G=4==g?B:[\"function\"==typeof A8?A8:L,A5,L,M,][void 0===g?2:g](Math.max(o,C?1:I.length)),i){for(B=G,_((3&G)==0),D=G+(-4&o);B<D;B+=4)h[B>>2]=0;for(D=G+o;B<D;)E[B++>>0]=0;return G}if(\"i8\"===C)return A.subarray||A.slice?Q.set(A,G):Q.set(new Uint8Array(A),G),G;for(var i,o,G,D,a,S,F,R=0;R<o;){var s=A[R];if(0===(a=C||I[R])){R++;continue}\"i64\"==a&&(a=\"i32\"),P(G+R,s,a),F!==a&&(S=q(a),F=a),R+=S}return G}function AI(A){return F?A0?A8(A):M(A):L(A)}function Ag(A,I){if(0===I||!A)return\"\";for(var g,B,E,C=0,i=0;C|=B=Q[A+i>>0],(0!=B||I)&&(i++,!I||i!=I););I||(I=i);var h=\"\";if(C<128){for(;I>0;)E=String.fromCharCode.apply(String,Q.subarray(A,A+Math.min(I,1024))),h=h?h+E:E,A+=1024,I-=1024;return h}return g=A,function A(I,g){for(var B=g;I[B];)++B;if(B-g>16&&I.subarray&&AQ)return AQ.decode(I.subarray(g,B));for(var E,Q,C,i,h,o,G=\"\";;){if(!(E=I[g++]))return G;if(!(128&E)){G+=String.fromCharCode(E);continue}if(Q=63&I[g++],(224&E)==192){G+=String.fromCharCode((31&E)<<6|Q);continue}if(C=63&I[g++],(240&E)==224?E=(15&E)<<12|Q<<6|C:(i=63&I[g++],(248&E)==240?E=(7&E)<<18|Q<<12|C<<6|i:(h=63&I[g++],E=(252&E)==248?(3&E)<<24|Q<<18|C<<12|i<<6|h:(1&E)<<30|Q<<24|C<<18|i<<12|h<<6|(o=63&I[g++]))),E<65536)G+=String.fromCharCode(E);else{var D=E-65536;G+=String.fromCharCode(55296|D>>10,56320|1023&D)}}}(Q,g)}function AB(A){for(var I=\"\";;){var g=E[A++>>0];if(!g)return I;I+=String.fromCharCode(g)}}function AE(A,I){return function A(I,g,B){for(var Q=0;Q<I.length;++Q)E[g++>>0]=I.charCodeAt(Q);B||(E[g>>0]=0)}(A,I,!1)}var AQ=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function AC(A,I,g,B){if(!(B>0))return 0;for(var E=g,Q=g+B-1,C=0;C<A.length;++C){var i=A.charCodeAt(C);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&A.charCodeAt(++C)),i<=127){if(g>=Q)break;I[g++]=i}else if(i<=2047){if(g+1>=Q)break;I[g++]=192|i>>6,I[g++]=128|63&i}else if(i<=65535){if(g+2>=Q)break;I[g++]=224|i>>12,I[g++]=128|i>>6&63,I[g++]=128|63&i}else if(i<=2097151){if(g+3>=Q)break;I[g++]=240|i>>18,I[g++]=128|i>>12&63,I[g++]=128|i>>6&63,I[g++]=128|63&i}else if(i<=67108863){if(g+4>=Q)break;I[g++]=248|i>>24,I[g++]=128|i>>18&63,I[g++]=128|i>>12&63,I[g++]=128|i>>6&63,I[g++]=128|63&i}else{if(g+5>=Q)break;I[g++]=252|i>>30,I[g++]=128|i>>24&63,I[g++]=128|i>>18&63,I[g++]=128|i>>12&63,I[g++]=128|i>>6&63,I[g++]=128|63&i}}return I[g]=0,g-E}function Ai(A,I,g){return AC(A,Q,I,g)}function Ah(A){for(var I=0,g=0;g<A.length;++g){var B=A.charCodeAt(g);B>=55296&&B<=57343&&(B=65536+((1023&B)<<10)|1023&A.charCodeAt(++g)),B<=127?++I:B<=2047?I+=2:B<=65535?I+=3:B<=2097151?I+=4:B<=67108863?I+=5:I+=6}return I}var Ao=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function AG(A){for(var I=A,g=I>>1;C[g];)++g;if((I=g<<1)-A>32&&Ao)return Ao.decode(Q.subarray(A,I));for(var B=0,E=\"\";;){var i=C[A+2*B>>1];if(0==i)return E;++B,E+=String.fromCharCode(i)}}function AD(A,I,g){if(void 0===g&&(g=2147483647),g<2)return 0;for(var B=I,E=(g-=2)<2*A.length?g/2:A.length,Q=0;Q<E;++Q){var i=A.charCodeAt(Q);C[I>>1]=i,I+=2}return C[I>>1]=0,I-B}function Aa(A){return 2*A.length}function AS(A){for(var I=0,g=\"\";;){var B=h[A+4*I>>2];if(0==B)return g;if(++I,B>=65536){var E=B-65536;g+=String.fromCharCode(55296|E>>10,56320|1023&E)}else g+=String.fromCharCode(B)}}function AF(A,I,g){if(void 0===g&&(g=2147483647),g<4)return 0;for(var B=I,E=B+g-4,Q=0;Q<A.length;++Q){var C=A.charCodeAt(Q);if(C>=55296&&C<=57343&&(C=65536+((1023&C)<<10)|1023&A.charCodeAt(++Q)),h[I>>2]=C,(I+=4)+4>E)break}return h[I>>2]=0,I-B}function AR(A){for(var I=0,g=0;g<A.length;++g){var B=A.charCodeAt(g);B>=55296&&B<=57343&&++g,I+=4}return I}function As(A){var I=Ah(A)+1,g=A8(I);return g&&AC(A,E,g,I),g}function Aw(A){var I=Ah(A)+1,g=A5(I);return AC(A,E,g,I),g}function Ay(A){return A}function Ac(){var A,I=function A(){var I=Error();if(!I.stack){try{throw Error(0)}catch(g){I=g}if(!I.stack)return\"(no stack trace available)\"}return I.stack.toString()}();return $.extraStackTrace&&(I+=\"\\n\"+$.extraStackTrace()),(A=I).replace(/__Z[\\w\\d_]+/g,function(A){var I,g=I=A;return A===g?A:A+\" [\"+g+\"]\"})}function An(A,I){return A%I>0&&(A+=I-A%I),A}function AU(A){$.buffer=B=A}function A$(){$.HEAP8=E=new Int8Array(B),$.HEAP16=C=new Int16Array(B),$.HEAP32=h=new Int32Array(B),$.HEAPU8=Q=new Uint8Array(B),$.HEAPU16=i=new Uint16Array(B),$.HEAPU32=o=new Uint32Array(B),$.HEAPF32=G=new Float32Array(B),$.HEAPF64=D=new Float64Array(B)}function Ae(){var A=$.usingWasm?65536:16777216,I=2147483648-A;if(h[c>>2]>I)return!1;var g=AN;for(AN=Math.max(AN,16777216);AN<h[c>>2];)AN=AN<=536870912?An(2*AN,A):Math.min(An((3*AN+2147483648)/4,A),I);var B=$.reallocBuffer(AN);return B&&B.byteLength==AN?(AU(B),A$(),!0):(AN=g,!1)}a=S=R=s=w=y=c=0,F=!1,$.reallocBuffer||($.reallocBuffer=function(A){try{if(ArrayBuffer.transfer)I=ArrayBuffer.transfer(B,A);else{var I,g=E;I=new ArrayBuffer(A),new Int8Array(I).set(g)}}catch(Q){return!1}return!!Az(I)&&I});try{(n=Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype,\"byteLength\").get))(new ArrayBuffer(4))}catch(At){n=function(A){return A.byteLength}}var Ak=$.TOTAL_STACK||5242880,AN=$.TOTAL_MEMORY||16777216;function Ar(){return AN}function AY(A){for(;A.length>0;){var I=A.shift();if(\"function\"==typeof I){I();continue}var g=I.func;\"number\"==typeof g?void 0===I.arg?$.dynCall_v(g):$.dynCall_vi(g,I.arg):g(void 0===I.arg?null:I.arg)}}AN<Ak&&H(\"TOTAL_MEMORY should be larger than TOTAL_STACK, was \"+AN+\"! (TOTAL_STACK=\"+Ak+\")\"),$.buffer?B=$.buffer:(\"object\"==typeof WebAssembly&&\"function\"==typeof WebAssembly.Memory?($.wasmMemory=new WebAssembly.Memory({initial:AN/65536}),B=$.wasmMemory.buffer):B=new ArrayBuffer(AN),$.buffer=B),A$();var AJ=[],Af=[],AH=[],AL=[],AM=[],A0=!1,Ad=!1;function Aq(A){AJ.unshift(A)}function AK(A){Af.unshift(A)}function Al(A){AH.unshift(A)}function Au(A){AL.unshift(A)}function Ab(A){AM.unshift(A)}function AX(A,I,g){var B,Q;K(\"writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!\"),g&&(B=E[Q=I+Ah(A)]),Ai(A,I,1/0),g&&(E[Q]=B)}function Am(A,I,g){return A>=0?A:I<=32?2*Math.abs(1<<I-1)+A:Math.pow(2,I)+A}function AZ(A,I,g){if(A<=0)return A;var B=I<=32?Math.abs(1<<I-1):Math.pow(2,I-1);return A>=B&&(I<=32||A>B)&&(A=-2*B+A),A}var Ax=Math.abs,AV=Math.ceil,A6=Math.floor,Ap=Math.min,A7=0,A1=null,AW=null;function A_(A){return A}$.preloadedImages={},$.preloadedAudios={};var AT=\"data:application/octet-stream;base64,\";function A2(A){return String.prototype.startsWith?A.startsWith(AT):0===A.indexOf(AT)}!function A(){var I=\"main.wast\",g=\"main.wasm\",B=\"main.temp.asm.js\";A2(I)||(I=J(I)),A2(g)||(g=J(g)),A2(B)||(B=J(B));var E={global:null,env:null,asm2wasm:l,parent:$},Q=null;function C(A){return A}function i(){try{if($.wasmBinary)return new Uint8Array($.wasmBinary);if($.readBinary)return $.readBinary(g);throw\"both async and sync fetching of the wasm failed\"}catch(A){IE(A)}}$.asmPreload=$.asm;var h=$.reallocBuffer,o=function(A){A=An(A,$.usingWasm?65536:16777216);var I=$.buffer.byteLength;if($.usingWasm)try{var g=$.wasmMemory.grow((A-I)/65536);if(-1!==g)return $.buffer=$.wasmMemory.buffer;return null}catch(B){return null}};$.reallocBuffer=function(A){return\"asmjs\"===G?h(A):o(A)};var G=\"\";$.asm=function(A,I,B){var C;if(!(I=C=I).table){var h,o=$.wasmTableSize;void 0===o&&(o=1024);var G=$.wasmMaxTableSize;\"object\"==typeof WebAssembly&&\"function\"==typeof WebAssembly.Table?void 0!==G?I.table=new WebAssembly.Table({initial:o,maximum:G,element:\"anyfunc\"}):I.table=new WebAssembly.Table({initial:o,element:\"anyfunc\"}):I.table=Array(o),$.wasmTable=I.table}return I.memoryBase||(I.memoryBase=$.STATIC_BASE),I.tableBase||(I.tableBase=0),h=function A(I,B,C){if(\"object\"!=typeof WebAssembly)return H(\"no native wasm support detected\"),!1;if(!($.wasmMemory instanceof WebAssembly.Memory))return H(\"no native wasm Memory in use\"),!1;function h(A,I){if((Q=A.exports).memory){var g,B,E;g=Q.memory,B=$.buffer,g.byteLength<B.byteLength&&H(\"the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here\"),E=new Int8Array(B),new Int8Array(g).set(E),AU(g),A$()}$.asm=Q,$.usingWasm=!0,function A(I){if(A7--,$.monitorRunDependencies&&$.monitorRunDependencies(A7),0==A7&&(null!==A1&&(clearInterval(A1),A1=null),AW)){var g=AW;AW=null,g()}}(\"wasm-instantiate\")}B.memory=$.wasmMemory,E.global={NaN:NaN,Infinity:1/0},E[\"global.Math\"]=Math,E.env=B;if((A7++,$.monitorRunDependencies&&$.monitorRunDependencies(A7)),$.instantiateWasm)try{return $.instantiateWasm(E,h)}catch(o){return H(\"Module.instantiateWasm callback failed with error: \"+o),!1}function G(A){h(A.instance,A.module)}function D(A){(!$.wasmBinary&&(t||k)&&\"function\"==typeof fetch?fetch(g,{credentials:\"same-origin\"}).then(function(A){if(!A.ok)throw\"failed to load wasm binary file at '\"+g+\"'\";return A.arrayBuffer()}).catch(function(){return i()}):new Promise(function(A,I){A(i())})).then(function(A){return WebAssembly.instantiate(A,E)}).then(A).catch(function(A){H(\"failed to asynchronously prepare wasm: \"+A),IE(A)})}return $.wasmBinary||\"function\"!=typeof WebAssembly.instantiateStreaming||A2(g)||\"function\"!=typeof fetch?D(G):WebAssembly.instantiateStreaming(fetch(g,{credentials:\"same-origin\"}),E).then(G).catch(function(A){H(\"wasm streaming compile failed: \"+A),H(\"falling back to ArrayBuffer instantiation\"),D(G)}),{}}(A,I,B),_(h,\"no binaryen method succeeded.\"),h},$.asm}(),S=(a=1024)+4816,Af.push(),$.STATIC_BASE=a,$.STATIC_BUMP=4816;var Av=S;function AO(A){E[Av]=E[A],E[Av+1]=E[A+1],E[Av+2]=E[A+2],E[Av+3]=E[A+3]}function Aj(A){E[Av]=E[A],E[Av+1]=E[A+1],E[Av+2]=E[A+2],E[Av+3]=E[A+3],E[Av+4]=E[A+4],E[Av+5]=E[A+5],E[Av+6]=E[A+6],E[Av+7]=E[A+7]}function AP(A,I,g){var B=g>0?g:Ah(A)+1,E=Array(B),Q=AC(A,E,0,E.length);return I&&(E.length=Q),E}function A4(A){for(var I=[],g=0;g<A.length;g++){var B=A[g];B>255&&(B&=255),I.push(String.fromCharCode(B))}return I.join(\"\")}S+=16,c=L(4),w=(R=s=d(S))+Ak,y=d(w),h[c>>2]=y,F=!0,$.wasmTableSize=4,$.wasmMaxTableSize=4,$.asmGlobalArg={},$.asmLibraryArg={abort:IE,assert:_,enlargeMemory:Ae,getTotalMemory:Ar,abortOnCannotGrowMemory:function A(){IE(\"Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value \"+AN+\", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 \")},invoke_iii:function A(I,g,B){var E=IA();try{return $.dynCall_iii(I,g,B)}catch(Q){if(A9(E),\"number\"!=typeof Q&&\"longjmp\"!==Q)throw Q;$.setThrew(1,0)}},___assert_fail:function A(I,g,B,E){IE(\"Assertion failed: \"+Ag(I)+\", at: \"+[g?Ag(g):\"unknown filename\",B,E?Ag(E):\"unknown function\",])},___setErrNo:function A(I){return $.___errno_location&&(h[$.___errno_location()>>2]=I),I},_abort:function A(){$.abort()},_emscripten_memcpy_big:function A(I,g,B){return Q.set(Q.subarray(g,g+B),I),I},_llvm_floor_f64:A6,DYNAMICTOP_PTR:c,tempDoublePtr:Av,ABORT:p,STACKTOP:s,STACK_MAX:w};var A3=$.asm($.asmGlobalArg,$.asmLibraryArg,B);$.asm=A3,$.___errno_location=function(){return $.asm.___errno_location.apply(null,arguments)};var Az=$._emscripten_replace_memory=function(){return $.asm._emscripten_replace_memory.apply(null,arguments)};$._free=function(){return $.asm._free.apply(null,arguments)};var A8=$._malloc=function(){return $.asm._malloc.apply(null,arguments)};$._memcpy=function(){return $.asm._memcpy.apply(null,arguments)},$._memset=function(){return $.asm._memset.apply(null,arguments)},$._sbrk=function(){return $.asm._sbrk.apply(null,arguments)},$._stb_vorbis_js_channels=function(){return $.asm._stb_vorbis_js_channels.apply(null,arguments)},$._stb_vorbis_js_close=function(){return $.asm._stb_vorbis_js_close.apply(null,arguments)},$._stb_vorbis_js_decode=function(){return $.asm._stb_vorbis_js_decode.apply(null,arguments)},$._stb_vorbis_js_open=function(){return $.asm._stb_vorbis_js_open.apply(null,arguments)},$._stb_vorbis_js_sample_rate=function(){return $.asm._stb_vorbis_js_sample_rate.apply(null,arguments)},$.establishStackSpace=function(){return $.asm.establishStackSpace.apply(null,arguments)},$.getTempRet0=function(){return $.asm.getTempRet0.apply(null,arguments)},$.runPostSets=function(){return $.asm.runPostSets.apply(null,arguments)},$.setTempRet0=function(){return $.asm.setTempRet0.apply(null,arguments)},$.setThrew=function(){return $.asm.setThrew.apply(null,arguments)};var A5=$.stackAlloc=function(){return $.asm.stackAlloc.apply(null,arguments)},A9=$.stackRestore=function(){return $.asm.stackRestore.apply(null,arguments)},IA=$.stackSave=function(){return $.asm.stackSave.apply(null,arguments)};function II(A){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+A+\")\",this.status=A}function Ig(A){if(A=A||$.arguments,!(A7>0))!function A(){if($.preRun)for(\"function\"==typeof $.preRun&&($.preRun=[$.preRun]);$.preRun.length;)Aq($.preRun.shift());AY(AJ)}(),!(A7>0)&&($.calledRun||($.setStatus?($.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){$.setStatus(\"\")},1),I()},1)):I()));function I(){!$.calledRun&&($.calledRun=!0,p||(A0||(A0=!0,AY(Af)),AY(AH),$.onRuntimeInitialized&&$.onRuntimeInitialized(),function A(){if($.postRun)for(\"function\"==typeof $.postRun&&($.postRun=[$.postRun]);$.postRun.length;)Ab($.postRun.shift());AY(AM)}()))}}function IB(A,I){(!I||!$.noExitRuntime||0!==A)&&($.noExitRuntime||(p=!0,W=A,s=U,AY(AL),Ad=!0,$.onExit&&$.onExit(A)),$.quit(A,new II(A)))}function IE(A){throw $.onAbort&&$.onAbort(A),void 0!==A?(f(A),H(A),A=JSON.stringify(A)):A=\"\",p=!0,W=1,\"abort(\"+A+\"). Build with -s ASSERTIONS=1 for more info.\"}if($.dynCall_iii=function(){return $.asm.dynCall_iii.apply(null,arguments)},$.asm=A3,$.ccall=j,$.cwrap=function A(I,g,B,E){var Q=(B=B||[]).every(function(A){return\"number\"===A});return\"string\"!==g&&Q&&!E?T(I):function(){return j(I,g,B,arguments,E)}},II.prototype=Error(),II.prototype.constructor=II,AW=function A(){$.calledRun||Ig(),$.calledRun||(AW=A)},$.run=Ig,$.abort=IE,$.preInit)for(\"function\"==typeof $.preInit&&($.preInit=[$.preInit]);$.preInit.length>0;)$.preInit.pop()();$.noExitRuntime=!0,Ig(),$.onRuntimeInitialized=()=>{isReady=!0,readySolver()},stbvorbis.decode=function(A){return function A(I){if(!isReady)throw Error(\"Not initialized\");var g={};function B(A){return new Int32Array($.HEAPU8.buffer,A,1)[0]}function E(A,I){var g=new ArrayBuffer(I*Float32Array.BYTES_PER_ELEMENT),B=new Float32Array(g);return B.set(new Float32Array($.HEAPU8.buffer,A,I)),B}g.open=$.cwrap(\"stb_vorbis_js_open\",\"number\",[]),g.close=$.cwrap(\"stb_vorbis_js_close\",\"void\",[\"number\"]),g.channels=$.cwrap(\"stb_vorbis_js_channels\",\"number\",[\"number\"]),g.sampleRate=$.cwrap(\"stb_vorbis_js_sample_rate\",\"number\",[\"number\"]),g.decode=$.cwrap(\"stb_vorbis_js_decode\",\"number\",[\"number\",\"number\",\"number\",\"number\",\"number\"]);var Q,C,i,h,o=g.open(),G=(Q=I,C=I.byteLength,i=$._malloc(C),(h=new Uint8Array($.HEAPU8.buffer,i,C)).set(new Uint8Array(Q,0,C)),h),D=$._malloc(4),a=$._malloc(4),S=g.decode(o,G.byteOffset,G.byteLength,D,a);if($._free(G.byteOffset),S<0)throw g.close(o),$._free(D),Error(\"stbvorbis decode failed: \"+S);for(var F=g.channels(o),R=Array(F),s=new Int32Array($.HEAPU32.buffer,B(D),F),w=0;w<F;w++)R[w]=E(s[w],S),$._free(s[w]);var y=g.sampleRate(o);return g.close(o),$._free(B(D)),$._free(D),{data:R,sampleRate:y,eof:!0,error:null}}(A)}}();", "import { RiffChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { readLittleEndian, signedInt8 } from \"../../utils/byte_functions/little_endian.js\";\nimport { stbvorbis } from \"../../externals/stbvorbis_sync/stbvorbis_sync.min.js\";\nimport { SpessaSynthWarn } from \"../../utils/loggin.js\";\nimport { readBytesAsString } from \"../../utils/byte_functions/string.js\";\nimport { BasicSample } from \"../basic_soundfont/basic_sample.js\";\n\nexport class LoadedSample extends BasicSample\n{\n    /**\n     * Creates a sample\n     * @param sampleName {string}\n     * @param sampleStartIndex {number}\n     * @param sampleEndIndex {number}\n     * @param sampleLoopStartIndex {number}\n     * @param sampleLoopEndIndex {number}\n     * @param sampleRate {number}\n     * @param samplePitch {number}\n     * @param samplePitchCorrection {number}\n     * @param sampleLink {number}\n     * @param sampleType {number}\n     * @param smplArr {IndexedByteArray|Float32Array}\n     * @param sampleIndex {number} initial sample index when loading the sfont\n     * @param isDataRaw {boolean} if false, the data is decoded as float32.\n     * Used for SF2Pack support\n     */\n    constructor(sampleName,\n                sampleStartIndex,\n                sampleEndIndex,\n                sampleLoopStartIndex,\n                sampleLoopEndIndex,\n                sampleRate,\n                samplePitch,\n                samplePitchCorrection,\n                sampleLink,\n                sampleType,\n                smplArr,\n                sampleIndex,\n                isDataRaw\n    )\n    {\n        super(\n            sampleName,\n            sampleRate,\n            samplePitch,\n            samplePitchCorrection,\n            sampleLink,\n            sampleType,\n            sampleLoopStartIndex - (sampleStartIndex / 2),\n            sampleLoopEndIndex - (sampleStartIndex / 2)\n        );\n        this.sampleName = sampleName;\n        // in bytes\n        this.sampleStartIndex = sampleStartIndex;\n        this.sampleEndIndex = sampleEndIndex;\n        this.isSampleLoaded = false;\n        this.sampleID = sampleIndex;\n        // in bytes\n        this.sampleLength = this.sampleEndIndex - this.sampleStartIndex;\n        this.sampleDataArray = smplArr;\n        this.sampleData = new Float32Array(0);\n        if (this.isCompressed)\n        {\n            // correct loop points\n            this.sampleLoopStartIndex += this.sampleStartIndex / 2;\n            this.sampleLoopEndIndex += this.sampleStartIndex / 2;\n            this.sampleLength = 99999999; // set to 999999 before we decode it\n        }\n        this.isDataRaw = isDataRaw;\n    }\n    \n    /**\n     * Get raw data, whether it's compressed or not as we simply write it to the file\n     * @return {Uint8Array}\n     */\n    getRawData()\n    {\n        const smplArr = this.sampleDataArray;\n        if (this.isCompressed)\n        {\n            if (this.compressedData)\n            {\n                return this.compressedData;\n            }\n            const smplStart = smplArr.currentIndex;\n            return smplArr.slice(this.sampleStartIndex / 2 + smplStart, this.sampleEndIndex / 2 + smplStart);\n        }\n        else\n        {\n            if (!this.isDataRaw)\n            {\n                throw new Error(\"Writing SF2Pack samples is not supported.\");\n            }\n            const dataStartIndex = smplArr.currentIndex;\n            return smplArr.slice(dataStartIndex + this.sampleStartIndex, dataStartIndex + this.sampleEndIndex);\n        }\n    }\n    \n    /**\n     * Decode binary vorbis into a float32 pcm\n     */\n    decodeVorbis()\n    {\n        if (this.sampleLength < 1)\n        {\n            // eos, do not do anything\n            return;\n        }\n        // get the compressed byte stream\n        const smplArr = this.sampleDataArray;\n        const smplStart = smplArr.currentIndex;\n        const buff = smplArr.slice(this.sampleStartIndex / 2 + smplStart, this.sampleEndIndex / 2 + smplStart);\n        // reset array and being decoding\n        this.sampleData = new Float32Array(0);\n        try\n        {\n            /**\n             * @type {{data: Float32Array[], error: (string|null), sampleRate: number, eof: boolean}}\n             */\n            const vorbis = stbvorbis.decode(buff.buffer);\n            this.sampleData = vorbis.data[0];\n        }\n        catch (e)\n        {\n            throw new Error(`Ogg Vorbis decode error: ${e}`);\n        }\n    }\n    \n    /**\n     * Loads the audio data and stores it for reuse\n     * @returns {Float32Array} The audioData\n     */\n    getAudioData()\n    {\n        if (!this.isSampleLoaded)\n        {\n            // start loading data if not loaded\n            if (this.sampleLength < 1)\n            {\n                // eos, do not do anything\n                return new Float32Array(1);\n            }\n            \n            if (this.isCompressed)\n            {\n                // if compressed, decode\n                this.decodeVorbis();\n                this.isSampleLoaded = true;\n                return this.sampleData;\n            }\n            else if (!this.isDataRaw)\n            {\n                return this.getUncompressedReadyData();\n            }\n            return this.loadUncompressedData();\n        }\n        return this.sampleData;\n    }\n    \n    /**\n     * @returns {Float32Array}\n     */\n    loadUncompressedData()\n    {\n        if (this.isCompressed)\n        {\n            SpessaSynthWarn(\"Trying to load a compressed sample via loadUncompressedData()... aborting!\");\n            return new Float32Array(0);\n        }\n        \n        // read the sample data\n        let audioData = new Float32Array(this.sampleLength / 2);\n        const dataStartIndex = this.sampleDataArray.currentIndex;\n        let convertedSigned16 = new Int16Array(\n            this.sampleDataArray.slice(dataStartIndex + this.sampleStartIndex, dataStartIndex + this.sampleEndIndex)\n                .buffer\n        );\n        \n        // convert to float\n        for (let i = 0; i < convertedSigned16.length; i++)\n        {\n            audioData[i] = convertedSigned16[i] / 32768;\n        }\n        \n        this.sampleData = audioData;\n        this.isSampleLoaded = true;\n        return audioData;\n    }\n    \n    /**\n     * @returns {Float32Array}\n     */\n    getUncompressedReadyData()\n    {\n        /**\n         * read the sample data\n         * @type {Float32Array}\n         */\n        let audioData = this.sampleDataArray.slice(this.sampleStartIndex / 2, this.sampleEndIndex / 2);\n        this.sampleData = audioData;\n        this.isSampleLoaded = true;\n        return audioData;\n    }\n}\n\n/**\n * Reads the generatorTranslator from the shdr read\n * @param sampleHeadersChunk {RiffChunk}\n * @param smplChunkData {IndexedByteArray|Float32Array}\n * @param isSmplDataRaw {boolean}\n * @returns {LoadedSample[]}\n */\nexport function readSamples(sampleHeadersChunk, smplChunkData, isSmplDataRaw = true)\n{\n    /**\n     * @type {LoadedSample[]}\n     */\n    let samples = [];\n    let index = 0;\n    while (sampleHeadersChunk.chunkData.length > sampleHeadersChunk.chunkData.currentIndex)\n    {\n        const sample = readSample(index, sampleHeadersChunk.chunkData, smplChunkData, isSmplDataRaw);\n        samples.push(sample);\n        index++;\n    }\n    // remove EOS\n    if (samples.length > 1)\n    {\n        samples.pop();\n    }\n    return samples;\n}\n\n/**\n * Reads it into a sample\n * @param index {number}\n * @param sampleHeaderData {IndexedByteArray}\n * @param smplArrayData {IndexedByteArray|Float32Array}\n * @param isDataRaw {boolean} true means binary 16 bit data, false means float32\n * @returns {LoadedSample}\n */\nfunction readSample(index, sampleHeaderData, smplArrayData, isDataRaw)\n{\n    \n    // read the sample name\n    let sampleName = readBytesAsString(sampleHeaderData, 20);\n    \n    // read the sample start index\n    let sampleStartIndex = readLittleEndian(sampleHeaderData, 4) * 2;\n    \n    // read the sample end index\n    let sampleEndIndex = readLittleEndian(sampleHeaderData, 4) * 2;\n    \n    // read the sample looping start index\n    let sampleLoopStartIndex = readLittleEndian(sampleHeaderData, 4);\n    \n    // read the sample looping end index\n    let sampleLoopEndIndex = readLittleEndian(sampleHeaderData, 4);\n    \n    // read the sample rate\n    let sampleRate = readLittleEndian(sampleHeaderData, 4);\n    \n    // read the original sample pitch\n    let samplePitch = sampleHeaderData[sampleHeaderData.currentIndex++];\n    if (samplePitch === 255)\n    {\n        // if it's 255, then default to 60\n        samplePitch = 60;\n    }\n    \n    // readt the sample pitch correction\n    let samplePitchCorrection = signedInt8(sampleHeaderData[sampleHeaderData.currentIndex++]);\n    \n    \n    // read the link to the other channel\n    let sampleLink = readLittleEndian(sampleHeaderData, 2);\n    let sampleType = readLittleEndian(sampleHeaderData, 2);\n    \n    \n    return new LoadedSample(\n        sampleName,\n        sampleStartIndex,\n        sampleEndIndex,\n        sampleLoopStartIndex,\n        sampleLoopEndIndex,\n        sampleRate,\n        samplePitch,\n        samplePitchCorrection,\n        sampleLink,\n        sampleType,\n        smplArrayData,\n        index,\n        isDataRaw\n    );\n}", "import { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { RiffChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { signedInt16 } from \"../../utils/byte_functions/little_endian.js\";\nimport { Generator } from \"../basic_soundfont/generator.js\";\n\n\nexport class ReadGenerator extends Generator\n{\n    /**\n     * Creates a generator\n     * @param dataArray {IndexedByteArray}\n     */\n    constructor(dataArray)\n    {\n        super();\n        // 4 bytes:\n        // type, type, type, value\n        const i = dataArray.currentIndex;\n        /**\n         * @type {generatorTypes|number}\n         */\n        this.generatorType = (dataArray[i + 1] << 8) | dataArray[i];\n        this.generatorValue = signedInt16(dataArray[i + 2], dataArray[i + 3]);\n        dataArray.currentIndex += 4;\n    }\n}\n\n/**\n * Reads the generator read\n * @param generatorChunk {RiffChunk}\n * @returns {Generator[]}\n */\nexport function readGenerators(generatorChunk)\n{\n    let gens = [];\n    while (generatorChunk.chunkData.length > generatorChunk.chunkData.currentIndex)\n    {\n        gens.push(new ReadGenerator(generatorChunk.chunkData));\n    }\n    if (gens.length > 1)\n    {\n        // remove terminal\n        gens.pop();\n    }\n    return gens;\n}", "import { RiffChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { InstrumentZone } from \"./zones.js\";\nimport { readLittleEndian } from \"../../utils/byte_functions/little_endian.js\";\nimport { readBytesAsString } from \"../../utils/byte_functions/string.js\";\nimport { BasicInstrument } from \"../basic_soundfont/basic_instrument.js\";\n\n/**\n * instrument.js\n * purpose: parses soundfont instrument and stores them as a class\n */\n\nexport class Instrument extends BasicInstrument\n{\n    /**\n     * Creates an instrument\n     * @param instrumentChunk {RiffChunk}\n     */\n    constructor(instrumentChunk)\n    {\n        super();\n        this.instrumentName = readBytesAsString(instrumentChunk.chunkData, 20).trim();\n        this.instrumentZoneIndex = readLittleEndian(instrumentChunk.chunkData, 2);\n        this.instrumentZonesAmount = 0;\n    }\n    \n    /**\n     * Loads all the instrument zones, given the amount\n     * @param amount {number}\n     * @param zones {InstrumentZone[]}\n     */\n    getInstrumentZones(amount, zones)\n    {\n        this.instrumentZonesAmount = amount;\n        for (let i = this.instrumentZoneIndex; i < this.instrumentZonesAmount + this.instrumentZoneIndex; i++)\n        {\n            this.instrumentZones.push(zones[i]);\n        }\n    }\n}\n\n/**\n * Reads the instruments\n * @param instrumentChunk {RiffChunk}\n * @param instrumentZones {InstrumentZone[]}\n * @returns {Instrument[]}\n */\nexport function readInstruments(instrumentChunk, instrumentZones)\n{\n    let instruments = [];\n    while (instrumentChunk.chunkData.length > instrumentChunk.chunkData.currentIndex)\n    {\n        let instrument = new Instrument(instrumentChunk);\n        if (instruments.length > 0)\n        {\n            let instrumentsAmount = instrument.instrumentZoneIndex - instruments[instruments.length - 1].instrumentZoneIndex;\n            instruments[instruments.length - 1].getInstrumentZones(instrumentsAmount, instrumentZones);\n        }\n        instruments.push(instrument);\n    }\n    if (instruments.length > 1)\n    {\n        // remove EOI\n        instruments.pop();\n    }\n    return instruments;\n}", "import { readLittleEndian } from \"../../utils/byte_functions/little_endian.js\";\nimport { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { RiffChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { Instrument } from \"./instruments.js\";\nimport { BasicInstrumentZone, BasicPresetZone } from \"../basic_soundfont/basic_zones.js\";\nimport { Generator, generatorTypes } from \"../basic_soundfont/generator.js\";\nimport { Modulator } from \"../basic_soundfont/modulator.js\";\n\n/**\n * zones.js\n * purpose: reads instrumend and preset zones from soundfont and gets their respective samples and generators and modulators\n */\n\nexport class InstrumentZone extends BasicInstrumentZone\n{\n    /**\n     * Creates a zone (instrument)\n     * @param dataArray {IndexedByteArray}\n     */\n    constructor(dataArray)\n    {\n        super();\n        this.generatorZoneStartIndex = readLittleEndian(dataArray, 2);\n        this.modulatorZoneStartIndex = readLittleEndian(dataArray, 2);\n        this.modulatorZoneSize = 0;\n        this.generatorZoneSize = 0;\n        this.isGlobal = true;\n    }\n    \n    setZoneSize(modulatorZoneSize, generatorZoneSize)\n    {\n        this.modulatorZoneSize = modulatorZoneSize;\n        this.generatorZoneSize = generatorZoneSize;\n    }\n    \n    /**\n     * grab the generators\n     * @param generators {Generator[]}\n     */\n    getGenerators(generators)\n    {\n        for (let i = this.generatorZoneStartIndex; i < this.generatorZoneStartIndex + this.generatorZoneSize; i++)\n        {\n            this.generators.push(generators[i]);\n        }\n    }\n    \n    /**\n     * grab the modulators\n     * @param modulators {Modulator[]}\n     */\n    getModulators(modulators)\n    {\n        for (let i = this.modulatorZoneStartIndex; i < this.modulatorZoneStartIndex + this.modulatorZoneSize; i++)\n        {\n            this.modulators.push(modulators[i]);\n        }\n    }\n    \n    /**\n     * Loads the zone's sample\n     * @param samples {BasicSample[]}\n     */\n    getSample(samples)\n    {\n        let sampleID = this.generators.find(g => g.generatorType === generatorTypes.sampleID);\n        if (sampleID)\n        {\n            this.sample = samples[sampleID.generatorValue];\n            this.isGlobal = false;\n            this.sample.useCount++;\n        }\n    }\n    \n    /**\n     * Reads the keyRange of the zone\n     */\n    getKeyRange()\n    {\n        let range = this.generators.find(g => g.generatorType === generatorTypes.keyRange);\n        if (range)\n        {\n            this.keyRange.min = range.generatorValue & 0x7F;\n            this.keyRange.max = (range.generatorValue >> 8) & 0x7F;\n        }\n    }\n    \n    /**\n     * reads the velolicty range of the zone\n     */\n    getVelRange()\n    {\n        let range = this.generators.find(g => g.generatorType === generatorTypes.velRange);\n        if (range)\n        {\n            this.velRange.min = range.generatorValue & 0x7F;\n            this.velRange.max = (range.generatorValue >> 8) & 0x7F;\n        }\n    }\n}\n\n/**\n * Reads the given instrument zone read\n * @param zonesChunk {RiffChunk}\n * @param instrumentGenerators {Generator[]}\n * @param instrumentModulators {Modulator[]}\n * @param instrumentSamples {BasicSample[]}\n * @returns {InstrumentZone[]}\n */\nexport function readInstrumentZones(zonesChunk, instrumentGenerators, instrumentModulators, instrumentSamples)\n{\n    /**\n     * @type {InstrumentZone[]}\n     */\n    let zones = [];\n    while (zonesChunk.chunkData.length > zonesChunk.chunkData.currentIndex)\n    {\n        let zone = new InstrumentZone(zonesChunk.chunkData);\n        if (zones.length > 0)\n        {\n            let modulatorZoneSize = zone.modulatorZoneStartIndex - zones[zones.length - 1].modulatorZoneStartIndex;\n            let generatorZoneSize = zone.generatorZoneStartIndex - zones[zones.length - 1].generatorZoneStartIndex;\n            zones[zones.length - 1].setZoneSize(modulatorZoneSize, generatorZoneSize);\n            zones[zones.length - 1].getGenerators(instrumentGenerators);\n            zones[zones.length - 1].getModulators(instrumentModulators);\n            zones[zones.length - 1].getSample(instrumentSamples);\n            zones[zones.length - 1].getKeyRange();\n            zones[zones.length - 1].getVelRange();\n        }\n        zones.push(zone);\n    }\n    if (zones.length > 1)\n    {\n        // remove terminal\n        zones.pop();\n    }\n    return zones;\n}\n\nexport class PresetZone extends BasicPresetZone\n{\n    /**\n     * Creates a zone (preset)\n     * @param dataArray {IndexedByteArray}\n     */\n    constructor(dataArray)\n    {\n        super();\n        this.generatorZoneStartIndex = readLittleEndian(dataArray, 2);\n        this.modulatorZoneStartIndex = readLittleEndian(dataArray, 2);\n        this.modulatorZoneSize = 0;\n        this.generatorZoneSize = 0;\n        this.isGlobal = true;\n    }\n    \n    setZoneSize(modulatorZoneSize, generatorZoneSize)\n    {\n        this.modulatorZoneSize = modulatorZoneSize;\n        this.generatorZoneSize = generatorZoneSize;\n    }\n    \n    /**\n     * grab the generators\n     * @param generators {Generator[]}\n     */\n    getGenerators(generators)\n    {\n        for (let i = this.generatorZoneStartIndex; i < this.generatorZoneStartIndex + this.generatorZoneSize; i++)\n        {\n            this.generators.push(generators[i]);\n        }\n    }\n    \n    /**\n     * grab the modulators\n     * @param modulators {Modulator[]}\n     */\n    getModulators(modulators)\n    {\n        for (let i = this.modulatorZoneStartIndex; i < this.modulatorZoneStartIndex + this.modulatorZoneSize; i++)\n        {\n            this.modulators.push(modulators[i]);\n        }\n    }\n    \n    /**\n     * grab the instrument\n     * @param instruments {Instrument[]}\n     */\n    getInstrument(instruments)\n    {\n        let instrumentID = this.generators.find(g => g.generatorType === generatorTypes.instrument);\n        if (instrumentID)\n        {\n            this.instrument = instruments[instrumentID.generatorValue];\n            this.instrument.addUseCount();\n            this.isGlobal = false;\n        }\n    }\n    \n    /**\n     * Reads the keyRange of the zone\n     */\n    getKeyRange()\n    {\n        let range = this.generators.find(g => g.generatorType === generatorTypes.keyRange);\n        if (range)\n        {\n            this.keyRange.min = range.generatorValue & 0x7F;\n            this.keyRange.max = (range.generatorValue >> 8) & 0x7F;\n        }\n    }\n    \n    /**\n     * reads the velolicty range of the zone\n     */\n    getVelRange()\n    {\n        let range = this.generators.find(g => g.generatorType === generatorTypes.velRange);\n        if (range)\n        {\n            this.velRange.min = range.generatorValue & 0x7F;\n            this.velRange.max = (range.generatorValue >> 8) & 0x7F;\n        }\n    }\n}\n\n/**\n * Reads the given preset zone read\n * @param zonesChunk {RiffChunk}\n * @param presetGenerators {Generator[]}\n * @param instruments {Instrument[]}\n * @param presetModulators {Modulator[]}\n * @returns {PresetZone[]}\n */\nexport function readPresetZones(zonesChunk, presetGenerators, presetModulators, instruments)\n{\n    /**\n     * @type {PresetZone[]}\n     */\n    let zones = [];\n    while (zonesChunk.chunkData.length > zonesChunk.chunkData.currentIndex)\n    {\n        let zone = new PresetZone(zonesChunk.chunkData);\n        if (zones.length > 0)\n        {\n            let modulatorZoneSize = zone.modulatorZoneStartIndex - zones[zones.length - 1].modulatorZoneStartIndex;\n            let generatorZoneSize = zone.generatorZoneStartIndex - zones[zones.length - 1].generatorZoneStartIndex;\n            zones[zones.length - 1].setZoneSize(modulatorZoneSize, generatorZoneSize);\n            zones[zones.length - 1].getGenerators(presetGenerators);\n            zones[zones.length - 1].getModulators(presetModulators);\n            zones[zones.length - 1].getInstrument(instruments);\n            zones[zones.length - 1].getKeyRange();\n            zones[zones.length - 1].getVelRange();\n        }\n        zones.push(zone);\n    }\n    if (zones.length > 1)\n    {\n        // remove terminal\n        zones.pop();\n    }\n    return zones;\n}", "import { RiffChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { PresetZone } from \"./zones.js\";\nimport { readLittleEndian } from \"../../utils/byte_functions/little_endian.js\";\nimport { readBytesAsString } from \"../../utils/byte_functions/string.js\";\nimport { BasicPreset } from \"../basic_soundfont/basic_preset.js\";\n\n/**\n * parses soundfont presets, also includes function for getting the generators and samples from midi note and velocity\n */\n\nexport class Preset extends BasicPreset\n{\n    /**\n     * Creates a preset\n     * @param presetChunk {RiffChunk}\n     * @param defaultModulators {Modulator[]}\n     */\n    constructor(presetChunk, defaultModulators)\n    {\n        super(defaultModulators);\n        this.presetName = readBytesAsString(presetChunk.chunkData, 20)\n            .trim()\n            .replace(/\\d{3}:\\d{3}/, \"\"); // remove those pesky \"000:001\"\n        \n        this.program = readLittleEndian(presetChunk.chunkData, 2);\n        this.bank = readLittleEndian(presetChunk.chunkData, 2);\n        this.presetZoneStartIndex = readLittleEndian(presetChunk.chunkData, 2);\n        \n        // read the dwords\n        this.library = readLittleEndian(presetChunk.chunkData, 4);\n        this.genre = readLittleEndian(presetChunk.chunkData, 4);\n        this.morphology = readLittleEndian(presetChunk.chunkData, 4);\n        this.presetZonesAmount = 0;\n    }\n    \n    /**\n     * Loads all the preset zones, given the amount\n     * @param amount {number}\n     * @param zones {PresetZone[]}\n     */\n    getPresetZones(amount, zones)\n    {\n        this.presetZonesAmount = amount;\n        for (let i = this.presetZoneStartIndex; i < this.presetZonesAmount + this.presetZoneStartIndex; i++)\n        {\n            this.presetZones.push(zones[i]);\n        }\n    }\n}\n\n/**\n * Reads the presets\n * @param presetChunk {RiffChunk}\n * @param presetZones {PresetZone[]}\n * @param defaultModulators {Modulator[]}\n * @returns {Preset[]}\n */\nexport function readPresets(presetChunk, presetZones, defaultModulators)\n{\n    /**\n     * @type {Preset[]}\n     */\n    let presets = [];\n    while (presetChunk.chunkData.length > presetChunk.chunkData.currentIndex)\n    {\n        let preset = new Preset(presetChunk, defaultModulators);\n        if (presets.length > 0)\n        {\n            let presetZonesAmount = preset.presetZoneStartIndex - presets[presets.length - 1].presetZoneStartIndex;\n            presets[presets.length - 1].getPresetZones(presetZonesAmount, presetZones);\n        }\n        presets.push(preset);\n    }\n    // remove EOP\n    if (presets.length > 1)\n    {\n        presets.pop();\n    }\n    return presets;\n}", "import { readLittleEndian, signedInt16 } from \"../../utils/byte_functions/little_endian.js\";\nimport { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { Modulator } from \"../basic_soundfont/modulator.js\";\n\n\nexport class ReadModulator extends Modulator\n{\n    /**\n     * Creates a modulator\n     * @param dataArray {IndexedByteArray}\n     */\n    constructor(dataArray)\n    {\n        super({\n            srcEnum: readLittleEndian(dataArray, 2),\n            dest: readLittleEndian(dataArray, 2),\n            amt: signedInt16(dataArray[dataArray.currentIndex++], dataArray[dataArray.currentIndex++]),\n            secSrcEnum: readLittleEndian(dataArray, 2),\n            transform: readLittleEndian(dataArray, 2)\n        });\n    }\n}\n\n/**\n * Reads the modulator read\n * @param modulatorChunk {RiffChunk}\n * @returns {Modulator[]}\n */\nexport function readModulators(modulatorChunk)\n{\n    let gens = [];\n    while (modulatorChunk.chunkData.length > modulatorChunk.chunkData.currentIndex)\n    {\n        gens.push(new ReadModulator(modulatorChunk.chunkData));\n    }\n    return gens;\n}", "import { IndexedByteArray } from \"../../utils/indexed_array.js\";\nimport { readSamples } from \"./samples.js\";\nimport { readLittleEndian } from \"../../utils/byte_functions/little_endian.js\";\nimport { readGenerators } from \"./generators.js\";\nimport { InstrumentZone, readInstrumentZones, readPresetZones } from \"./zones.js\";\nimport { readPresets } from \"./presets.js\";\nimport { readInstruments } from \"./instruments.js\";\nimport { readModulators } from \"./modulators.js\";\nimport { readRIFFChunk, RiffChunk } from \"../basic_soundfont/riff_chunk.js\";\nimport { consoleColors } from \"../../utils/other.js\";\nimport { SpessaSynthGroup, SpessaSynthGroupEnd, SpessaSynthInfo } from \"../../utils/loggin.js\";\nimport { readBytesAsString } from \"../../utils/byte_functions/string.js\";\nimport { stbvorbis } from \"../../externals/stbvorbis_sync/stbvorbis_sync.min.js\";\nimport { BasicSoundFont } from \"../basic_soundfont/basic_soundfont.js\";\nimport { Generator } from \"../basic_soundfont/generator.js\";\nimport { Modulator } from \"../basic_soundfont/modulator.js\";\n\n/**\n * soundfont.js\n * purpose: parses a soundfont2 file\n */\n\nexport class SoundFont2 extends BasicSoundFont\n{\n    /**\n     * Initializes a new SoundFont2 Parser and parses the given data array\n     * @param arrayBuffer {ArrayBuffer}\n     * @param warnDeprecated {boolean}\n     */\n    constructor(arrayBuffer, warnDeprecated = true)\n    {\n        super();\n        if (warnDeprecated)\n        {\n            console.warn(\"Using the constructor directly is deprecated. Use loadSoundFont instead.\");\n        }\n        this.dataArray = new IndexedByteArray(arrayBuffer);\n        SpessaSynthGroup(\"%cParsing SoundFont...\", consoleColors.info);\n        if (!this.dataArray)\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(\"No data provided!\");\n        }\n        \n        // read the main read\n        let firstChunk = readRIFFChunk(this.dataArray, false);\n        this.verifyHeader(firstChunk, \"riff\");\n        \n        const type = readBytesAsString(this.dataArray, 4).toLowerCase();\n        if (type !== \"sfbk\" && type !== \"sfpk\")\n        {\n            SpessaSynthGroupEnd();\n            throw new SyntaxError(`Invalid soundFont! Expected \"sfbk\" or \"sfpk\" got \"${type}\"`);\n        }\n        /*\n        Some SF2Pack description:\n        this is essentially sf2, but the entire smpl chunk is compressed (we only support ogg vorbis here)\n        and the only other difference is that the main chunk isn't \"sfbk\" but rather \"sfpk\"\n         */\n        const isSF2Pack = type === \"sfpk\";\n        \n        // INFO\n        let infoChunk = readRIFFChunk(this.dataArray);\n        this.verifyHeader(infoChunk, \"list\");\n        readBytesAsString(infoChunk.chunkData, 4);\n        \n        while (infoChunk.chunkData.length > infoChunk.chunkData.currentIndex)\n        {\n            let chunk = readRIFFChunk(infoChunk.chunkData);\n            let text;\n            // special cases\n            switch (chunk.header.toLowerCase())\n            {\n                case  \"ifil\":\n                case \"iver\":\n                    text = `${readLittleEndian(chunk.chunkData, 2)}.${readLittleEndian(chunk.chunkData, 2)}`;\n                    this.soundFontInfo[chunk.header] = text;\n                    break;\n                \n                case \"icmt\":\n                    text = readBytesAsString(chunk.chunkData, chunk.chunkData.length, undefined, false);\n                    this.soundFontInfo[chunk.header] = text;\n                    break;\n                \n                // dmod: default modulators\n                case \"dmod\":\n                    const newModulators = readModulators(chunk);\n                    newModulators.pop(); // remove the terminal record\n                    text = `Modulators: ${newModulators.length}`;\n                    // override default modulators\n                    const oldDefaults = this.defaultModulators;\n                    \n                    this.defaultModulators = newModulators;\n                    this.defaultModulators.push(...oldDefaults.filter(m => !this.defaultModulators.find(mm => Modulator.isIdentical(\n                        m,\n                        mm\n                    ))));\n                    this.soundFontInfo[chunk.header] = chunk.chunkData;\n                    break;\n                \n                default:\n                    text = readBytesAsString(chunk.chunkData, chunk.chunkData.length);\n                    this.soundFontInfo[chunk.header] = text;\n            }\n            \n            SpessaSynthInfo(\n                `%c\"${chunk.header}\": %c\"${text}\"`,\n                consoleColors.info,\n                consoleColors.recognized\n            );\n        }\n        \n        // SDTA\n        const sdtaChunk = readRIFFChunk(this.dataArray, false);\n        this.verifyHeader(sdtaChunk, \"list\");\n        this.verifyText(readBytesAsString(this.dataArray, 4), \"sdta\");\n        \n        // smpl\n        SpessaSynthInfo(\"%cVerifying smpl chunk...\", consoleColors.warn);\n        let sampleDataChunk = readRIFFChunk(this.dataArray, false);\n        this.verifyHeader(sampleDataChunk, \"smpl\");\n        /**\n         * @type {IndexedByteArray|Float32Array}\n         */\n        let sampleData;\n        // SF2Pack: the entire data is compressed\n        if (isSF2Pack)\n        {\n            SpessaSynthInfo(\n                \"%cSF2Pack detected, attempting to decode the smpl chunk...\",\n                consoleColors.info\n            );\n            try\n            {\n                /**\n                 * @type {Float32Array}\n                 */\n                sampleData = stbvorbis.decode(this.dataArray.buffer.slice(\n                    this.dataArray.currentIndex,\n                    this.dataArray.currentIndex + sdtaChunk.size - 12\n                )).data[0];\n            }\n            catch (e)\n            {\n                SpessaSynthGroupEnd();\n                throw new Error(`SF2Pack Ogg Vorbis decode error: ${e}`);\n            }\n            SpessaSynthInfo(\n                `%cDecoded the smpl chunk! Length: %c${sampleData.length}`,\n                consoleColors.info,\n                consoleColors.value\n            );\n        }\n        else\n        {\n            /**\n             * @type {IndexedByteArray}\n             */\n            sampleData = this.dataArray;\n            this.sampleDataStartIndex = this.dataArray.currentIndex;\n        }\n        \n        SpessaSynthInfo(\n            `%cSkipping sample chunk, length: %c${sdtaChunk.size - 12}`,\n            consoleColors.info,\n            consoleColors.value\n        );\n        this.dataArray.currentIndex += sdtaChunk.size - 12;\n        \n        // PDTA\n        SpessaSynthInfo(\"%cLoading preset data chunk...\", consoleColors.warn);\n        let presetChunk = readRIFFChunk(this.dataArray);\n        this.verifyHeader(presetChunk, \"list\");\n        readBytesAsString(presetChunk.chunkData, 4);\n        \n        // read the hydra chunks\n        const presetHeadersChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(presetHeadersChunk, \"phdr\");\n        \n        const presetZonesChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(presetZonesChunk, \"pbag\");\n        \n        const presetModulatorsChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(presetModulatorsChunk, \"pmod\");\n        \n        const presetGeneratorsChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(presetGeneratorsChunk, \"pgen\");\n        \n        const presetInstrumentsChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(presetInstrumentsChunk, \"inst\");\n        \n        const presetInstrumentZonesChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(presetInstrumentZonesChunk, \"ibag\");\n        \n        const presetInstrumentModulatorsChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(presetInstrumentModulatorsChunk, \"imod\");\n        \n        const presetInstrumentGeneratorsChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(presetInstrumentGeneratorsChunk, \"igen\");\n        \n        const presetSamplesChunk = readRIFFChunk(presetChunk.chunkData);\n        this.verifyHeader(presetSamplesChunk, \"shdr\");\n        \n        /**\n         * read all the samples\n         * (the current index points to start of the smpl read)\n         */\n        this.dataArray.currentIndex = this.sampleDataStartIndex;\n        this.samples.push(...readSamples(presetSamplesChunk, sampleData, !isSF2Pack));\n        \n        /**\n         * read all the instrument generators\n         * @type {Generator[]}\n         */\n        let instrumentGenerators = readGenerators(presetInstrumentGeneratorsChunk);\n        \n        /**\n         * read all the instrument modulators\n         * @type {Modulator[]}\n         */\n        let instrumentModulators = readModulators(presetInstrumentModulatorsChunk);\n        \n        /**\n         * read all the instrument zones\n         * @type {InstrumentZone[]}\n         */\n        let instrumentZones = readInstrumentZones(\n            presetInstrumentZonesChunk,\n            instrumentGenerators,\n            instrumentModulators,\n            this.samples\n        );\n        \n        this.instruments = readInstruments(presetInstrumentsChunk, instrumentZones);\n        \n        /**\n         * read all the preset generators\n         * @type {Generator[]}\n         */\n        let presetGenerators = readGenerators(presetGeneratorsChunk);\n        \n        /**\n         * Read all the preset modulatorrs\n         * @type {Modulator[]}\n         */\n        let presetModulators = readModulators(presetModulatorsChunk);\n        \n        let presetZones = readPresetZones(presetZonesChunk, presetGenerators, presetModulators, this.instruments);\n        \n        this.presets.push(...readPresets(presetHeadersChunk, presetZones, this.defaultModulators));\n        this.presets.sort((a, b) => (a.program - b.program) + (a.bank - b.bank));\n        // preload the first preset\n        SpessaSynthInfo(\n            `%cParsing finished! %c\"${this.soundFontInfo[\"INAM\"]}\"%c has %c${this.presets.length} %cpresets,\n        %c${this.instruments.length}%c instruments and %c${this.samples.length}%c samples.`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info\n        );\n        SpessaSynthGroupEnd();\n        \n        if (isSF2Pack)\n        {\n            delete this.dataArray;\n        }\n    }\n    \n    /**\n     * @param chunk {RiffChunk}\n     * @param expected {string}\n     */\n    verifyHeader(chunk, expected)\n    {\n        if (chunk.header.toLowerCase() !== expected.toLowerCase())\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(`Invalid chunk header! Expected \"${expected.toLowerCase()}\" got \"${chunk.header.toLowerCase()}\"`);\n        }\n    }\n    \n    /**\n     * @param text {string}\n     * @param expected {string}\n     */\n    verifyText(text, expected)\n    {\n        if (text.toLowerCase() !== expected.toLowerCase())\n        {\n            SpessaSynthGroupEnd();\n            this.parsingError(`Invalid FourCC: Expected \"${expected.toLowerCase()}\" got \"${text.toLowerCase()}\"\\``);\n        }\n    }\n}", "import { IndexedByteArray } from \"../utils/indexed_array.js\";\nimport { readBytesAsString } from \"../utils/byte_functions/string.js\";\nimport { DLSSoundFont } from \"./dls/dls_soundfont.js\";\nimport { SoundFont2 } from \"./read_sf2/soundfont.js\";\n\n/**\n * Loads a soundfont file\n * @param buffer {ArrayBuffer}\n * @returns {BasicSoundFont}\n */\nexport function loadSoundFont(buffer)\n{\n    const check = buffer.slice(8, 12);\n    const a = new IndexedByteArray(check);\n    const id = readBytesAsString(a, 4, undefined, false).toLowerCase();\n    if (id === \"dls \")\n    {\n        return new DLSSoundFont(buffer);\n    }\n    return new SoundFont2(buffer, false);\n}", "import { midiControllers } from \"../../../midi_parser/midi_message.js\";\nimport { modulatorSources } from \"../../../soundfont/basic_soundfont/modulator.js\";\n\n/*\n * A bit of explanation:\n * The controller table is stored as an int16 array, it stores 14-bit values.\n * This controller table is then extedned with the modulatorSources section,\n * for example pitch range and pitch range depth.\n * This allows us for precise control range and supports full pitch wheel resolution.\n */\nexport const NON_CC_INDEX_OFFSET = 128;\nexport const CONTROLLER_TABLE_SIZE = 147;\n\n\n// an array with preset default values so we can quickly use set() to reset the controllers\nexport const resetArray = new Int16Array(CONTROLLER_TABLE_SIZE).fill(0);\nexport const setResetValue = (i, v) => resetArray[i] = v << 7;\n\n// values come from Falcosoft MidiPlayer 6\nsetResetValue(midiControllers.mainVolume, 100);\nsetResetValue(midiControllers.balance, 64);\nsetResetValue(midiControllers.expressionController, 127);\nsetResetValue(midiControllers.pan, 64);\n\nsetResetValue(midiControllers.timbreHarmonicContent, 64);\nsetResetValue(midiControllers.releaseTime, 64);\nsetResetValue(midiControllers.attackTime, 64);\nsetResetValue(midiControllers.brightness, 64);\n\nsetResetValue(midiControllers.soundController6, 64);\nsetResetValue(midiControllers.soundController7, 64);\nsetResetValue(midiControllers.soundController8, 64);\nsetResetValue(midiControllers.soundController9, 64);\nsetResetValue(midiControllers.generalPurposeController6, 64);\nsetResetValue(midiControllers.generalPurposeController8, 64);\n\n// pitch wheel\nsetResetValue(NON_CC_INDEX_OFFSET + modulatorSources.pitchWheel, 64);\nsetResetValue(NON_CC_INDEX_OFFSET + modulatorSources.pitchWheelRange, 2);\n\nexport const customControllers = {\n    channelTuning: 0,           // cents, RPN for fine tuning\n    channelTransposeFine: 1,    // cents, only the decimal tuning, (e.g. transpose is 4.5, then shift by 4 keys + tune by 50 cents)\n    modulationMultiplier: 2,    // cents, set by moduldation depth RPN\n    masterTuning: 3,            // cents, set by system exclusive\n    channelTuningSemitones: 4   // semitones, for RPN coarse tuning\n};\nexport const CUSTOM_CONTROLLER_TABLE_SIZE = Object.keys(customControllers).length;\nexport const customResetArray = new Float32Array(CUSTOM_CONTROLLER_TABLE_SIZE);\ncustomResetArray[customControllers.modulationMultiplier] = 1;\n/**\n * @enum {number}\n */\nexport const dataEntryStates = {\n    Idle: 0,\n    RPCoarse: 1,\n    RPFine: 2,\n    NRPCoarse: 3,\n    NRPFine: 4,\n    DataCoarse: 5,\n    DataFine: 6\n};", "import { dataBytesAmount, getChannel, messageTypes, MidiMessage } from \"./midi_message.js\";\nimport { IndexedByteArray } from \"../utils/indexed_array.js\";\nimport { consoleColors, formatTitle } from \"../utils/other.js\";\nimport { SpessaSynthGroupCollapsed, SpessaSynthGroupEnd, SpessaSynthInfo, SpessaSynthWarn } from \"../utils/loggin.js\";\nimport { readRIFFChunk } from \"../soundfont/basic_soundfont/riff_chunk.js\";\nimport { readVariableLengthQuantity } from \"../utils/byte_functions/variable_length_quantity.js\";\nimport { readBytesAsUintBigEndian } from \"../utils/byte_functions/big_endian.js\";\nimport { readBytesAsString } from \"../utils/byte_functions/string.js\";\nimport { readLittleEndian } from \"../utils/byte_functions/little_endian.js\";\nimport { RMIDINFOChunks } from \"./rmidi_writer.js\";\nimport { BasicMIDI, MIDIticksToSeconds } from \"./basic_midi.js\";\n\n\nconst GS_TEXT_HEADER = new Uint8Array([0x41, 0x10, 0x45, 0x12, 0x10, 0x00, 0x00]);\n\n/**\n * midi_loader.js\n * purpose: parses a midi file for the seqyencer, including things like marker or CC 2/4 loop detection, copyright detection etc.\n */\nclass MIDI extends BasicMIDI\n{\n    /**\n     * Parses a given midi file\n     * @param arrayBuffer {ArrayBuffer}\n     * @param fileName {string} optional, replaces the decoded title if empty\n     */\n    constructor(arrayBuffer, fileName = \"\")\n    {\n        super();\n        SpessaSynthGroupCollapsed(`%cParsing MIDI File...`, consoleColors.info);\n        const binaryData = new IndexedByteArray(arrayBuffer);\n        let fileByteArray;\n        \n        // check for rmid\n        let copyrightDetected = false;\n        \n        let nameDetected = false;\n        \n        let DLSRMID = false;\n        \n        const initialString = readBytesAsString(binaryData, 4);\n        binaryData.currentIndex -= 4;\n        if (initialString === \"RIFF\")\n        {\n            // possibly an RMID file (https://github.com/spessasus/sf2-rmidi-specification#readme)\n            // skip size\n            binaryData.currentIndex += 8;\n            const rmid = readBytesAsString(binaryData, 4, undefined, false);\n            if (rmid !== \"RMID\")\n            {\n                SpessaSynthGroupEnd();\n                throw new SyntaxError(`Invalid RMIDI Header! Expected \"RMID\", got \"${rmid}\"`);\n            }\n            const riff = readRIFFChunk(binaryData);\n            if (riff.header !== \"data\")\n            {\n                SpessaSynthGroupEnd();\n                throw new SyntaxError(`Invalid RMIDI Chunk header! Expected \"data\", got \"${rmid}\"`);\n            }\n            // this is an rmid, load the midi into array for parsing\n            fileByteArray = riff.chunkData;\n            \n            // keep loading chunks until we get sfbk\n            while (binaryData.currentIndex <= binaryData.length)\n            {\n                const startIndex = binaryData.currentIndex;\n                const currentChunk = readRIFFChunk(binaryData, true);\n                if (currentChunk.header === \"RIFF\")\n                {\n                    const type = readBytesAsString(currentChunk.chunkData, 4).toLowerCase();\n                    if (type === \"sfbk\" || type === \"sfpk\" || type === \"dls \")\n                    {\n                        SpessaSynthInfo(\"%cFound embedded soundfont!\", consoleColors.recognized);\n                        this.embeddedSoundFont = binaryData.slice(startIndex, startIndex + currentChunk.size).buffer;\n                    }\n                    else\n                    {\n                        SpessaSynthWarn(`Unknown RIFF chunk: \"${type}\"`);\n                    }\n                    if (type === \"dls \")\n                    {\n                        // assume bank offset of 0 by default. If we find any bank selects, then the offset is 1.\n                        DLSRMID = true;\n                    }\n                }\n                else if (currentChunk.header === \"LIST\")\n                {\n                    const type = readBytesAsString(currentChunk.chunkData, 4);\n                    if (type === \"INFO\")\n                    {\n                        SpessaSynthInfo(\"%cFound RMIDI INFO chunk!\", consoleColors.recognized);\n                        this.RMIDInfo = {};\n                        while (currentChunk.chunkData.currentIndex <= currentChunk.size)\n                        {\n                            const infoChunk = readRIFFChunk(currentChunk.chunkData, true);\n                            this.RMIDInfo[infoChunk.header] = infoChunk.chunkData;\n                        }\n                        if (this.RMIDInfo[\"ICOP\"])\n                        {\n                            copyrightDetected = true;\n                            this.copyright = readBytesAsString(\n                                this.RMIDInfo[\"ICOP\"],\n                                this.RMIDInfo[\"ICOP\"].length,\n                                undefined,\n                                false\n                            ).replaceAll(\"\\n\", \" \");\n                        }\n                        if (this.RMIDInfo[\"INAM\"])\n                        {\n                            this.rawMidiName = this.RMIDInfo[RMIDINFOChunks.name];\n                            this.midiName = readBytesAsString(\n                                this.rawMidiName,\n                                this.rawMidiName.length,\n                                undefined,\n                                false\n                            ).replaceAll(\"\\n\", \" \");\n                            nameDetected = true;\n                        }\n                        // these can be used interchangeably\n                        if (this.RMIDInfo[\"IALB\"] && !this.RMIDInfo[\"IPRD\"])\n                        {\n                            this.RMIDInfo[\"IPRD\"] = this.RMIDInfo[\"IALB\"];\n                        }\n                        if (this.RMIDInfo[\"PRD\"] && !this.RMIDInfo[\"IALB\"])\n                        {\n                            this.RMIDInfo[\"IALB\"] = this.RMIDInfo[\"IPRD\"];\n                        }\n                        this.bankOffset = 1; // defaults to 1\n                        if (this.RMIDInfo[RMIDINFOChunks.bankOffset])\n                        {\n                            this.bankOffset = readLittleEndian(this.RMIDInfo[RMIDINFOChunks.bankOffset], 2);\n                        }\n                    }\n                }\n            }\n            \n            if (DLSRMID)\n            {\n                // assume bank offset of 0 by default. If we find any bank selects, then the offset is 1.\n                this.bankOffset = 0;\n            }\n        }\n        else\n        {\n            fileByteArray = binaryData;\n        }\n        const headerChunk = this.readMIDIChunk(fileByteArray);\n        if (headerChunk.type !== \"MThd\")\n        {\n            SpessaSynthGroupEnd();\n            throw new SyntaxError(`Invalid MIDI Header! Expected \"MThd\", got \"${headerChunk.type}\"`);\n        }\n        \n        if (headerChunk.size !== 6)\n        {\n            SpessaSynthGroupEnd();\n            throw new RangeError(`Invalid MIDI header chunk size! Expected 6, got ${headerChunk.size}`);\n        }\n        \n        // format\n        this.format = readBytesAsUintBigEndian(headerChunk.data, 2);\n        // tracks count\n        this.tracksAmount = readBytesAsUintBigEndian(headerChunk.data, 2);\n        // time division\n        this.timeDivision = readBytesAsUintBigEndian(headerChunk.data, 2);\n        \n        /**\n         * The MIDI's key range\n         * @type {{min: number, max: number}}\n         */\n        this.keyRange = { min: 127, max: 0 };\n        \n        /**\n         * Contains the lyrics as binary chunks\n         * @type {Uint8Array[]}\n         */\n        this.lyrics = [];\n        \n        /**\n         * Contains all the tempo changes in the file. (Ordered from last to first)\n         * @type {{\n         *     ticks: number,\n         *     tempo: number\n         * }[]}\n         */\n        this.tempoChanges = [{ ticks: 0, tempo: 120 }];\n        \n        let loopStart = null;\n        let loopEnd = null;\n        \n        this.lastVoiceEventTick = 0;\n        \n        /**\n         * Midi port numbers for each tracks\n         * @type {number[]}\n         */\n        this.midiPorts = [];\n        \n        let portOffset = 0;\n        /**\n         * Channel offsets for each port, using the SpessaSynth method\n         * @type {number[]}\n         */\n        this.midiPortChannelOffsets = [];\n        \n        /**\n         * All channels that each track uses. Note: these channels range from 0 to 15, excluding the port offsets!\n         * @type {Set<number>[]}\n         */\n        this.usedChannelsOnTrack = [];\n        \n        /**\n         * Read all the tracks\n         * @type {MidiMessage[][]}\n         */\n        this.tracks = [];\n        for (let i = 0; i < this.tracksAmount; i++)\n        {\n            /**\n             * @type {MidiMessage[]}\n             */\n            const track = [];\n            const trackChunk = this.readMIDIChunk(fileByteArray);\n            const usedChannels = new Set();\n            this.midiPorts.push(-1);\n            \n            if (trackChunk.type !== \"MTrk\")\n            {\n                SpessaSynthGroupEnd();\n                throw new SyntaxError(`Invalid track header! Expected \"MTrk\" got \"${trackChunk.type}\"`);\n            }\n            \n            /**\n             * MIDI running byte\n             * @type {number}\n             */\n            let runningByte = undefined;\n            \n            let totalTicks = 0;\n            // format 2 plays sequentially\n            if (this.format === 2 && i > 0)\n            {\n                totalTicks += this.tracks[i - 1][this.tracks[i - 1].length - 1].ticks;\n            }\n            // loop until we reach the end of track\n            while (trackChunk.data.currentIndex < trackChunk.size)\n            {\n                totalTicks += readVariableLengthQuantity(trackChunk.data);\n                \n                // check if the status byte is valid (IE. larger than 127)\n                const statusByteCheck = trackChunk.data[trackChunk.data.currentIndex];\n                \n                let statusByte;\n                // if we have a running byte and the status byte isn't valid\n                if (runningByte !== undefined && statusByteCheck < 0x80)\n                {\n                    statusByte = runningByte;\n                }\n                else if (!runningByte && statusByteCheck < 0x80)\n                {\n                    // if we don't have a running byte and the status byte isn't valid, it's an error.\n                    SpessaSynthGroupEnd();\n                    throw new SyntaxError(`Unexpected byte with no running byte. (${statusByteCheck})`);\n                }\n                else\n                {\n                    // if the status byte is valid, just use that\n                    statusByte = trackChunk.data[trackChunk.data.currentIndex++];\n                }\n                const statusByteChannel = getChannel(statusByte);\n                \n                let eventDataLength;\n                \n                // determine the message's length;\n                switch (statusByteChannel)\n                {\n                    case -1:\n                        // system common/realtime (no length)\n                        eventDataLength = 0;\n                        break;\n                    \n                    case -2:\n                        // meta (the next is the actual status byte)\n                        statusByte = trackChunk.data[trackChunk.data.currentIndex++];\n                        eventDataLength = readVariableLengthQuantity(trackChunk.data);\n                        break;\n                    \n                    case -3:\n                        // sysex\n                        eventDataLength = readVariableLengthQuantity(trackChunk.data);\n                        break;\n                    \n                    default:\n                        // voice message\n                        // get the midi message length\n                        if (totalTicks > this.lastVoiceEventTick)\n                        {\n                            this.lastVoiceEventTick = totalTicks;\n                        }\n                        eventDataLength = dataBytesAmount[statusByte >> 4];\n                        if ((statusByte & 0xF0) === messageTypes.noteOn)\n                        {\n                            usedChannels.add(statusByteChannel);\n                            const note = trackChunk.data[trackChunk.data.currentIndex];\n                            this.keyRange.min = Math.min(this.keyRange.min, note);\n                            this.keyRange.max = Math.max(this.keyRange.max, note);\n                        }\n                        \n                        // save the status byte\n                        runningByte = statusByte;\n                        break;\n                }\n                \n                // put the event data into the array\n                const eventData = new IndexedByteArray(eventDataLength);\n                const messageData = trackChunk.data.slice(\n                    trackChunk.data.currentIndex,\n                    trackChunk.data.currentIndex + eventDataLength\n                );\n                trackChunk.data.currentIndex += eventDataLength;\n                eventData.set(messageData, 0);\n                \n                const message = new MidiMessage(totalTicks, statusByte, eventData);\n                track.push(message);\n                \n                switch (statusByteChannel)\n                {\n                    case -2:\n                        // since this is a meta message\n                        switch (statusByte)\n                        {\n                            case messageTypes.setTempo:\n                                // add the tempo change\n                                this.tempoChanges.push({\n                                    ticks: totalTicks,\n                                    tempo: 60000000 / readBytesAsUintBigEndian(messageData, 3)\n                                });\n                                break;\n                            \n                            case messageTypes.marker:\n                                // check for loop markers\n                                const text = readBytesAsString(eventData, eventData.length).trim().toLowerCase();\n                                switch (text)\n                                {\n                                    default:\n                                        break;\n                                    \n                                    case \"start\":\n                                    case \"loopstart\":\n                                        loopStart = totalTicks;\n                                        break;\n                                    \n                                    case \"loopend\":\n                                        loopEnd = totalTicks;\n                                }\n                                eventData.currentIndex = 0;\n                                break;\n                            \n                            case messageTypes.midiPort:\n                                const port = eventData[0];\n                                this.midiPorts[i] = port;\n                                if (this.midiPortChannelOffsets[port] === undefined)\n                                {\n                                    this.midiPortChannelOffsets[port] = portOffset;\n                                    portOffset += 16;\n                                }\n                                break;\n                            \n                            case messageTypes.copyright:\n                                if (!copyrightDetected)\n                                {\n                                    this.copyright += readBytesAsString(\n                                        eventData,\n                                        eventData.length,\n                                        undefined,\n                                        false\n                                    ) + \"\\n\";\n                                }\n                                break;\n                            \n                            case messageTypes.lyric:\n                                this.lyrics.push(eventData);\n                        }\n                        break;\n                    \n                    case -3:\n                        // since this is a sysex message\n                        // check for embedded copyright (roland SC display sysex) http://www.bandtrax.com.au/sysex.htm\n                        // header goes like this: 41 10 45 12 10 00 00\n                        if (eventData.slice(0, 7).every((n, i) => GS_TEXT_HEADER[i] === n))\n                        {\n                            /**\n                             * @type {IndexedByteArray}\n                             */\n                            const cutText = eventData.slice(7, messageData.length - 3);\n                            const decoded = readBytesAsString(cutText, cutText.length) + \"\\n\";\n                            this.copyright += decoded;\n                            SpessaSynthInfo(\n                                `%cDecoded Roland SC message! %c${decoded}`,\n                                consoleColors.recognized,\n                                consoleColors.value\n                            );\n                        }\n                        break;\n                    \n                    \n                    default:\n                        // since this is a voice message\n                        // check for loop (CC 2/4)\n                        if ((statusByte & 0xF0) === messageTypes.controllerChange)\n                        {\n                            switch (eventData[0])\n                            {\n                                case 2:\n                                case 116:\n                                    loopStart = totalTicks;\n                                    break;\n                                \n                                case 4:\n                                case 117:\n                                    if (loopEnd === null)\n                                    {\n                                        loopEnd = totalTicks;\n                                    }\n                                    else\n                                    {\n                                        // this controller has occured more than once, this means that it doesnt indicate the loop\n                                        loopEnd = 0;\n                                    }\n                                    break;\n                                \n                                case 0:\n                                    // check RMID\n                                    if (DLSRMID && eventData[1] !== 0 && eventData[1] !== 127)\n                                    {\n                                        SpessaSynthInfo(\n                                            \"%cDLS RMIDI with offset 1 detected!\",\n                                            consoleColors.recognized\n                                        );\n                                        this.bankOffset = 1;\n                                    }\n                            }\n                        }\n                }\n            }\n            this.tracks.push(track);\n            this.usedChannelsOnTrack.push(usedChannels);\n            SpessaSynthInfo(\n                `%cParsed %c${this.tracks.length}%c / %c${this.tracksAmount}`,\n                consoleColors.info,\n                consoleColors.value,\n                consoleColors.info,\n                consoleColors.value\n            );\n        }\n        \n        SpessaSynthInfo(\n            `%cAll tracks parsed correctly!`,\n            consoleColors.recognized\n        );\n        \n        SpessaSynthGroupCollapsed(\n            `%cCorrecting loops, ports and detecting notes...`,\n            consoleColors.info\n        );\n        \n        const firstNoteOns = [];\n        for (const t of this.tracks)\n        {\n            const firstNoteOn = t.find(e => (e.messageStatusByte & 0xF0) === messageTypes.noteOn);\n            if (firstNoteOn)\n            {\n                firstNoteOns.push(firstNoteOn.ticks);\n            }\n        }\n        this.firstNoteOn = Math.min(...firstNoteOns);\n        \n        SpessaSynthInfo(\n            `%cFirst note-on detected at: %c${this.firstNoteOn}%c ticks!`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info\n        );\n        \n        \n        if (loopStart !== null && loopEnd === null)\n        {\n            // not a loop\n            loopStart = this.firstNoteOn;\n            loopEnd = this.lastVoiceEventTick;\n        }\n        else\n        {\n            if (loopStart === null)\n            {\n                loopStart = this.firstNoteOn;\n            }\n            \n            if (loopEnd === null || loopEnd === 0)\n            {\n                loopEnd = this.lastVoiceEventTick;\n            }\n        }\n        \n        /**\n         *\n         * @type {{start: number, end: number}}\n         */\n        this.loop = { start: loopStart, end: loopEnd };\n        \n        SpessaSynthInfo(\n            `%cLoop points: start: %c${this.loop.start}%c end: %c${this.loop.end}`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized\n        );\n        \n        // fix midi ports:\n        // midi tracks without ports will have a value of -1\n        // if all ports have a value of -1, set it to 0, otherwise take the first midi port and replace all -1 with it\n        // why do this? some midis (for some reason) specify all channels to port 1 or else, but leave the conductor track with no port pref.\n        // this spessasynth to reserve the first 16 channels for the conductor track (which doesn't play anything) and use additional 16 for the actual ports.\n        let defaultPort = 0;\n        for (let port of this.midiPorts)\n        {\n            if (port !== -1)\n            {\n                defaultPort = port;\n                break;\n            }\n        }\n        this.midiPorts = this.midiPorts.map(port => port === -1 ? defaultPort : port);\n        // add dummy port if empty\n        if (this.midiPortChannelOffsets.length === 0)\n        {\n            this.midiPortChannelOffsets = [0];\n        }\n        if (this.midiPortChannelOffsets.length < 2)\n        {\n            SpessaSynthInfo(`%cNo additional MIDI Ports detected.`, consoleColors.info);\n        }\n        else\n        {\n            SpessaSynthInfo(`%cMIDI Ports detected!`, consoleColors.recognized);\n        }\n        \n        // midi name\n        if (!nameDetected)\n        {\n            if (this.tracks.length > 1)\n            {\n                // if more than 1 track and the first track has no notes, just find the first trackName in the first track\n                if (\n                    this.tracks[0].find(\n                        message => message.messageStatusByte >= messageTypes.noteOn\n                            &&\n                            message.messageStatusByte < messageTypes.polyPressure\n                    ) === undefined\n                )\n                {\n                    \n                    let name = this.tracks[0].find(message => message.messageStatusByte === messageTypes.trackName);\n                    if (name)\n                    {\n                        this.rawMidiName = name.messageData;\n                        this.midiName = readBytesAsString(name.messageData, name.messageData.length, undefined, false);\n                    }\n                }\n            }\n            else\n            {\n                // if only 1 track, find the first \"track name\" event\n                let name = this.tracks[0].find(message => message.messageStatusByte === messageTypes.trackName);\n                if (name)\n                {\n                    this.rawMidiName = name.messageData;\n                    this.midiName = readBytesAsString(name.messageData, name.messageData.length, undefined, false);\n                }\n            }\n        }\n        \n        this.fileName = fileName;\n        this.midiName = this.midiName.trim();\n        // if midiName is \"\", use the file name\n        if (this.midiName.length === 0)\n        {\n            SpessaSynthInfo(\n                `%cNo name detected. Using the alt name!`,\n                consoleColors.info\n            );\n            this.midiName = formatTitle(fileName);\n            // encode it too\n            this.rawMidiName = new Uint8Array(this.midiName.length);\n            for (let i = 0; i < this.midiName.length; i++)\n            {\n                this.rawMidiName[i] = this.midiName.charCodeAt(i);\n            }\n        }\n        else\n        {\n            SpessaSynthInfo(\n                `%cMIDI Name detected! %c\"${this.midiName}\"`,\n                consoleColors.info,\n                consoleColors.recognized\n            );\n        }\n        // reverse the tempo changes\n        this.tempoChanges.reverse();\n        \n        /**\n         * The total playback time, in seconds\n         * @type {number}\n         */\n        this.duration = MIDIticksToSeconds(this.lastVoiceEventTick, this);\n        \n        SpessaSynthGroupEnd();\n        SpessaSynthInfo(\n            `%cMIDI file parsed. Total tick time: %c${this.lastVoiceEventTick}%c, total seconds time: %c${this.duration}`,\n            consoleColors.info,\n            consoleColors.recognized,\n            consoleColors.info,\n            consoleColors.recognized\n        );\n        SpessaSynthGroupEnd();\n    }\n    \n    /**\n     * @param fileByteArray {IndexedByteArray}\n     * @returns {{type: string, size: number, data: IndexedByteArray}}\n     */\n    readMIDIChunk(fileByteArray)\n    {\n        const chunk = {};\n        // type\n        chunk.type = readBytesAsString(fileByteArray, 4);\n        // size\n        chunk.size = readBytesAsUintBigEndian(fileByteArray, 4);\n        // data\n        chunk.data = new IndexedByteArray(chunk.size);\n        const dataSlice = fileByteArray.slice(fileByteArray.currentIndex, fileByteArray.currentIndex + chunk.size);\n        chunk.data.set(dataSlice, 0);\n        fileByteArray.currentIndex += chunk.size;\n        return chunk;\n    }\n}\n\nexport { MIDI };", "/**\n * A simplified version of the MIDI, accessible at all times from the Sequencer. use getMIDI() to get the actual sequence\n * This class contains all properties that MIDI does, except for tracks, which is the track data.\n */\nexport class MidiData\n{\n    /**\n     * @param midi {BasicMIDI}\n     */\n    constructor(midi)\n    {\n        /**\n         * The time division of the sequence\n         * @type {number}\n         */\n        this.timeDivision = midi.timeDivision;\n        /**\n         * The duration of the sequence, in seconds\n         * @type {number}\n         */\n        this.duration = midi.duration;\n        /**\n         * The tempo changes in the sequence, ordered from last to first\n         * @type {{ticks: number, tempo: number}[]}\n         */\n        this.tempoChanges = midi.tempoChanges;\n        /**\n         * Contains the copyright strings\n         * @type {string}\n         */\n        this.copyright = midi.copyright;\n        \n        /**\n         * The amount of tracks in the sequence\n         * @type {number}\n         */\n        this.tracksAmount = midi.tracksAmount;\n        \n        /**\n         * The lyrics of the sequence as binary chunks\n         * @type {Uint8Array[]}\n         */\n        this.lyrics = midi.lyrics;\n        \n        this.firstNoteOn = midi.firstNoteOn;\n        \n        /**\n         * The MIDI's key range\n         * @type {{min: number, max: number}}\n         */\n        this.keyRange = midi.keyRange;\n        \n        /**\n         * The last voice (note on, off, cc change etc.) event tick\n         * @type {number}\n         */\n        this.lastVoiceEventTick = midi.lastVoiceEventTick;\n        \n        /**\n         * Midi port numbers for each track\n         * @type {number[]}\n         */\n        this.midiPorts = midi.midiPorts;\n        \n        /**\n         * Channel offsets for each port, using the SpessaSynth method\n         * @type {number[]}\n         */\n        this.midiPortChannelOffsets = midi.midiPortChannelOffsets;\n        \n        /**\n         * All channels that each track uses\n         * @type {Set<number>[]}\n         */\n        this.usedChannelsOnTrack = midi.usedChannelsOnTrack;\n        \n        /**\n         * The loop points (in ticks) of the sequence\n         * @type {{start: number, end: number}}\n         */\n        this.loop = midi.loop;\n        \n        /**\n         * The sequence's name\n         * @type {string}\n         */\n        this.midiName = midi.midiName;\n        \n        /**\n         * The file name of the sequence, if provided in the MIDI class\n         * @type {string}\n         */\n        this.fileName = midi.fileName;\n        \n        /**\n         * The raw, encoded MIDI name.\n         * @type {Uint8Array}\n         */\n        this.rawMidiName = midi.rawMidiName;\n        \n        /**\n         * Indicates if the midi has an embedded soundfont\n         * @type {boolean}\n         */\n        this.isEmbedded = midi.embeddedSoundFont !== undefined;\n        \n        /**\n         * The RMID Info data if RMID, otherwise undefined\n         * @type {Object<string, IndexedByteArray>}\n         */\n        this.RMIDInfo = midi.RMIDInfo;\n        /**\n         * The bank offset for RMIDI\n         * @type {number}\n         */\n        this.bankOffset = midi.bankOffset;\n    }\n}\n\n/**\n *\n * @type {MidiData}\n */\nexport const DUMMY_MIDI_DATA = {\n    duration: 99999,\n    firstNoteOn: 0,\n    loop: {\n        start: 0,\n        end: 123456\n    },\n    \n    lastVoiceEventTick: 123456,\n    lyrics: [],\n    copyright: \"\",\n    midiPorts: [],\n    midiPortChannelOffsets: [],\n    tracksAmount: 0,\n    tempoChanges: [{ ticks: 0, tempo: 120 }],\n    fileName: \"NOT_LOADED.mid\",\n    midiName: \"Loading...\",\n    rawMidiName: new Uint8Array([76, 111, 97, 100, 105, 110, 103, 46, 46, 46]), // \"Loading...\"\n    usedChannelsOnTrack: [],\n    timeDivision: 0,\n    keyRange: { min: 0, max: 127 },\n    isEmbedded: false,\n    RMIDInfo: undefined,\n    bankOffset: 0\n};", "import { BasicSoundFont, loadSoundFont } from \"spessasynth_lib\";\n\nconst message = document.getElementById(\"message\");\ndocument.getElementById(\"dls_upload\").oninput = e =>\n{\n    if (!e.target.files)\n    {\n        return;\n    }\n    const file = e.target.files[0];\n    if (file.type.endsWith(\".dls\"))\n    {\n        message.innerText = \"Not a DLS file.\";\n        return;\n    }\n    const dlsUploadButton = document.getElementById(\"dls_upload_btn\");\n    dlsUploadButton.innerText = file.name;\n    message.innerText = \"Loading...\";\n    setTimeout(async () =>\n    {\n        /**\n         * @type {BasicSoundFont}\n         */\n        let sfont;\n        try\n        {\n            sfont = loadSoundFont(await file.arrayBuffer());\n        }\n        catch (e)\n        {\n            message.style.color = \"red\";\n            message.innerText = `Error: ${e.message}`;\n            return;\n        }\n        document.getElementById(\"sf_info\").classList.remove(\"hidden\");\n        document.getElementById(\"dls_name\").innerText = sfont.soundFontInfo[\"INAM\"] || \"Unnamed\";\n        document.getElementById(\"dls_description\").innerText = (sfont.soundFontInfo[\"ICMT\"] || \"No description\").replace(\n            \"\\nConverted from DLS to SF2 with SpessaSynth\",\n            \"\"\n        );\n        document.getElementById(\"dls_presets\").innerText = sfont.presets.length.toString();\n        document.getElementById(\"dls_samples\").innerText = sfont.samples.length.toString();\n        message.innerText = \"Loaded!\";\n        \n        const convert = document.getElementById(\"convert\");\n        convert.classList.remove(\"hidden\");\n        \n        const downloadButton = document.getElementById(\"download\");\n        const downloadAnchor = downloadButton.firstElementChild;\n        downloadButton.classList.add(\"hidden\");\n        \n        convert.onclick = () =>\n        {\n            /**\n             * @type {Uint8Array}\n             */\n            let binary;\n            try\n            {\n                binary = sfont.write();\n            }\n            catch (e)\n            {\n                message.style.color = \"red\";\n                message.innerText = `Error: ${e.message}`;\n                return;\n            }\n            convert.classList.add(\"hidden\");\n            dlsUploadButton.innerText = \"Convert another DLS\";\n            const blob = new Blob([binary.buffer], { type: \"audio/soundfont\" });\n            const url = URL.createObjectURL(blob);\n            const name = file.name.replace(\"dls\", \"sf2\");\n            downloadAnchor.href = url;\n            downloadAnchor.download = name;\n            downloadAnchor.innerText = `Download ${name}`;\n            \n            downloadButton.classList.remove(\"hidden\");\n            downloadButton.innerHTML = \"\";\n            downloadButton.appendChild(downloadAnchor);\n            message.style.color = \"green\";\n            message.innerText = `Success!`;\n        };\n    });\n};"],
  "mappings": "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",
  "names": ["IndexedByteArray", "args", "combineArrays", "arrs", "length", "sum", "current", "newArr", "offset", "arr", "readBytesAsString", "dataArray", "bytes", "encoding", "trimEnd", "byteBuffer", "finished", "string", "i", "byte", "writeStringAsBytes", "outArray", "string", "padLength", "i", "ENABLE_INFO", "ENABLE_WARN", "ENABLE_GROUP", "SpessaSynthInfo", "message", "ENABLE_INFO", "SpessaSynthWarn", "ENABLE_WARN", "SpessaSynthGroup", "message", "ENABLE_GROUP", "SpessaSynthGroupCollapsed", "SpessaSynthGroupEnd", "consoleColors", "readLittleEndian", "dataArray", "bytesAmount", "out", "i", "writeLittleEndian", "number", "byteTarget", "writeWord", "word", "writeDword", "dword", "signedInt16", "byte1", "byte2", "val", "signedInt8", "byte", "RiffChunk", "header", "size", "data", "readRIFFChunk", "dataArray", "readData", "forceShift", "readBytesAsString", "readLittleEndian", "chunkData", "IndexedByteArray", "writeRIFFChunk", "chunk", "prepend", "array", "writeStringAsBytes", "writeDword", "findRIFFListType", "collection", "type", "c", "readBytesAsString", "generatorTypes", "generatorLimits", "Generator", "type", "value", "lim", "getIGEN", "igensize", "inst", "sum", "z", "g", "generatorTypes", "igendata", "IndexedByteArray", "igenIndex", "instrument", "instrumentZone", "gen", "writeWord", "writeDword", "writeRIFFChunk", "RiffChunk", "getSDTA", "smplStartOffsets", "smplEndOffsets", "compress", "quality", "vorbisFunc", "sampleDatas", "s", "i", "r", "SpessaSynthInfo", "consoleColors", "smplSize", "total", "smplData", "IndexedByteArray", "sample", "data", "startOffset", "endOffset", "jump", "smplChunk", "writeRIFFChunk", "RiffChunk", "getSHDR", "smplStartOffsets", "smplEndOffsets", "shdrData", "IndexedByteArray", "sample", "index", "writeStringAsBytes", "dwStart", "writeDword", "dwEnd", "loopStart", "loopEnd", "writeWord", "writeRIFFChunk", "RiffChunk", "getIMOD", "imodsize", "inst", "sum", "z", "imoddata", "IndexedByteArray", "imodIndex", "ibag", "mod", "writeWord", "writeLittleEndian", "writeRIFFChunk", "RiffChunk", "getIBAG", "ibagsize", "sum", "i", "ibagdata", "IndexedByteArray", "zoneID", "generatorIndex", "modulatorIndex", "inst", "ibag", "writeWord", "writeRIFFChunk", "RiffChunk", "getINST", "instsize", "instdata", "IndexedByteArray", "instrumentStart", "instrumentID", "inst", "writeStringAsBytes", "writeWord", "writeRIFFChunk", "RiffChunk", "getPGEN", "pgensize", "preset", "size", "z", "g", "generatorTypes", "pgendata", "IndexedByteArray", "pgenIndex", "presetZone", "gen", "writeWord", "writeRIFFChunk", "RiffChunk", "getPMOD", "pmodsize", "preset", "sum", "z", "pmoddata", "IndexedByteArray", "pmodIndex", "pbag", "mod", "writeWord", "writeLittleEndian", "writeRIFFChunk", "RiffChunk", "getPBAG", "pbagsize", "sum", "i", "pbagdata", "IndexedByteArray", "zoneID", "generatorIndex", "modulatorIndex", "preset", "pbag", "writeWord", "writeRIFFChunk", "RiffChunk", "getPHDR", "phdrsize", "phdrdata", "IndexedByteArray", "presetStart", "preset", "writeStringAsBytes", "writeWord", "writeDword", "writeRIFFChunk", "RiffChunk", "DEFAULT_WRITE_OPTIONS", "write", "options", "SpessaSynthGroupCollapsed", "consoleColors", "SpessaSynthInfo", "infoArrays", "type", "data", "major", "minor", "ckdata", "IndexedByteArray", "writeWord", "writeRIFFChunk", "RiffChunk", "arr", "writeStringAsBytes", "combined", "combineArrays", "infoChunk", "smplStartOffsets", "smplEndOffsets", "sdtaChunk", "getSDTA", "shdrChunk", "getSHDR", "igenChunk", "getIGEN", "imodChunk", "getIMOD", "ibagChunk", "getIBAG", "instChunk", "getINST", "pgenChunk", "getPGEN", "pmodChunk", "getPMOD", "pbagChunk", "getPBAG", "phdrChunk", "getPHDR", "pdtadata", "pdtaChunk", "riffdata", "main", "SpessaSynthGroupEnd", "midiControllers", "modulatorSources", "modulatorCurveTypes", "Modulator", "_Modulator", "params", "generatorTypes", "modulator", "mod1", "mod2", "getKeyByValue", "object", "value", "key", "sourceString", "midiControllers", "secSrcString", "DEFAULT_ATTENUATION_MOD_AMOUNT", "DEFAULT_ATTENUATION_MOD_CURVE_TYPE", "getModSourceEnum", "curveType", "polarity", "direction", "isCC", "index", "defaultModulators", "BasicSoundFont", "_BasicSoundFont", "data", "defaultModulators", "m", "Modulator", "soundfonts", "mainSf", "presets", "newPreset", "existingPreset", "i", "z", "s", "instrument", "preset", "sample", "offset", "p", "bankNr", "programNr", "fallbackToProgram", "SpessaSynthWarn", "consoleColors", "presetName", "error", "write", "readDLSInstrumentList", "instrumentListChunk", "SpessaSynthGroupCollapsed", "consoleColors", "i", "readRIFFChunk", "SpessaSynthGroupEnd", "BasicPreset", "modulators", "i", "z", "index", "keyMin", "keyMax", "key", "velocity", "samandgen", "midiNote", "memorized", "isInRange", "min", "max", "number", "addUnique", "main", "adder", "g", "mg", "addUniqueMods", "m", "mm", "Modulator", "parsedGeneratorsAndSamples", "globalPresetGenerators", "globalPresetModulators", "currentZone", "zone", "presetGenerators", "presetModulators", "globalInstrumentGenerators", "globalInstrumentModulators", "instrumentZone", "instrumentGenerators", "instrumentModulators", "finalModulatorList", "mod", "identicalInstrumentModulator", "generatorTypes", "BasicZone", "BasicInstrumentZone", "BasicZone", "BasicPresetZone", "BasicInstrument", "z", "i", "index", "DLSPreset", "BasicPreset", "ulBank", "ulInstrument", "defaultModulators", "BasicInstrument", "zone", "BasicPresetZone", "readDLSInstrument", "chunk", "readBytesAsString", "chunks", "readRIFFChunk", "instrumentHeader", "c", "SpessaSynthGroupEnd", "regions", "readLittleEndian", "ulBank", "ulInstrument", "preset", "DLSPreset", "presetName", "infoChunk", "findRIFFListType", "info", "SpessaSynthGroup", "consoleColors", "regionListChunk", "globalZone", "BasicInstrumentZone", "globalLart", "globalLar2", "i", "type", "zone", "DLSDestinations", "DLSSources", "getSF2SourceFromDLS", "source", "sourceEnum", "isCC", "DLSSources", "modulatorSources", "midiControllers", "getSF2GeneratorFromDLS", "destination", "amount", "DLSDestinations", "generatorTypes", "checkForSpecialDLSCombo", "getSF2ModulatorFromArticulator", "control", "transform", "value", "specialDestination", "destinationGenerator", "sf2Source", "swapSources", "isSourceNoController", "sf2GenDestination", "sf2SecondSource", "sourceEnumFinal", "outputTransform", "sourceTransform", "modulatorCurveTypes", "sourceIsBipolar", "sourceIsNegative", "getModSourceEnum", "secSourceTransform", "secSourceIsBipolar", "secSourceIsNegative", "secSourceEnumFinal", "temp", "Modulator", "readArticulation", "chunk", "disableVibrato", "artData", "generators", "modulators", "readLittleEndian", "connectionsAmount", "i", "source", "control", "destination", "transform", "value", "generator", "DLSDestinations", "Generator", "generatorTypes", "sustainDb", "percentageSustain", "semi", "cents", "isGenerator", "DLSSources", "correction", "g", "mod", "getSF2ModulatorFromArticulator", "SpessaSynthInfo", "consoleColors", "SpessaSynthWarn", "m", "Modulator", "readLart", "lartChunk", "lar2Chunk", "zone", "art1", "readRIFFChunk", "modsAndGens", "readArticulation", "art2", "DLSZone", "BasicInstrumentZone", "keyRange", "velRange", "attenuationCb", "loopingMode", "loop", "sampleKey", "sample", "sampleID", "samplePitchCorrection", "Generator", "generatorTypes", "coarseTune", "fineTune", "diffStart", "diffEnd", "fine", "coarse", "readRegion", "chunk", "regionChunks", "readRIFFChunk", "regionHeader", "c", "keyMin", "readLittleEndian", "keyMax", "velMin", "velMax", "zone", "DLSZone", "exclusive", "Generator", "generatorTypes", "lart", "findRIFFListType", "lar2", "waveSampleChunk", "originalKey", "pitchCorrection", "signedInt16", "dbCorrection", "loopsAmount", "loopingMode", "loop", "loopLength", "waveLinkChunk", "sampleID", "sample", "attenuation", "BasicSample", "sampleName", "sampleRate", "samplePitch", "samplePitchCorrection", "sampleLink", "sampleType", "loopStart", "loopEnd", "e", "quality", "encodeVorbis", "SpessaSynthWarn", "DLSSample", "BasicSample", "name", "rate", "pitch", "pitchCorrection", "loopStart", "loopEnd", "data", "sampleDbAttenuation", "uint8", "i", "sample", "readDLSSamples", "waveListChunk", "SpessaSynthGroupCollapsed", "consoleColors", "sampleID", "waveChunk", "readRIFFChunk", "readBytesAsString", "waveChunks", "fmtChunk", "c", "waveFormat", "readLittleEndian", "channelsAmount", "sampleRate", "wBitsPerSample", "bytesPerSample", "maxSampleValue", "maxUnsigned", "normalizationFactor", "isUnsigned", "dataChunk", "sampleLength", "sampleData", "i", "sample", "sampleKey", "samplePitch", "sampleLoopStart", "sampleLoopEnd", "sampleDbAttenuation", "wsmpChunk", "signedInt16", "loopSize", "SpessaSynthWarn", "waveInfo", "findRIFFListType", "sampleName", "infoChunk", "DLSSample", "SpessaSynthInfo", "SpessaSynthGroupEnd", "DLSSoundFont", "BasicSoundFont", "buffer", "IndexedByteArray", "SpessaSynthGroup", "consoleColors", "SpessaSynthGroupEnd", "firstChunk", "readRIFFChunk", "readBytesAsString", "chunks", "infoChunk", "findRIFFListType", "infoPart", "info", "value", "SpessaSynthInfo", "colhChunk", "c", "readLittleEndian", "waveListChunk", "instrumentListChunk", "a", "b", "chunk", "expected", "text", "error", "readDLSInstrumentList", "readDLSInstrument", "readRegion", "readLart", "readDLSSamples", "stbvorbis", "isReady", "readySolver", "A", "atob", "I", "g", "B", "E", "Q", "C", "i", "h", "o", "G", "D", "a", "S", "F", "R", "s", "w", "y", "c", "n", "U", "$", "e", "t", "k", "N", "r", "__require", "Y", "J", "_", "II", "f", "H", "L", "M", "AN", "Ae", "d", "q", "K", "l", "u", "b", "X", "m", "Z", "V", "x", "p", "W", "IE", "T", "v", "IA", "A9", "A5", "Ai", "O", "j", "Ag", "P", "Ax", "Ap", "A6", "AV", "z", "AA", "A8", "AI", "A0", "AQ", "AB", "AE", "AC", "Ah", "Ao", "AG", "AD", "Aa", "AS", "AF", "AR", "As", "Aw", "Ay", "Ac", "An", "AU", "A$", "Az", "Ak", "Ar", "AY", "AJ", "Af", "AH", "AL", "AM", "Ad", "Aq", "AK", "Al", "Au", "Ab", "AX", "Am", "AZ", "A7", "A1", "AW", "A_", "AT", "A2", "Av", "AO", "Aj", "AP", "A4", "A3", "Ig", "IB", "LoadedSample", "BasicSample", "sampleName", "sampleStartIndex", "sampleEndIndex", "sampleLoopStartIndex", "sampleLoopEndIndex", "sampleRate", "samplePitch", "samplePitchCorrection", "sampleLink", "sampleType", "smplArr", "sampleIndex", "isDataRaw", "smplStart", "dataStartIndex", "buff", "vorbis", "stbvorbis", "e", "SpessaSynthWarn", "audioData", "convertedSigned16", "i", "readSamples", "sampleHeadersChunk", "smplChunkData", "isSmplDataRaw", "samples", "index", "sample", "readSample", "sampleHeaderData", "smplArrayData", "readBytesAsString", "readLittleEndian", "signedInt8", "ReadGenerator", "Generator", "dataArray", "i", "signedInt16", "readGenerators", "generatorChunk", "gens", "Instrument", "BasicInstrument", "instrumentChunk", "readBytesAsString", "readLittleEndian", "amount", "zones", "i", "readInstruments", "instrumentZones", "instruments", "instrument", "instrumentsAmount", "InstrumentZone", "BasicInstrumentZone", "dataArray", "readLittleEndian", "modulatorZoneSize", "generatorZoneSize", "generators", "i", "modulators", "samples", "sampleID", "g", "generatorTypes", "range", "readInstrumentZones", "zonesChunk", "instrumentGenerators", "instrumentModulators", "instrumentSamples", "zones", "zone", "PresetZone", "BasicPresetZone", "instruments", "instrumentID", "readPresetZones", "presetGenerators", "presetModulators", "Preset", "BasicPreset", "presetChunk", "defaultModulators", "readBytesAsString", "readLittleEndian", "amount", "zones", "i", "readPresets", "presetZones", "presets", "preset", "presetZonesAmount", "ReadModulator", "Modulator", "dataArray", "readLittleEndian", "signedInt16", "readModulators", "modulatorChunk", "gens", "SoundFont2", "BasicSoundFont", "arrayBuffer", "warnDeprecated", "IndexedByteArray", "SpessaSynthGroup", "consoleColors", "SpessaSynthGroupEnd", "firstChunk", "readRIFFChunk", "type", "readBytesAsString", "isSF2Pack", "infoChunk", "chunk", "text", "readLittleEndian", "newModulators", "readModulators", "oldDefaults", "m", "mm", "Modulator", "SpessaSynthInfo", "sdtaChunk", "sampleDataChunk", "sampleData", "stbvorbis", "e", "presetChunk", "presetHeadersChunk", "presetZonesChunk", "presetModulatorsChunk", "presetGeneratorsChunk", "presetInstrumentsChunk", "presetInstrumentZonesChunk", "presetInstrumentModulatorsChunk", "presetInstrumentGeneratorsChunk", "presetSamplesChunk", "readSamples", "instrumentGenerators", "readGenerators", "instrumentModulators", "instrumentZones", "readInstrumentZones", "readInstruments", "presetGenerators", "presetModulators", "presetZones", "readPresetZones", "readPresets", "a", "b", "expected", "loadSoundFont", "buffer", "check", "a", "IndexedByteArray", "readBytesAsString", "DLSSoundFont", "SoundFont2", "NON_CC_INDEX_OFFSET", "CONTROLLER_TABLE_SIZE", "resetArray", "setResetValue", "i", "v", "midiControllers", "modulatorSources", "customControllers", "CUSTOM_CONTROLLER_TABLE_SIZE", "customResetArray", "GS_TEXT_HEADER", "DUMMY_MIDI_DATA", "message", "e", "file", "dlsUploadButton", "sfont", "loadSoundFont", "convert", "downloadButton", "downloadAnchor", "binary", "blob", "url", "name"]
}
